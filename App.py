# -*- coding: utf-8 -*-
"""
Created on Tue Mar 29 14:22:57 2022
@author: marcs
"""
import kivy
from kivy.app import App
from kivy.core.window import Window
from kivy.lang import Builder
from kivy.properties import ObjectProperty, StringProperty
from kivy.uix.label import Label
from kivy.uix.widget import Widget
from kivy.uix.popup import Popup
from kivy.uix.slider import Slider
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.textinput import TextInput
from kivy.uix.image import Image
from kivy.uix.recycleview import RecycleView
from kivy.uix.tabbedpanel import TabbedPanel
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.gridlayout import GridLayout
from kivy.uix.dropdown import DropDown
from kivy.uix.button import Button
from kivy.base import runTouchApp
################################################################################
import uuid
import ifcopenshell
import ifcopenshell.geom
################################################################################
from collections import OrderedDict
import csv
import math
import dataframe_image as dfi
import pandas as pd
import os, sys
import graphviz
import shutil
from kivy.resources import resource_add_path, resource_find

################################################################################
### own libraries.
from IFC_funktionen import *
ifc_name_in = 'test.ifc'
ifc_name_in2 = 'System.ifc'
ifc_file    = ifcopenshell.open(ifc_name_in)
ifc_file_system = ifcopenshell.open(ifc_name_in2)
building    = ifc_file.by_type("IfcBuilding")[0]
create_guid = lambda: ifcopenshell.guid.compress(uuid.uuid1().hex)
Window.size = (1000,700)
ms = ScreenManager()

class Mixed_class(Screen):  #Klasse mit allen Sreenwechsel-Methoden
    def add_ports(self, ifc_file, component, ports, nest=None):
        '''Fügt einen Ports zu einem Bauteil hinzu
        Nest: str/none > neues nest, ansonsten nest > exisstierendes nest'''
        rel_ports = []
        for name, direc, descr in ports: # adding the actual ports
            port = ifc_file.create_entity("IfcDistributionPort")
            port.GlobalId           = ifcopenshell.guid.compress(uuid.uuid1().hex)
            port.OwnerHistory       = component.OwnerHistory
            port.Name               = name
            port.FlowDirection      = direc
            port.Description        = descr
            rel_ports.append(port)
        # adding their "nest"
        if type(nest) in {str, None}:
            rel_nest = ifc_file.create_entity("IfcRelNests")
            rel_nest.Name = nest if nest else "port nesting for " + component.Name
            rel_nest.GlobalId       = ifcopenshell.guid.compress(uuid.uuid1().hex)
            rel_nest.OwnerHistory   = component.OwnerHistory
            rel_nest.RelatingObject = component
            rel_nest.RelatedObjects = rel_ports
        else: # nesting already exists
            rel_nest = nest
            old_rel=list(rel_nest.RelatedObjects) if rel_nest.RelatedObjects else []
            rel_nest.RelatedObjects = old_rel + rel_ports
        return rel_nest, rel_ports    
    def add_links(self, ifc_file, component, from_port, to_port, name=None):
        from_typ, to_typ, name_typ = type(from_port), type(to_port), type(name)
        if from_typ==list and to_typ!=list: to_port  =[to_port]*len(from_port)
        if to_typ==list and from_typ!=list: from_port=[from_port]*len(to_port)
        if type(from_port)!=list: from_port, to_port =[from_port], [to_port]
        if name_typ!=list: name = [name]*len(from_port)
        if not (len(from_port)==len(to_port)==len(name)): raise ValueError("Size Missmatch")
        ###
        links = []
        for fp, tp, nm in zip(from_port, to_port, name):
            link = ifc_file.create_entity("IfcRelConnectsPorts")
            link.GlobalId       = ifcopenshell.guid.compress(uuid.uuid1().hex)
            link.OwnerHistory   = component.OwnerHistory
            link.Name           = nm if nm else "LINK: from {} to {}".format(fp.Name, tp.Name)
            link.RelatingPort   = fp # SOURCE
            link.RelatedPort    = tp # SINK
            links.append(link)
        return links     
    def switch_raumelement(self, button):
        if button.text =="zurück zu den Raumelementen":
            self.app.root.current = "zu den Raumelementen" + self.app.aktueller_raum
            self.app.root.transition.direction = "right"  
    def switch_layout(self, button):
        #Hauptmenü
        if button.text =="Datenerfassung und Berechnungen":                            #Hauptmenü > Main_buttons
            if ms.has_screen("Datenerfassung") == False:
                self.app.root.add_widget(Datenerfassung(name="Datenerfassung"))
            self.app.root.current = 'Datenerfassung'
            self.app.root.transition.direction = "left"
        elif button.text =="Analyse und Datenanpassung":                                                  #Hauptmenü > Main_buttons
            if ms.has_screen("Analyse") == False:
                self.app.root.add_widget(Analyse(name="Analyse"))
            self.app.root.current = 'Analyse'
            self.app.root.transition.direction = "left"
        elif button.text =="Qualitätssicherung":                                       #Hauptmenü > Main_buttons
            if ms.has_screen("Qualitaetssicherung") == False:
                self.app.root.add_widget(Qualitaetssicherung(name="Qualitaetssicherung"))
            self.app.root.current = 'Qualitaetssicherung'
            self.app.root.transition.direction = "left"
        elif button.text =="Beenden":                                                  #Hauptmenü > Main_buttons
            StartApp().stop()
        
        #Datenerfassung und Berechnungen > Übersichtsseite
        elif button.text =="Heizlast nach DIN EN 12831":                               #Datenerfassung und Berechnung Buttons
            if ms.has_screen("Heizlast") == False:
                self.app.root.add_widget(Heizlast(name="Heizlast"))
            self.app.root.current = 'Heizlast'
            self.app.root.transition.direction = "left"
        elif button.text =="Trinkwarmwasserlast auf Basis DIN EN 15450":                #Datenerfassung und Berechnung Buttons
            if ms.has_screen("Trinkwarmwasser1") == False:
                self.app.root.add_widget(Trinkwarmwasser1(name="Trinkwarmwasser1"))
            self.app.root.current = 'Trinkwarmwasser1'
            self.app.root.transition.direction = "left"
        elif button.text =="Anlagenerfassung":                                          #Datenerfassung und Berechnung Buttons
            if ms.has_screen("Anlagenerfassung_Heizung") == False:
                self.app.root.add_widget(Anlagenerfassung_Heizung(name="Anlagenerfassung_Heizung"))
            self.app.root.current = 'Anlagenerfassung_Heizung'
            self.app.root.transition.direction = "left"
        elif button.text =="Anlagenparametrisierung":                      #Datenerfassung und Berechnung Buttons
            if ms.has_screen("Anlagenparametrisierung") == False:
                self.app.root.add_widget(Anlagenparametrisierung(name="Anlagenparametrisierung"))
            self.app.root.current = 'Anlagenparametrisierung'
            self.app.root.transition.direction = "left"
        elif button.text =="Automatischer hydraulischer Abgleich":                      #Datenerfassung und Berechnung Buttons
            if ms.has_screen("Auto_Abgleich") == False:
                self.app.root.add_widget(Auto_Abgleich(name="Auto_Abgleich"))
            self.app.root.current = 'Auto_Abgleich'
            self.app.root.transition.direction = "left"   
        elif button.text =="zurück zum Hauptmenü":                                      #Datenerfassung, Analyse, QS Button, um zum Hauptmenü zu gelangen
            self.app.root.current = 'Main'
            self.app.root.transition.direction = "right"    

        #Datenerfassung > Heizlastberechnung
        elif button.text =="Eingaben zur Heizlastberechnung starten":                   #Heizlastberechnung Buttons
            if ms.has_screen("Gebaeude") == False:
                self.app.root.add_widget(Gebaeude(name="Gebaeude"))
            self.app.root.current = 'Gebaeude'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zum Menü der Datenerfassung":                       #Heizlast, Trinkwarmwasser, Anlagenerfassung etc. Button, 
            self.app.root.current = 'Datenerfassung'                                    #um zur Überischt der Datenerfassung und Berechunngen zu gelangen
            self.app.root.transition.direction = "right"
        
        #Heizlastberechnung > Folie Gebäude
        elif button.text == "Räume hinzufügen (Gebäudedaten sind dann abgeschlossen)":  #Gebäude Button > Übergang zu den Räumen
            if ms.has_screen("Raeume_eingeben") == False:
                self.app.root.add_widget(Raeume_eingeben(name="Raeume_eingeben"))
            self.app.root.current = 'Raeume_eingeben'
            self.app.root.transition.direction = "left"
            building = self.app.ifc_file.by_type("IfcBuilding")[0]
            gebaeude_data = {'Beschreibung': self.imps[0][1].text, 'factor':1.45, 'Ort': self.klima[int(self.imps[1][1].text)][0], 'MittlereAußent': float(self.klima[int(self.imps[1][1].text)][2]), 'Außent': float(self.klima[int(self.imps[1][1].text)][1])}
            building_settings(self.app.ifc_file, building, gebaeude_data['Ort'], gebaeude_data['Beschreibung'], 
                                      gebaeude_data['factor'], gebaeude_data['Außent'], gebaeude_data['MittlereAußent'])
        elif button.text == 'zurück zum Beginn':                                        #Gebäude > zurück zum Anfang der Heizlastfolien
            self.app.root.current = 'Heizlast'
            self.app.root.transition.direction = "right"
        
        #Heizlastberechnung > Folie Räume
        elif button.text == 'Raum hinzufügen':                                          #Räume > Button um Räume hinzuzufügen
            self.L_KOERPER.clear_widgets()
            self.L_KOERPER.add_widget(self.our_layouts['Raum hinzufügen'])
        elif button.text in self.app.eingaben.get('Räume', []):                         ###diese Funktion wird von Räume hinzufügen verwendet
            room_data = self.app.eingaben['Räume'][button.text]
            self.L_KOERPER.clear_widgets()
            self.L_KOERPER.add_widget(self.our_layouts['Modify Room'])
            for txt, txt2, imp, imp2 in self.imps:
                imp2.text = str(room_data[txt.text])
            self.our_layouts['Modify Room'].children[-1].children[-2].text=button.text
        elif button.text == 'Wände hinzufügen (Räume sind dann abgeschlossen)':         #Räume > Eingaben abschließen und die Räume erzeugen und dann zur Folie für die Wände
            self.app.defined_rooms = sorted(self.app.eingaben['Räume'].keys())
            if ms.has_screen("Waende") == False:
                self.app.root.add_widget(Waende(name="Waende"))
            self.app.root.current = 'Waende'
            self.app.root.transition.direction = "left"
            building = self.app.ifc_file.by_type("IfcBuilding")[0]
            for room in self.app.eingaben['Räume']:
                room_data = self.app.eingaben['Räume'][room]
                self.app.raumhoehen[room_data['Raumname']] = float(room_data["Raumhoehe"])
                self.app.raumflaechen[room_data['Raumname']] = float(room_data["Raumflaeche"])
                add_room(self.app.ifc_file, building, room_data['Raumname'], float(room_data["Raumhoehe"]),
                         float(room_data['Raumflaeche']), float(room_data['Tsoll']), self.nmin[room_data['Raumname']]) #kein zurück, Räume sind der IFC hinzugefügt
        elif button.text == 'zurück zu den Gebäudedaten':                               #Räume > zurück zur vorherigen Folie mit den Gebäudeeingaben
            self.app.root.current = 'Gebaeude'
            self.app.root.transition.direction = "right"
        
        #Heizlastberechnung > Folie Wände
        elif button.text == 'Wände hinzufügen':                                          #Wände > Button um Wände hinzuzufügen
            self.L_KOERPER.clear_widgets()
            self.L_KOERPER.add_widget(self.our_layouts['Wände hinzufügen'])
        elif button.text == 'Fenster hinzufügen (Wände sind dann abgeschlossen)':        #Wände > Eingaben abschließen und die Wände erzeugen und dann zur Folie für die Fenster 
            self.app.defined_walls = list(self.app.waende_eingegeben.keys())
            if "Wände" in self.app.defined_walls:
                self.app.defined_walls.remove('Wände')
            else: pass
            if ms.has_screen("Fenster") == False:    
                self.app.root.add_widget(Fenster(name="Fenster"))
            self.app.root.current = 'Fenster'
            self.app.root.transition.direction = "left"
            building = self.app.ifc_file.by_type("IfcBuilding")[0]
            rooms = self.app.ifc_file.by_type("IfcSpace")
            room_data = self.app.eingaben['Räume']
            for ifc_room, room in zip(rooms, room_data):
                for wand in room_data[room]['Wände']:
                    add_wall(self.app.ifc_file, building, ifc_room,                                        room_data[room]['Wände'][wand]['Name'], 
                             float(room_data[room]['Wände'][wand]['Länge [m]']),                float(room_data[room]['Wände'][wand]['Höhe [m]']), 
                             float(room_data[room]['Wände'][wand]['Dicke [cm]']),                float(room_data[room]['Wände'][wand]['U-Wert']), 
                             room_data[room]['Wände'][wand]['Angrenzung'],                      float(room_data[room]['Wände'][wand]['angrenzende Temperatur [°C]']))
        elif button.text == 'zurück zu den Räumen':                                       #Wände > zurück zur vorherigen Folie mit den Raumeingaben
            self.app.root.current = 'Raeume_eingeben'
            self.app.root.transition.direction = "right"
        
        #Heizlastberechnung > Folie Fenster
        #Fenster hinzufügen Button > innerhalb der Klasse gelöst
        elif button.text == 'Türen hinzufügen (Fenster sind dann abgeschlossen)':         #Fenster > Eingaben abschließen und die Fenster erzeugen und dann zur Folie für die Türen
            self.app.defined_fenster = list(self.app.fenster_eingegeben.keys())
            if "Fenster" in self.app.defined_fenster:
                self.app.defined_fenster.remove('Fenster')
            if ms.has_screen("Tueren") == False:
                self.app.root.add_widget(Tueren(name="Tueren"))
            self.app.root.current = 'Tueren'
            self.app.root.transition.direction = "left"
            building = self.app.ifc_file.by_type("IfcBuilding")[0]
            rooms = self.app.ifc_file.by_type("IfcSpace")
            walls = {wall.Name: wall for wall in self.app.ifc_file.by_type("IfcWallStandardCase")}
            room_data = self.app.eingaben['Räume']
            for ifc_room, room in zip(rooms, room_data):
                for wall in room_data[room]["Wände"]:
                    ifc_wall = walls[room +'-' +wall]
                    for fenster in room_data[room]['Wände'][wall].get('Fenster',[]):
                        fenster_data = room_data[room]['Wände'][wall]['Fenster'][fenster]
                        add_window(self.app.ifc_file, building, ifc_room, ifc_wall, fenster_data['Beschreibung'], 
                                          float(fenster_data['Breite [m]']), float(fenster_data['Höhe [m]']), 
                                          float(fenster_data['U-Wert']), fenster_data['Angrenzung'], float(fenster_data['angrenzende Temperatur [°C]']))
        elif button.text == 'zurück zu den Wänden':                                     #Fenster > zurück zur vorherigen Folie mit den Wändeeingaben
            self.app.root.current = 'Waende'
            self.app.root.transition.direction = "right"
            
        #Heizlastberechnung > Folie Türen
        #Tueren hinzufügen Button > innerhalb der Klasse gelöst
        elif button.text == 'Böden und Decken hinzufügen (Türen sind dann abgeschlossen)':  #Türen > Eingaben abschließen und die Türen erzeugen und dann zur Folie für Decken und Böden
            self.app.defined_tueren = list(self.app.tueren_eingegeben.keys())
            if "Tür" in self.app.defined_tueren:
                self.app.defined_tueren.remove('Tür')
            if ms.has_screen("Decke_Boden") == False:
                self.app.root.add_widget(Decke_Boden(name="Decke_Boden"))
            self.app.root.current = 'Decke_Boden'
            self.app.root.transition.direction = "left"
            building = self.app.ifc_file.by_type("IfcBuilding")[0]
            rooms = self.app.ifc_file.by_type("IfcSpace")
            walls = {wall.Name: wall for wall in self.app.ifc_file.by_type("IfcWallStandardCase")}
            room_data = self.app.eingaben['Räume']
            for ifc_room, room in zip(rooms, room_data):
                for wall in room_data[room]["Wände"]:
                    ifc_wall = walls[room +'-' +wall]
                    for tuer in room_data[room]['Wände'][wall].get('Tür',[]):
                        tueren_data = room_data[room]['Wände'][wall]['Tür'][tuer]
                        add_door(self.app.ifc_file, building, ifc_room, ifc_wall, tueren_data['Beschreibung'], 
                                          float(tueren_data['Breite [m]']), float(tueren_data['Höhe [m]']), 
                                          float(tueren_data['U-Wert']), tueren_data['Angrenzung'], float(tueren_data['angrenzende Temperatur [°C]']))   
        elif button.text == 'zurück zu den Fenstern':                           #Türen > zurück zur vorherigen Folie mit den Fenstereingaben
            self.app.root.current = 'Fenster'
            self.app.root.transition.direction = "right"
        
        #Heizlastberechnung > Folie Decken und Böden
        #Decke und Boden hinzufügen Button > innerhalb der Klasse gelöst
        elif button.text == 'Berechnung durchführen (Decken und Böden sind dann abgeschlossen)':   #Decken und Böden > Eingaben abschließen und die Decken und Böden erzeugen und dann zur Ergebnisfolie
            self.app.defined_decken = list(self.app.decke_eingegeben.keys())
            if "Decke" in self.app.defined_decken:
                self.app.defined_decken.remove('Decke')
            self.app.defined_boeden = list(self.app.boden_eingegeben.keys())
            if "Boden" in self.app.defined_boeden:
                self.app.defined_boeden.remove('Boden')
            building = self.app.ifc_file.by_type("IfcBuilding")[0]
            rooms = self.app.ifc_file.by_type("IfcSpace")
            room_data = self.app.eingaben['Räume']
            for ifc_room, room in zip(rooms, room_data):
               for decke in room_data[room]['Decke']:
                       add_ceiling(self.app.ifc_file, building, ifc_room, room_data[room]['Decke'][decke]['Beschreibung'], 
                                float(room_data[room]['Decke'][decke]['Fläche [m²]']), float(room_data[room]['Decke'][decke]['Dicke [cm]']), 
                                float(room_data[room]['Decke'][decke]['U-Wert']), room_data[room]['Decke'][decke]['Angrenzung'], float(room_data[room]['Decke'][decke]['angrenzende Temperatur [°C]']))
            for ifc_room, room in zip(rooms, room_data):
               for boden in room_data[room]['Boden']:
                       add_floor(self.app.ifc_file, building, ifc_room, room_data[room]['Boden'][boden]['Beschreibung'], 
                                float(room_data[room]['Boden'][boden]['Fläche [m²]']), float(room_data[room]['Boden'][boden]['Dicke [cm]']), 
                                float(room_data[room]['Boden'][boden]['U-Wert']), room_data[room]['Boden'][boden]['Angrenzung'], float(room_data[room]['Boden'][boden]['angrenzende Temperatur [°C]']))
            self.app.ifc_file.write("Heizlast.ifc")
            self.app.root.add_widget(Ergebnisse_Heizlast(name="Ergebnisse_Heizlast"))
            self.app.root.current = 'Ergebnisse_Heizlast'
            self.app.root.transition.direction = "left"
        elif button.text == 'zurück zu den Türen':                                  #Decke und Böden > zurück zur vorherigen Folie mit den Fenstereingaben
            self.app.root.current = 'Tueren'
            self.app.root.transition.direction = "right"
        
        #Heizlastberechnung > Folie Ergebnisse
        elif button.text == 'Fertige Heizlastberechnung':                           #Ergebnisse Heizlast > Abschließen der Heizlastberechnung > zurück zum Hauptmenü
            self.app.root.current = 'Main'
            self.app.root.transition.direction = "right"
        
        #Datenerfassung > Trinkwarmwasserberechnung
        elif button.text =="Warmwasserlastberechnung für eine neue Anlage":         #Trinkwarmwasser Button zum Beginnen der Eingaben und Berechnung > Übergang zur nächsten Folie
            if ms.has_screen("Trinkwarmwasser_neu") == False:
                self.app.root.add_widget(Trinkwarmwasser_neu(name="Trinkwarmwasser_neu"))
            self.app.root.current = 'Trinkwarmwasser_neu'
            self.app.root.transition.direction = "left"
        
        
        elif button.text =="Warmwasserlastberechnung bei Verwendung eines vorhandenen TWW-Speichers":         #Trinkwarmwasser Button zum Beginnen der Eingaben und Berechnung > Übergang zur nächsten Folie
            if ms.has_screen("Trinkwarmwasser2") == False:
                self.app.root.add_widget(Trinkwarmwasser2(name="Trinkwarmwasser2"))
            self.app.root.current = 'Trinkwarmwasser2'
            self.app.root.transition.direction = "left"
        
        #Trinkwarmwasserlastberechnung > Folie neues System1
        elif button.text =="Wärmeleistungsberechnung":                              #Trinkwarmwasser_neu > Berechnungen durchführen und zur Ergebnisfolie gelangen
            ifc_file = ifcopenshell.open('test.ifc')
            building = ifc_file.by_type("IfcBuilding")[0]
            tww_data = {}
            tww_data['Anzahl der Personen im Haushalt'] = self.personenanzahl.text
            tww_data['Warmwassertemperatur [°C]'] = self.ww_t.text
            trinkwarm_building_neu(ifc_file, building, tww_data['Anzahl der Personen im Haushalt'],
                                                       tww_data['Warmwassertemperatur [°C]'])
            ifc_file.write("Heizlast_TWW.ifc")
            self.app.root.add_widget(Trinkwarmwasser_neu_Ergebnisse(name="Trinkwarmwasser_neu_Ergebnisse"))
            self.app.root.current = 'Trinkwarmwasser_neu_Ergebnisse'
            self.app.root.transition.direction = "left"
        
        #Trinkwarmwasserlastberechnung > Folie Trinkwarmwasser2
        elif button.text == 'weiter zur Wärmeleistungsberechnung':                              #Trinwarmwasser > Eingaben bestätigen und Berechnungen durchführen, um auf die nächste Folie zu gelangen
            ifc_file = ifcopenshell.open('test.ifc')   
            building = ifc_file.by_type("IfcBuilding")[0]
            tww_data = {}
            tww_data['Anzahl der Personen im Haushalt'] = self.personenanzahl.text
            tww_data['TWW_Speicher_Solltemperatur [°C]'] = self.ww_t.text
            trinkwarm_building(ifc_file, building, tww_data['Anzahl der Personen im Haushalt'], tww_data['TWW_Speicher_Solltemperatur [°C]'])
            ifc_file.write("Heizlast_TWW.ifc")
            self.app.root.add_widget(Trinkwarmwasser3(name="Trinkwarmwasser3"))
            self.app.root.current = 'Trinkwarmwasser3'
            self.app.root.transition.direction = "left"
        elif button.text == 'zurück zum Anfang':                                    #Trinkwarmwasser > zurück zum Anfang der Trinkwarmwasserfolien
            self.app.root.current = 'Trinkwarmwasser1'
            self.app.root.transition.direction = "right"

        #Trinkwarmwasserlastberechnung > Folie Trinkwarmwasser3
        elif button.text == "Nötige Wärmeleistung berechnen":                       #Trinkwarmwasser > Berechnungen durchführen und zur Ergebnisfolie gelangen
            ifc_file = ifcopenshell.open('Heizlast_TWW.ifc')
            building = ifc_file.by_type("IfcBuilding")[0]
            tww_data = {}
            for txt, imp, in self.imps:
                tww_data[txt.text] = imp.text    
            trinkwarm_building2(ifc_file, building, tww_data['Reale Speichergröße'])
            ifc_file.write("Heizlast_TWW.ifc")
            self.app.root.add_widget(Trinkwarmwasser_Ergebnisse(name="Trinkwarmwasser_Ergebnisse"))
            self.app.root.current = 'Trinkwarmwasser_Ergebnisse'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zur Speicherberechnung":                        #Trinkwarmwasser > zurück zu ersten Eingabenfolie der Trinkwarmwasserlastberechnung
            self.app.root.current = 'Trinkwarmwasser2'
            self.app.root.transition.direction = "right"
        
        #Trinkwarmwasserlastberechnung > Folie Trinkwarmwasser Ergebnisse
        elif button.text == "Fertige Trinkwarmwasserberechnung":
            self.app.root.current = 'Main'
            self.app.root.transition.direction = "right"
        
        #Datenerfassing > Folie Beginn Anlagenerfassung
        elif button.text == "Komplett neue Heizungsanlage":                        #Anlagenerfassung > Neues Gebäude und neue Anlage > Programm starten
            self.app.root.add_widget(Neue_Heizung(name="Neue_Heizung"))
            self.app.root.current = 'Neue_Heizung'
            self.app.root.transition.direction = "left"
        elif button.text == "Anlagensanierung in einem Bestandsgebäude":             #Anlagenerfassung > Bestehendes Gebäude > Programm starten
            self.app.root.add_widget(Bestehendes_Gebaeude(name="Bestehendes_Gebaeude"))
            self.app.root.current = 'Bestehendes_Gebaeude'
            self.app.root.transition.direction = "left"
        #Neues Gebäude und neue Anlage > Folie neue Heizungsanlage                  #Neue Heizungsanlage > Berechnungen durchführen und Anlagenvorschlag bestimmen > Ergebnisfolie öffnen
        elif button.text == "Vorschlagsmodell bestimmen":
            vorschlag = {}
            vorschlag["Vorhandene Grundstücksfläche"] = float(self.anfangswert_gf.text.split(' ')[0])
            modellsystem   = ["WP mit Pufferspeicher und Frischwasserstation und FBH", "WP mit Kombispeicher und FBH", 
                              "WP ohne Pufferspeicher mit TWW-Speicher mit FBH", "WP mit FBH", "WP mit Pufferspeicher und FBH"]
            wp_technologie = ["Luft-Wasser-Wärmepumpe", "Sole-Wasser-Wärmepumpe; Erdkollektor",
                              "Sole-Wasser-Wärmepumpe; Erdsonde", "Wasser-Wasser-Wärmepumpe; Grundwasser"]
            last = ifcopenshell.open('Heizlast.ifc')
            a_beheizt = 0
            for raum in last.by_type('IfcSpace'):
                for property_set in raum.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "BaseQuantities":
                        a_beheizt = a_beheizt + property_set.RelatingPropertyDefinition.Quantities[1].AreaValue
            antworten = []
            if float(vorschlag["Vorhandene Grundstücksfläche"])*2 >= a_beheizt:
                antworten.append(1)
            else: antworten.append(0)
            if self.angrenzungs_anzeige_erd.text == 'ja':
                antworten.append(1)
            else: antworten.append(0)
            if self.angrenzungs_anzeige_gr.text == 'ja':
                antworten.append(1)
            else: antworten.append(0)
            if self.angrenzungs_anzeige_ww.text == 'ja':
                antworten.append(1)
            else: antworten.append(0)
            if antworten[1] == 1:
                anlage = wp_technologie[2]
            elif antworten[2] == 1:
                anlage = wp_technologie[3]
            elif antworten[0] == 1:
                anlage = wp_technologie[1]
            else:
                anlage = wp_technologie[0]
            if antworten[3] == 1:
                system = modellsystem[0]
            else: system = modellsystem[4]
            self.app.vorschlagsmodell = [system, anlage]
            self.app.root.add_widget(Vorschlagsmodell1(name="Vorschlagsmodell1"))
            self.app.root.current = 'Vorschlagsmodell1'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zum Beginn der Anlagenerfassung":               #Neue Anlage für Neubau und Bestand > zurück zur Übersicht der Anlagenerfassung
            self.app.root.current = 'Anlagenerfassung_Heizung'
            self.app.root.transition.direction = "right"
        
        #Vorschlagsmodell Neubau
        elif button.text == "Fertige Anlagenerfassung":                             #Neue Anlage für Neubau und Bestand > Modell auswählen und zurück zum Hauptmenü
            self.app.root.add_widget(Ausgewaehltes_System(name="Ausgewaehltes_System"))
            self.app.root.current = 'Ausgewaehltes_System'
            self.app.root.transition.direction = "left"
            shutil.copyfile("IFC_templates/"+self.app.anlage, "System.ifc")
            ifc_techno = ifcopenshell.open("System.ifc")
            techno = ifc_techno.by_type("IfcBuilding")[0]
            techno.Description = self.app.technologie + ' '+self.app.anlage +';0'
            for property_set in techno.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                    self.app.anzahlh = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
                elif property_set.RelatingPropertyDefinition.Name == "Pset_System":
                    self.app.anzahlh = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
            ifc_techno.write("System.ifc")
        elif button.text == "zurück zu den Eingaben der Anlagenerfassung":          #Neue Anlage > zurück zu den Eingaben für die Bestimmung des Vorschlagsmodells
            self.app.root.current = 'Neue_Heizung'
            self.app.root.transition.direction = "right"    
        
        #Bestehendes Gebäude und neue Anlagensanierung > Folie Anlageerfassen       #Bestehendes Gebäude Heizungsanlage > Berechnungen durchführen und Anlagenvorschlag bestimmen > Ergebnisfolie öffnen
        elif button.text == "Neues Vorschlagsmodell bestimmen":
            self.app.art=1
            self.app.vorschlagsmodell = []
            vorschlag = {}
            vorschlag["System- oder Wärmeerzeugertausch?"] = self.anzeige_sys.text
            vorschlag["Ist ein Pufferspeicher vorhanden?"] = self.anzeige_pf.text
            vorschlag["Ist ein TWW-Speicher vorhanden?"] = self.anzeige_tww.text
            vorschlag["Ist ein Kombispeicher vorhanden?"] = self.anzeige_kombi.text
            vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] = self.anzeige_hk.text
            vorschlag["Ist eine Frischwasserstation vorhanden?"] = self.anzeige_fws.text
            vorschlag["Soll das neue System auch Warmwasser erzeugen?"] = self.anzeige_ww.text
            system_m_puffer = ["WP mit Pufferspeicher und TWW-Speicher und FBH",
                               "WP mit Pufferspeicher und TWW-Speicher und Radiatoren",
                               "WP mit Pufferspeicher und Frischwasserstation und FBH", 
                               "WP mit Pufferspeicher und Frischwasserstation und Radiatoren",
                               "WP mit Pufferspeicher und FBH und neue Frischwasserstation", 
                               "WP mit Pufferspeicher und Radiatoren und neue Frischwasserstation",
                               "WP mit Pufferspeicher und FBH", 
                               "WP mit Pufferspeicher und Radiatoren"]
            system_o_puffer = ["WP ohne Pufferspeicher mit TWW-Speicher mit FBH",
                                "WP ohne Pufferspeicher mit TWW-Speicher mit Radiatoren",
                                "WP mit Kombispeicher und FBH", 
                                "WP mit Kombispeicher und Radiatoren",
                                "WP mit FBH"]
            wp_technologie = ["Luft-Wasser-Wärmepumpe", "Sole-Wasser-Wärmepumpe; Erdkollektor",
                              "Sole-Wasser-Wärmepumpe; Erdsonde", "Wasser-Wasser-Wärmepumpe; Grundwasser"]
            antworten = []
            if vorschlag["System- oder Wärmeerzeugertausch?"] == 'Systemtausch':
                antworten.append(1)
                self.app.root.add_widget(Neue_Heizung(name="Neue_Heizung1"))
                self.app.root.current = 'Neue_Heizung1'
                self.app.root.transition.direction = "left"
            else:
                if vorschlag["Ist ein Pufferspeicher vorhanden?"] == 'ja':
                    if vorschlag["Ist ein TWW-Speicher vorhanden?"] =='ja':
                        if vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] == 'Heizkörper':
                            systemwahl = system_m_puffer[1]
                        elif vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] == 'Heizflächen (FBH)':
                            systemwahl = system_m_puffer[0]
                    elif vorschlag["Ist ein TWW-Speicher vorhanden?"] !='ja' and vorschlag["Ist ein Kombispeicher vorhanden?"] != 'ja':
                        if vorschlag["Ist eine Frischwasserstation vorhanden?"] =='ja':
                            if vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] =='Heizkörper':
                                systemwahl = system_m_puffer[3]
                            elif vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] == 'Heizflächen (FBH)':
                                systemwahl = system_m_puffer[2]
                        else:
                            if vorschlag["Soll das neue System auch Warmwasser erzeugen?"] =='ja':
                                if vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] =='Heizkörper':
                                    systemwahl = system_m_puffer[5]
                                elif vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] =='Heizflächen (FBH)':
                                    systemwahl = system_m_puffer[4]
                            else:
                                if vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] == 'Heizkörper':
                                    systemwahl = system_m_puffer[7]
                                elif vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] == 'Heizflächen (FBH)':
                                    systemwahl = system_m_puffer[6]
                else:
                    if vorschlag["Ist ein TWW-Speicher vorhanden?"] =='ja':
                        if vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] == 'Heizkörper':
                            systemwahl = system_o_puffer[1]
                        elif vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] == 'Heizflächen (FBH)':
                            systemwahl = system_o_puffer[0]
                    elif vorschlag["Ist ein Kombispeicher vorhanden?"] == 'ja':
                        if vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] == 'Heizkörper':
                            systemwahl = system_o_puffer[3]
                        elif vorschlag["Sind Heizkörper oder Heizflächen(FBH) vorhanden?"] == 'Heizflächen (FBH)':
                            systemwahl = system_o_puffer[2]
                    else: systemwahl = system_o_puffer[4]
                self.app.vorschlagsmodell.append(systemwahl)
                self.app.root.add_widget(Vorschlagsmodell_alt(name="Vorschlagsmodell_alt"))
                self.app.root.current = 'Vorschlagsmodell_alt'
                self.app.root.transition.direction = "left"
        elif button.text == "Neuen Wärmeerzeuger bestimmen":
            vorschlag = {}
            vorschlag["Zugang zu Grundwasserquellen vorhanden?"] = self.angrenzungs_anzeige_gr.text
            vorschlag["Einsatz von Erdwärmesonden möglich?"] = self.angrenzungs_anzeige_erd.text 
            wp_technologie = ["Luft-Wasser-Wärmepumpe", "Sole-Wasser-Wärmepumpe; Erdkollektor",
                              "Sole-Wasser-Wärmepumpe; Erdsonde", "Wasser-Wasser-Wärmepumpe; Grundwasser"]
            vorschlag["Vorhandene Grundstücksfläche"] = float(self.anfangswert_gf.text.split(' ')[0]) 
            last = ifcopenshell.open('Heizlast.ifc')
            a_beheizt = 0
            for raum in last.by_type('IfcSpace'):
                for property_set in raum.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "BaseQuantities":
                        a_beheizt = a_beheizt + property_set.RelatingPropertyDefinition.Quantities[1].AreaValue
            antworten = []
            if float(vorschlag["Vorhandene Grundstücksfläche"])*2 >= a_beheizt:
                antworten.append(1)
            else: antworten.append(0)
            if vorschlag["Einsatz von Erdwärmesonden möglich?"] == 'ja':
                antworten.append(1)
            else: antworten.append(0)
            if vorschlag["Zugang zu Grundwasserquellen vorhanden?"] == 'ja':
                antworten.append(1)
            else: antworten.append(0)
            if antworten[1] == 1:
                anlage = wp_technologie[2]
            elif antworten[2] == 1:
                anlage = wp_technologie[3]
            elif antworten[0] == 1:
                anlage = wp_technologie[1]
            else:
                anlage = wp_technologie[0]
            self.app.vorschlagsmodell.append(anlage)
            self.app.root.add_widget(Vorschlagsmodell_alt2(name="Vorschlagsmodell_alt2"))
            self.app.root.current = 'Vorschlagsmodell_alt2'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zur Erfassung der Bestandsanlage":          #Bestehendes Gebäude > zurück zu den Eingaben für die Bestimmung des Vorschlagsmodells
            self.app.root.current = 'Bestehendes_Gebaeude'
            self.app.root.transition.direction = "right" 
        elif button.text == "Anlagenerfassung abschließen":                             #Bestand > Modell auswählen und zurück zum Hauptmenü
            self.app.root.add_widget(Ausgewaehltes_System(name="Ausgewaehltes_System"))
            self.app.root.current = 'Ausgewaehltes_System'
            self.app.root.transition.direction = "left" 
            shutil.copyfile("IFC_templates/"+self.app.anlage, "System.ifc")
            ifc_techno = ifcopenshell.open("System.ifc")
            techno = ifc_techno.by_type("IfcBuilding")[0]
            techno.Description = self.app.technologie +' '+self.app.anlage +';1'
            for property_set in techno.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                    self.app.anzahlh = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
                elif property_set.RelatingPropertyDefinition.Name == "Pset_System":
                    self.app.anzahlh = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
            ifc_techno.write("System.ifc")
        
        #Datenerfassung und Berechnungen > Automatische Anlagenparametrisierung
        #zurück zum Menü exisitiert schon
        #Bei Ausarbeitung hier einfügen
        #Anlagenparametrisierung
        elif button.text == "Anlagenparametrisierung starten (Heizlast-, Trinkwarmwasserlastberechnung sowie Anlagenerfassung muss durchgeführt sein)":         #Anlagenparametrisierung Button zum Beginnen der Eingaben
            if ms.has_screen("Anlagenparametrisierung1") == False:
                self.app.root.add_widget(Anlagenparametrisierung1(name="Anlagenparametrisierung1"))
            self.app.root.current = 'Anlagenparametrisierung1'
            self.app.root.transition.direction = "left"
            
        elif button.text == "Anlagenparametrisierung starten - ohne genaues Rohrnetz (Heizlast-, Trinkwarmwasserlastberechnung sowie Anlagenerfassung muss durchgeführt sein)":
            if ms.has_screen("Anlagenparametrisierung1_ohneR") == False:
                self.app.root.add_widget(Anlagenparametrisierung1_ohneR(name="Anlagenparametrisierung1_ohneR"))
            self.app.root.current = 'Anlagenparametrisierung1_ohneR'
            self.app.root.transition.direction = "left"
        elif button.text == "Empfehlungen und Eingaben bestätigen":             #Anlagenparametrisierung Button um zur nächsten Folie der Eingaben zu kommen
            ifc_system = ifcopenshell.open('System.ifc')
            techno = ifc_system.by_type("IfcBuilding")[0]   
            heizungen = ifc_system.by_type('IfcSpaceHeater')
            waermequellenart = techno.Description.split('WP')[0]    
            eingaben = {}  
            eingaben["Heizleistung Wärmeerzeuger"] = self.leistungsanzeige.text
            eingaben["Vorlauftemperatur"] = self.vorlauf_t_anzeige.text
            eingaben["Ruecklauftemperatur"] = self.ruecklauf_t_anzeige.text 
            eingaben["Größe Pufferspeicher"] = self.puffer_t_anzeige.text
            eingaben["Warmwassertemperatur"] = self.warmwasser_t_anzeige.text
            if 'TWW' in techno.Description:
                eingaben['Größe TWW'] = self.tww_t_anzeige.text
                v_tww = float(eingaben["Größe TWW"].split(' ')[0])
            leistung_wp = float(eingaben["Heizleistung Wärmeerzeuger"].split(' ')[0])
            v_puffer = float(eingaben["Größe Pufferspeicher"].split(' ')[0])
            vorlauf_tww = float(eingaben["Warmwassertemperatur"].split(' ')[0])
            vorlauf_t = float(eingaben["Vorlauftemperatur"].split(' ')[0])
            ruecklauf_t = float(eingaben["Ruecklauftemperatur"].split(' ')[0])
            for property_set in techno.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = waermequellenart
                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = len(heizungen)
                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = leistung_wp
                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = vorlauf_t
                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = ruecklauf_t
                    property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue = v_puffer
                elif property_set.RelatingPropertyDefinition.Name == "Pset_System":
                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = waermequellenart
                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = len(heizungen)
                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = leistung_wp
                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = vorlauf_t
                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = ruecklauf_t
            hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
            for hvac in hvac_components:
                if 'Wärmepumpe' in hvac.Name:
                    wp = hvac
                    for property_set in wp.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Pset_UnitaryEquipmentTypeCommon":
                            property_set.RelatingPropertyDefinition.HasProperties[7].NominalValue.wrappedValue = waermequellenart
                            property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = leistung_wp 
                            property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue = vorlauf_t
                            property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue = ruecklauf_t
                elif hvac.Name == 'Pufferspeicher':
                    puffer = hvac
                    leistung_hstab = 2 #kW
                    for property_set in puffer.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Pset_DistributionFlowElementCommon":
                            property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = vorlauf_tww+5
                            property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = vorlauf_t
                            property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = ruecklauf_t
                            property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = leistung_hstab
                        elif property_set.RelatingPropertyDefinition.Name =="Pset_TankTypeCommon":
                            property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = v_puffer
                elif hvac.Name == 'Frischwasserstation':
                    fws = hvac
                    max_v = 40 #l/min
                    kaltwasser_t = 10
                    for property_set in fws.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Pset_UnitaryEquipmentTypeCommon":
                            property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = max_v
                            property_set.RelatingPropertyDefinition.HasProperties[8].NominalValue.wrappedValue = vorlauf_tww
                            property_set.RelatingPropertyDefinition.HasProperties[9].NominalValue.wrappedValue = kaltwasser_t
                            property_set.RelatingPropertyDefinition.HasProperties[10].NominalValue.wrappedValue = vorlauf_tww + 5
                            property_set.RelatingPropertyDefinition.HasProperties[11].NominalValue.wrappedValue = vorlauf_tww -10
                elif hvac.Name == 'Trinkwarmwasserspeicher':
                    tww = hvac
                    leistung_hstab = 2 #kW
                    for property_set in tww.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Pset_DistributionFlowElementCommon":
                            property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = vorlauf_tww+5
                            property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = vorlauf_t
                            property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = ruecklauf_t
                            property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = vorlauf_tww
                        elif property_set.RelatingPropertyDefinition.Name == "Pset_TankTypeCommon":
                            property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = leistung_hstab
                            property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = v_tww
                elif hvac.Name == 'Verteiler-Heizkreis':
                    verteiler = hvac
                    for property_set in verteiler.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Pset_PipeFittingTypeCommon":
                            property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = len(heizungen)
            heizlast_ifc  = ifcopenshell.open('Heizlast.ifc')
            raeume        = heizlast_ifc.by_type('IfcSpace')
            heizkoerper   = ifc_system.by_type("IfcSpaceHeater")
            raum_info = {}
            i = 0
            for raum in raeume:
                for property_set in raum.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "BaseQuantities":
                        flaeche = property_set.RelatingPropertyDefinition.Quantities[1].AreaValue
                        raum_info[raum.Name] = flaeche
            for raum in raum_info:
                if raum_info[raum] > 32 and flaeche <= 32:
                    heizkoerper[i].Name = heizkoerper[i].Name + ' ' + raum
                    i = i+1
                    heizkoerper[i].Name = heizkoerper[i].Name + ' ' + raum
                    i= i+1
                elif raum_info[raum] > 32:
                    heizkoerper[i].Name = heizkoerper[i].Name + ' ' + raum
                    i = i+1
                    heizkoerper[i].Name = heizkoerper[i].Name + ' ' + raum
                    i= i+1
                    heizkoerper[i].Name = heizkoerper[i].Name + ' ' + raum
                    i = i+1
                else:
                    heizkoerper[i].Name = heizkoerper[i].Name + ' ' + raum
                    i = i+1
            ifc_system.write('System.ifc')
            ifc_techno = ifcopenshell.open("System.ifc")
            techno = ifc_techno.by_type("IfcBuilding")[0]
            if 'FBH' in techno.Description:
                if ms.has_screen("Anlagenparametrisierung2") == False:
                    self.app.root.add_widget(Anlagenparametrisierung2(name="Anlagenparametrisierung2"))
                self.app.root.current = 'Anlagenparametrisierung2'
                self.app.root.transition.direction = "left"
            else:
                if ms.has_screen("Anlagenparametrisierung_HK") == False:
                    self.app.root.add_widget(Anlagenparametrisierung_HK(name="Anlagenparametrisierung_HK"))
                self.app.root.current = 'Anlagenparametrisierung_HK'
                self.app.root.transition.direction = "left"
        elif button.text == "zurück zum Start":                     #Anlagenparametrisierung > Button um zur Anfangsfolie zurück zu gelangen
            self.app.root.current = 'Anlagenparametrisierung'
            self.app.root.transition.direction = "right"
        elif button.text == "Heizflächen festlegen":             #Anlagenparametrisierung Button um zur nächsten Folie der Eingaben zu kommen
            eingaben = {}     
            for heizkoerper in self.heizungen:
                eingaben[heizkoerper] = self.leistungen[str(self.heizungen[heizkoerper])].text.split(' ')[0]
            ifc_system = ifcopenshell.open('System.ifc')
            techno = ifc_system.by_type("IfcBuilding")[0]
            hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
            for property_set in techno.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                    vorlauftemperatur   = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                    ruecklauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
            for hvac in hvac_components:
                for eingabe in eingaben:
                    if eingabe == hvac.Name.split(' ')[0]:
                        raumname = self.raumnamen[eingabe]
                        hvac.Name = hvac.Name.split(' ')[0] + ' ' + hvac.Name.split(' ')[1]
                        if "Fussbodenheizung" in hvac.Name: ####jede Fußbodenheizung einzeln
                            fb = hvac
                            for property_set in fb.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = float(eingaben[eingabe])
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = float(eingaben[eingabe])
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = float(vorlauftemperatur)
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = float(ruecklauftemperatur)
                                    property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue = raumname
                        elif "Heizkoerper" in hvac.Name: ###jeden Heizkörper einzel
                            hk = hvac
                            for property_set in hk.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = float(eingaben[eingabe])
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = float(eingaben[eingabe])
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = float(vorlauftemperatur)
                                    property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue = float(ruecklauftemperatur)
                                    property_set.RelatingPropertyDefinition.HasProperties[8].NominalValue.wrappedValue = raumname
            ifc_system.write('System.ifc')
            self.app.root.add_widget(Anlagenparametrisierung3(name="Anlagenparametrisierung3"))
            self.app.root.current = 'Anlagenparametrisierung3'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zur vorherigen Eingabe":                     #Anlagenparametrisierung > Button um zur Anfangsfolie zurück zu gelangen
            self.app.root.current = 'Anlagenparametrisierung1'
            self.app.root.transition.direction = "right"
        
        elif button.text == "Längen und Querschnitte festlegen":
            ifc_system = ifcopenshell.open('System.ifc')
            building = ifc_system.by_type('IfcBuilding')[0]
            self.app.heizkreis_hk = self.anzeige_auswahl.text
            building.Description = building.Description + '_' + self.anzeige_auswahl.text
            if int(self.app.heizkreis_hk) == 1:
                self.app.root.add_widget(Anlagenparametrisierung2_HK(name="Anlagenparametrisierung2_HK"))
                self.app.root.current = 'Anlagenparametrisierung2_HK'
                self.app.root.transition.direction = "left"
            else: 
                self.app.root.add_widget(Rohrnetzstruktur_HK(name="Rohrnetzstruktur_HK"))
                self.app.root.current = 'Rohrnetzstruktur_HK'
                self.app.root.transition.direction = "left"
            ifc_system.write('System.ifc')
        elif button.text == "zurück zur Struktur des Heizkreises":
            self.app.root.current = 'Anlagenparametrisierung_HK'
            self.app.root.transition.direction = "right"
        elif button.text == "Längen des Heizkreises festlegen und Heizkörper parametrisieren":
            ifc_system = ifcopenshell.open('System.ifc')
            rohre = ifc_system.by_type('IfcPipeSegment')
            if int(self.app.heizkreis_hk) == 2:
                self.app.rohrk1_l = float(self.rohrlaenge_anzeige.text.split(' ')[0])
                self.app.rohrk1_d = float(self.anzeige_auswahl.text.split(' ')[0])
                d_knoten = float(self.anzeige_auswahl.text.split(' ')[0])
                l_knoten = float(self.rohrlaenge_anzeige.text.split(' ')[0])
                rohre_zu_k = []
                for rohr in rohre:
                    if 'Knoten1' in rohr.Name:
                        rohre_zu_k.append(rohr)
                for rohr in rohre_zu_k:
                    for property_set in rohr.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = l_knoten*1000
                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = d_knoten        
                ifc_system.write("System.ifc")
            elif int(self.app.heizkreis_hk) == 3:
                self.app.rohrk1_l = float(self.rohrlaenge_anzeige.text.split(' ')[0])
                self.app.rohrk1_d = float(self.anzeige_auswahl.text.split(' ')[0])
                self.app.rohrk2_l = float(self.rohrlaenge_anzeige2.text.split(' ')[0])
                self.app.rohrk2_d = float(self.anzeige_auswahl2.text.split(' ')[0])
                d_knoten1 = float(self.anzeige_auswahl.text.split(' ')[0])
                l_knoten1 = float(self.rohrlaenge_anzeige.text.split(' ')[0])
                d_knoten12 = float(self.anzeige_auswahl2.text.split(' ')[0])
                l_knoten12 = float(self.rohrlaenge_anzeige2.text.split(' ')[0])
                rohre_zu_k1 = []
                for rohr in rohre:
                    if 'Knoten1' in rohr.Name:
                        rohre_zu_k1.append(rohr)
                for rohr in rohre_zu_k1:
                    for property_set in rohr.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = l_knoten1*1000
                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = d_knoten1
                rohre_zu_k2 = []
                for rohr in rohre:
                    if 'Knoten2' in rohr.Name:
                        rohre_zu_k2.append(rohr)
                for rohr in rohre_zu_k2:
                    for property_set in rohr.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = l_knoten12*1000
                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = d_knoten12           
                ifc_system.write("System.ifc")
            elif int(self.app.heizkreis_hk) == 4:
                self.app.rohrk1_l = float(self.rohrlaenge_anzeige.text.split(' ')[0])
                self.app.rohrk1_d = float(self.anzeige_auswahl.text.split(' ')[0])
                self.app.rohrk2_l = float(self.rohrlaenge_anzeige2.text.split(' ')[0])
                self.app.rohrk2_d = float(self.anzeige_auswahl2.text.split(' ')[0])
                self.app.rohrk3_l = float(self.rohrlaenge_anzeige3.text.split(' ')[0])
                self.app.rohrk3_d = float(self.anzeige_auswahl3.text.split(' ')[0])                
                d_knoten1 = float(self.anzeige_auswahl.text.split(' ')[0])
                l_knoten1 = float(self.rohrlaenge_anzeige.text.split(' ')[0])
                d_knoten12 = float(self.anzeige_auswahl2.text.split(' ')[0])
                l_knoten12 = float(self.rohrlaenge_anzeige2.text.split(' ')[0])
                d_knoten34 = float(self.anzeige_auswahl3.text.split(' ')[0])
                l_knoten34 = float(self.rohrlaenge_anzeige3.text.split(' ')[0])
                rohre_zu_k1 = []
                for rohr in rohre:
                    if 'Knoten1' in rohr.Name:
                        rohre_zu_k1.append(rohr)
                for rohr in rohre_zu_k1:
                    for property_set in rohr.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = l_knoten1*1000
                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = d_knoten1
                rohre_zu_k2 = []
                for rohr in rohre:
                    if 'Knoten2' in rohr.Name:
                        rohre_zu_k2.append(rohr)
                for rohr in rohre_zu_k2:
                    for property_set in rohr.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = l_knoten12*1000
                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = d_knoten12
                rohre_zu_k3 = []
                for rohr in rohre:
                    if 'Knoten3' in rohr.Name:
                        rohre_zu_k3.append(rohr)
                for rohr in rohre_zu_k3:
                    for property_set in rohr.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = l_knoten34*1000
                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = d_knoten34
                ifc_system.write("System.ifc")
            self.app.root.add_widget(Anlagenparametrisierung2_HK(name="Anlagenparametrisierung2_HK"))
            self.app.root.current = 'Anlagenparametrisierung2_HK'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zur Rohrnetzbestimmung":
            if int(self.app.heizkreis_hk) == 1:
                self.app.root.current = 'Anlagenparametrisierung_HK'
                self.app.root.transition.direction = "right"
            else:
                self.app.root.current = 'Rohrnetzstruktur_HK'
                self.app.root.transition.direction = "right" 
        elif button.text == "Heizkörper festlegen":

            #self.leistungen[str(instance)].text = str(leistung) + ' Watt'
            eingaben = {}     
            for heizkoerper in self.heizungen:
                eingaben[heizkoerper] = self.leistungen[str(self.heizungen[heizkoerper])].text.split(' ')[0]
            ifc_system = ifcopenshell.open('System.ifc')
            techno = ifc_system.by_type("IfcBuilding")[0]
            hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
            for property_set in techno.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                    vorlauftemperatur   = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                    ruecklauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
            for hvac in hvac_components:
                for eingabe in eingaben:
                    if eingabe == hvac.Name.split(' ')[0]:
                        raumname = self.raumnamen[eingabe]
                        hvac.Name = hvac.Name.split(' ')[0] + ' ' + hvac.Name.split(' ')[1]
                        if "Fussbodenheizung" in hvac.Name: ####jede Fußbodenheizung einzeln
                            fb = hvac
                            for property_set in fb.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = float(eingaben[eingabe])
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = float(eingaben[eingabe])
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = float(vorlauftemperatur)
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = float(ruecklauftemperatur)
                                    property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue = raumname
                        elif "Heizkoerper" in hvac.Name: ###jeden Heizkörper einzel
                            hk = hvac
                            for property_set in hk.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = float(eingaben[eingabe])
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = float(eingaben[eingabe])
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = float(vorlauftemperatur)
                                    property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue = float(ruecklauftemperatur)
                                    property_set.RelatingPropertyDefinition.HasProperties[8].NominalValue.wrappedValue = raumname
            ifc_system.write('System.ifc')
            self.app.root.add_widget(Anlagenparametrisierung3_HK(name="Anlagenparametrisierung3_HK"))
            self.app.root.current = 'Anlagenparametrisierung3_HK'
            self.app.root.transition.direction = "left" 
        elif button.text =="zurück zur Auslegung der Heizfkörper":
            self.app.root.current = 'Anlagenparametrisierung2_HK'
            self.app.root.transition.direction = "right"            
        elif button.text == "Rohrlängen und -dimensionen bestimmen und Parametrisierung fertigstellen":
            ifc_system = ifcopenshell.open('System.ifc')
            rohrdaten = {}
            for element in ifc_system.by_type('IfcSpaceHeater'):
                heizungsname = element.Name
                laenge1 = float(self.laengen1[str(self.laengen1_s[heizungsname])].text.split(' ')[0])
                laenge2 = float(self.laengen2[str(self.laengen2_s[heizungsname])].text.split(' ')[0])
                durchmesser = float(self.durchmesser[str(self.durchmesser_b[heizungsname])].text.split(' ')[0])
                if int(self.app.heizkreis_hk) == 1:
                    strang = int(self.strang.text)
                else:
                    strang = int(self.straenge[str(self.straenge_b[heizungsname])].text)
                rohrdaten[heizungsname] = [laenge1, laenge2, durchmesser, strang]
            #Rohre direkt zu Heizflaechen festlegen
            for heizflaeche in rohrdaten:
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if str(heizflaeche).split(' ')[0] == element.Name.split(' ')[0]:
                        element.Description = 'Heizflaeche' + '_' + str(rohrdaten[heizflaeche][3])
                        rohr_v = element.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_r = element.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        for property_set in rohr_v.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(rohrdaten[str(heizflaeche)][1])*1000
                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2]) 
                        for property_set in rohr_r.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(rohrdaten[str(heizflaeche)][1])*1000
                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2])   
            ifc_system.write('System.ifc')
            ifc_system = ifcopenshell.open('System.ifc')
            gebauede = ifc_system.by_type('IfcBuilding')[0]
            hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
            #t-stuecke und straenge 1 bis 4 > rohre
            for hvac in hvac_components:
                if 'T-Stueck Vorlauf HK1' == hvac.Name:
                     t_vl1 = hvac
                elif 'T-Stueck Ruecklauf HK1' == hvac.Name:
                    t_rl1 = hvac
                elif 'T-Stueck Vorlauf HK2' == hvac.Name:
                    t_vl2 = hvac
                elif 'T-Stueck Ruecklauf HK2' == hvac.Name:
                    t_rl2 = hvac
                elif 'T-Stueck Vorlauf HK3' == hvac.Name:
                    t_vl3 = hvac
                elif 'T-Stueck Ruecklauf HK3' == hvac.Name:
                    t_rl3 = hvac
                elif 'T-Stueck Vorlauf HK4' == hvac.Name:
                    t_vl4 = hvac
                elif 'T-Stueck Ruecklauf HK4' == hvac.Name:
                    t_rl4 = hvac
                elif 'T-Stueck Vorlauf HK5' == hvac.Name:
                    t_vl5 = hvac
                elif 'T-Stueck Ruecklauf HK5' == hvac.Name:
                    t_rl5 = hvac
                elif 'T-Stueck Vorlauf HK6' == hvac.Name:
                    t_vl6 = hvac
                elif 'T-Stueck Ruecklauf HK6' == hvac.Name:
                    t_rl6 = hvac
                elif 'T-Stueck Vorlauf HK7' == hvac.Name:
                    t_vl7 = hvac
                elif 'T-Stueck Ruecklauf HK7' == hvac.Name:
                    t_rl7 = hvac
                elif 'T-Stueck Vorlauf HK8' == hvac.Name:
                    t_vl8 = hvac
                elif 'T-Stueck Ruecklauf HK8' == hvac.Name:
                    t_rl8 = hvac
                elif 'T-Stueck Vorlauf HK9' == hvac.Name:
                    t_vl9 = hvac
                elif 'T-Stueck Ruecklauf HK9' == hvac.Name:
                    t_rl9 = hvac
                elif 'T-Stueck Vorlauf HK10' == hvac.Name:
                    t_vl10 = hvac
                elif 'T-Stueck Ruecklauf HK10' == hvac.Name:
                    t_rl10 = hvac
                elif 'T-Stueck Vorlauf HK11' == hvac.Name:
                    t_vl11 = hvac
                elif 'T-Stueck Ruecklauf HK11' == hvac.Name:
                    t_rl11 = hvac
                elif 'T-Stueck Vorlauf HK12' == hvac.Name:
                    t_vl12 = hvac
                elif 'T-Stueck Ruecklauf HK12' == hvac.Name:
                    t_rl12 = hvac
                elif 'T-Stueck Vorlauf HK13' == hvac.Name:
                    t_vl13 = hvac
                elif 'T-Stueck Ruecklauf HK13' == hvac.Name:
                    t_rl13 = hvac
                elif 'T-Stueck Vorlauf HK14' == hvac.Name:
                    t_vl14 = hvac
                elif 'T-Stueck Ruecklauf HK14' == hvac.Name:
                    t_rl14 = hvac
                elif 'T-Stueck Vorlauf HK15' == hvac.Name:
                    t_vl15 = hvac
                elif 'T-Stueck Ruecklauf HK15' == hvac.Name:
                    t_rl15 = hvac
                elif 'T-Stueck Vorlauf HK16' == hvac.Name:
                    t_vl16 = hvac
                elif 'T-Stueck Ruecklauf HK16' == hvac.Name:
                    t_rl16 = hvac
                elif 'T-Stueck Vorlauf HK17' == hvac.Name:
                    t_vl17 = hvac
                elif 'T-Stueck Ruecklauf HK17' == hvac.Name:
                    t_rl17 = hvac
                elif 'T-Stueck Vorlauf HK18' == hvac.Name:
                    t_vl18 = hvac
                elif 'T-Stueck Ruecklauf HK18' == hvac.Name:
                    t_rl18 = hvac
                elif 'T-Stueck Vorlauf HK19' == hvac.Name:
                    t_vl19 = hvac
                elif 'T-Stueck Ruecklauf HK19' == hvac.Name:
                    t_rl19 = hvac                   
                elif 'T-Stueck Vorlauf HK20' == hvac.Name:
                    t_vl20 = hvac
                elif 'T-Stueck Ruecklauf HK20' == hvac.Name:
                    t_rl20 = hvac 
                elif 'T-Stueck Vorlauf Knoten1' == hvac.Name:
                    t_vl_k1 = hvac
                elif 'T-Stueck Ruecklauf Knoten1' == hvac.Name:
                    t_rl_k1 = hvac
                elif 'T-Stueck Vorlauf Knoten2' == hvac.Name:
                    t_vl_k2 = hvac
                elif 'T-Stueck Ruecklauf Knoten2' == hvac.Name:
                    t_rl_k2 = hvac                    
                elif 'T-Stueck Vorlauf Knoten3' == hvac.Name:
                    t_vl_k3 = hvac
                elif 'T-Stueck Ruecklauf Knoten3' == hvac.Name:
                    t_rl_k3 = hvac                    
                elif 'Rohr - Vorlauf Strang1 - 1' == hvac.Name:
                    rohr_strang1_vl1 = hvac
                elif 'Rohr - Ruecklauf Strang1 - 1' == hvac.Name:
                    rohr_strang1_rl1 = hvac
                elif 'Rohr - Vorlauf Strang1 - 2' == hvac.Name:
                    rohr_strang1_vl2 = hvac
                elif 'Rohr - Ruecklauf Strang1 - 2' == hvac.Name:
                    rohr_strang1_rl2 = hvac
                elif 'Rohr - Vorlauf Strang1 - 3' == hvac.Name:
                    rohr_strang1_vl3 = hvac
                elif 'Rohr - Ruecklauf Strang1 - 3' == hvac.Name:
                    rohr_strang1_rl3 = hvac             
                elif 'Rohr - Vorlauf Strang1 - 4' == hvac.Name:
                    rohr_strang1_vl4 = hvac
                elif 'Rohr - Ruecklauf Strang1 - 4' == hvac.Name:
                    rohr_strang1_rl4 = hvac
                elif 'Rohr - Vorlauf Strang2 - 1' == hvac.Name:
                    rohr_strang2_vl1 = hvac
                elif 'Rohr - Ruecklauf Strang2 - 1' == hvac.Name:
                    rohr_strang2_rl1 = hvac
                elif 'Rohr - Vorlauf Strang2 - 2' == hvac.Name:
                    rohr_strang2_vl2 = hvac
                elif 'Rohr - Ruecklauf Strang2 - 2' == hvac.Name:
                    rohr_strang2_rl2 = hvac             
                elif 'Rohr - Vorlauf Strang2 - 3' == hvac.Name:
                    rohr_strang2_vl3 = hvac
                elif 'Rohr - Ruecklauf Strang2 - 3' == hvac.Name:
                    rohr_strang2_rl3 = hvac
                elif 'Rohr - Vorlauf Strang2 - 4' == hvac.Name:
                    rohr_strang2_vl4 = hvac
                elif 'Rohr - Ruecklauf Strang2 - 4' == hvac.Name:
                    rohr_strang2_rl4 = hvac
                elif 'Rohr - Vorlauf Strang3 - 1' == hvac.Name:
                    rohr_strang3_vl1 = hvac
                elif 'Rohr - Ruecklauf Strang3 - 1' == hvac.Name:
                    rohr_strang3_rl1 = hvac
                elif 'Rohr - Vorlauf Strang3 - 2' == hvac.Name:
                    rohr_strang3_vl2 = hvac
                elif 'Rohr - Ruecklauf Strang3 - 2' == hvac.Name:
                    rohr_strang3_rl2 = hvac             
                elif 'Rohr - Vorlauf Strang3 - 3' == hvac.Name:
                    rohr_strang3_vl3 = hvac
                elif 'Rohr - Ruecklauf Strang3 - 3' == hvac.Name:
                    rohr_strang3_rl3 = hvac
                elif 'Rohr - Vorlauf Strang3 - 4' == hvac.Name:
                    rohr_strang3_vl4 = hvac
                elif 'Rohr - Ruecklauf Strang3 - 4' == hvac.Name:
                    rohr_strang3_rl4 = hvac            
                elif 'Rohr - Vorlauf Strang4 - 1' == hvac.Name:
                    rohr_strang4_vl1 = hvac
                elif 'Rohr - Ruecklauf Strang4 - 1' == hvac.Name:
                    rohr_strang4_rl1 = hvac
                elif 'Rohr - Vorlauf Strang4 - 2' == hvac.Name:
                    rohr_strang4_vl2 = hvac
                elif 'Rohr - Ruecklauf Strang4 - 2' == hvac.Name:
                    rohr_strang4_rl2 = hvac             
                elif 'Rohr - Vorlauf Strang4 - 3' == hvac.Name:
                    rohr_strang4_vl3 = hvac
                elif 'Rohr - Ruecklauf Strang4 - 3' == hvac.Name:
                    rohr_strang4_rl3 = hvac
                elif 'Rohr - Vorlauf Strang4 - 4' == hvac.Name:
                    rohr_strang4_vl4 = hvac
                elif 'Rohr - Ruecklauf Strang4 - 4' == hvac.Name:
                    rohr_strang4_rl4 = hvac

            if int(self.app.heizkreis_hk) == 1:
                laengen = []
                anzahl_heizungen = (len(rohrdaten))
                for heizflaeche in rohrdaten:
                    laengen.append(float(rohrdaten[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in rohrdaten:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                if anzahl_heizungen == 1:
                    hk1 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1 = hks[0]
                    hk2 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in rohrdaten:
                        if float(rohrdaten[str(heizflaeche)][0]) == laengen[0]:
                            hk1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2 = hks[0]
                    hk3 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in rohrdaten:
                        if float(rohrdaten[str(heizflaeche)][0]) == laengen[0]:
                            hk1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(rohrdaten[str(heizflaeche)][0]) == laengen[1]:
                            hk2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3 = hks[0]
                    hk4 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in rohrdaten:
                        if float(rohrdaten[str(heizflaeche)][0]) == laengen[0]:
                            hk1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(rohrdaten[str(heizflaeche)][0]) == laengen[1]:
                            hk2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(rohrdaten[str(heizflaeche)][0]) == laengen[2]:
                            hk3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4 = hks[0]
                    hk5 = hks[1]
                hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
                for hvac in hvac_components:
                    if 'Verteiler-Heizkreis' in hvac.Name:
                        vt = hvac
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1.split(' ')[0]:
                        hzk1 = element
                        hzk1.Description = "HK1_1"
                        rohr_v1 = hzk1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #verteiler nur mit hk1 verbinden
                            out_vt= vt.IsNestedBy[0].RelatedObjects[2]
                            in_vt= vt.IsNestedBy[0].RelatedObjects[3] 
                            rel_vt_out_hk1 = self.add_links(ifc_system, gebauede, [out_vt], [rohr_v1_in], name = ["Verteiler mit HK1 - Strang1 - Vorlauf"])
                            rel_vt_in_hk1  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [in_vt], name = ["HK1 mit Verteiler - Strang1 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #verteiler mit strang 1 verbinden und über t-stueck zu hk 1
                            #Verteiler mit Strang1
                            out_vt= vt.IsNestedBy[0].RelatedObjects[2]
                            in_vt= vt.IsNestedBy[0].RelatedObjects[3]
                            vl_strang1_in  = rohr_strang1_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang1_out = rohr_strang1_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_vt_out_st1 = self.add_links(ifc_system, gebauede, [out_vt], [vl_strang1_in], name = ["Verteiler mit Strang1 - Vorlauf"])
                            rel_vt_in_st1  = self.add_links(ifc_system, gebauede, [rl_strang1_out], [in_vt], name = ["Strang1 mit Verteiler - Ruecklauf"])
                            #Strang1 mit T-Stuecke
                            vl_strang1_out = rohr_strang1_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang1_in  = rohr_strang1_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl1_out1     = t_vl1.IsNestedBy[0].RelatedObjects[0]
                            t_vl1_in1      = t_vl1.IsNestedBy[0].RelatedObjects[2]
                            t_rl1_out1     = t_rl1.IsNestedBy[0].RelatedObjects[0]
                            t_rl1_in1      = t_rl1.IsNestedBy[0].RelatedObjects[1]
                            rel_st1_1_out_t1 = self.add_links(ifc_system, gebauede, [vl_strang1_out], [t_vl1_in1], name = ["Strang1-1 mit T - Vorlauf"])
                            rel_t1_in_st1_1  = self.add_links(ifc_system, gebauede, [t_rl1_out1], [rl_strang1_in], name = ["T mit Strang1-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1 = self.add_links(ifc_system, gebauede, [t_vl1_out1], [rohr_v1_in], name = ["T  mit HK1 - Vorlauf"])
                            rel_hk1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl1_in1], name = ["HK1 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang1
                            for heizflaeche in rohrdaten:
                                if str(heizflaeche) == hk1:
                                    rohrlaenge_1 = float(rohrdaten[str(heizflaeche)][0])
                                    for property_set in rohr_strang1_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(rohrdaten[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2])
                                    for property_set in rohr_strang1_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(rohrdaten[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2.split(' ')[0]:
                            hzk2 = element
                            hzk2.Description = "HK2_1"
                            rohr_v2 = hzk2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl1_out2       = t_vl1.IsNestedBy[0].RelatedObjects[1]
                                t_rl1_in2        = t_rl1.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl1_out_hk2 = self.add_links(ifc_system, gebauede, [t_vl1_out2], [rohr_v2_in], name = ["T mit HK2 - Strang1 - Vorlauf"])
                                rel_trl1_in_hk2  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl1_in2], name = ["HK2 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 1 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang1-2
                                t_vl1_out2       = t_vl1.IsNestedBy[0].RelatedObjects[1]
                                t_rl1_in2        = t_rl1.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_2_in  = rohr_strang1_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_2_out = rohr_strang1_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_2 = self.add_links(ifc_system, gebauede, [t_vl1_out2], [vl_strang1_2_in], name = ["T mit Strang1-2 - Vorlauf"])
                                rel_t_in_st1_2  = self.add_links(ifc_system, gebauede, [rl_strang1_2_out], [t_rl1_in2], name = ["Strang1-2 mit T - Ruecklauf"])
                                #Strang1-2 mit T-Stuecke
                                vl_strang1_2_out = rohr_strang1_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_2_in  = rohr_strang1_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl2_out1     = t_vl2.IsNestedBy[0].RelatedObjects[0]
                                t_vl2_in1      = t_vl2.IsNestedBy[0].RelatedObjects[2]
                                t_rl2_out1     = t_rl2.IsNestedBy[0].RelatedObjects[0]
                                t_rl2_in1      = t_rl2.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_2_out_t2 = self.add_links(ifc_system, gebauede, [vl_strang1_2_out], [t_vl2_in1], name = ["Strang1-2 mit T - Vorlauf"])
                                rel_t2_in_st1_2  = self.add_links(ifc_system, gebauede, [t_rl2_out1], [rl_strang1_2_in], name = ["T mit Strang1-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2 = self.add_links(ifc_system, gebauede, [t_vl2_out1], [rohr_v2_in], name = ["T  mit HK2 - Vorlauf"])
                                rel_hk2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl2_in1], name = ["HK2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang1
                                for heizflaeche in rohrdaten:
                                    if str(heizflaeche) == hk2:
                                        rohrlaenge_2 = float(rohrdaten[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang1_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(rohrdaten[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(rohrdaten[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3.split(' ')[0]:
                            hzk3 = element
                            hzk3.Description = "HK3_1"
                            rohr_v3 = hzk3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl2_out2       = t_vl2.IsNestedBy[0].RelatedObjects[1]
                                t_rl2_in2        = t_rl2.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl2_out_hk3 = self.add_links(ifc_system, gebauede, [t_vl2_out2], [rohr_v3_in], name = ["T mit HK3 - Strang1 - Vorlauf"])
                                rel_trl2_in_hk3  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl2_in2], name = ["HK3 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 1 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang1-3
                                t_vl2_out2       = t_vl2.IsNestedBy[0].RelatedObjects[1]
                                t_rl2_in2        = t_rl2.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_3_in  = rohr_strang1_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_3_out = rohr_strang1_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_3 = self.add_links(ifc_system, gebauede, [t_vl2_out2], [vl_strang1_3_in], name = ["T mit Strang1-3 - Vorlauf"])
                                rel_t_in_st1_3  = self.add_links(ifc_system, gebauede, [rl_strang1_3_out], [t_rl2_in2], name = ["Strang1-3 mit T - Ruecklauf"])
                                #Strang1-3 mit T-Stuecke
                                vl_strang1_3_out = rohr_strang1_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_3_in  = rohr_strang1_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl3_out1     = t_vl3.IsNestedBy[0].RelatedObjects[0]
                                t_vl3_in1      = t_vl3.IsNestedBy[0].RelatedObjects[2]
                                t_rl3_out1     = t_rl3.IsNestedBy[0].RelatedObjects[0]
                                t_rl3_in1      = t_rl3.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_3_out_t3 = self.add_links(ifc_system, gebauede, [vl_strang1_3_out], [t_vl3_in1], name = ["Strang1-3 mit T - Vorlauf"])
                                rel_t3_in_st1_3  = self.add_links(ifc_system, gebauede, [t_rl3_out1], [rl_strang1_3_in], name = ["T mit Strang1-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk3 = self.add_links(ifc_system, gebauede, [t_vl3_out1], [rohr_v3_in], name = ["T  mit HK3 - Vorlauf"])
                                rel_hk3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl3_in1], name = ["HK3 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang1
                                for heizflaeche in rohrdaten:
                                    if str(heizflaeche) == hk3:
                                        rohrlaenge_3 = float(rohrdaten[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang1_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4.split(' ')[0]:
                            hzk4 = element
                            hzk4.Description = "HK4_1"
                            rohr_v4 = hzk4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl3_out2       = t_vl3.IsNestedBy[0].RelatedObjects[1]
                                t_rl3_in2        = t_rl3.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl3_out_hk4 = self.add_links(ifc_system, gebauede, [t_vl3_out2], [rohr_v4_in], name = ["T mit HK4 - Strang1 - Vorlauf"])
                                rel_trl3_in_hk4  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl3_in2], name = ["HK4 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 1 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang1-4
                                t_vl3_out2       = t_vl3.IsNestedBy[0].RelatedObjects[1]
                                t_rl3_in2        = t_rl3.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_4_in  = rohr_strang1_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_4_out = rohr_strang1_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_4 = self.add_links(ifc_system, gebauede, [t_vl3_out2], [vl_strang1_4_in], name = ["T mit Strang1-4 - Vorlauf"])
                                rel_t_in_st1_4  = self.add_links(ifc_system, gebauede, [rl_strang1_4_out], [t_rl3_in2], name = ["Strang1-4 mit T - Ruecklauf"])
                                #Strang1-4 mit T-Stuecke
                                vl_strang1_4_out = rohr_strang1_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_4_in  = rohr_strang1_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl4_out1     = t_vl4.IsNestedBy[0].RelatedObjects[0]
                                t_vl4_in1      = t_vl4.IsNestedBy[0].RelatedObjects[2]
                                t_rl4_out1     = t_rl4.IsNestedBy[0].RelatedObjects[0]
                                t_rl4_in1      = t_rl4.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_4_out_t4 = self.add_links(ifc_system, gebauede, [vl_strang1_4_out], [t_vl4_in1], name = ["Strang1-4 mit T - Vorlauf"])
                                rel_t4_in_st1_4  = self.add_links(ifc_system, gebauede, [t_rl4_out1], [rl_strang1_4_in], name = ["T mit Strang1-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4 = self.add_links(ifc_system, gebauede, [t_vl4_out1], [rohr_v4_in], name = ["T  mit HK4 - Vorlauf"])
                                rel_hk4_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl4_in1], name = ["HK4 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang1
                                for heizflaeche in rohrdaten:
                                    if str(heizflaeche) == hk4:
                                        rohrlaenge_4 = float(rohrdaten[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang1_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5.split(' ')[0]:
                            hzk5 = element
                            hzk5.Description = "HK5_1"
                            rohr_v5 = hzk5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl4_out2       = t_vl4.IsNestedBy[0].RelatedObjects[1]
                                t_rl4_in2        = t_rl4.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl4_out_hk5 = self.add_links(ifc_system, gebauede, [t_vl4_out2], [rohr_v5_in], name = ["T mit HK5 - Strang1 - Vorlauf"])
                                rel_trl4_in_hk5  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl4_in2], name = ["HK5 mit T - Strang1 - Ruecklauf"])
            elif int(self.app.heizkreis_hk) == 2:
                hk_1 = {}
                hk_2 = {}
                for heizflaeche in rohrdaten:
                    if int(rohrdaten[heizflaeche][3]) == 1:
                        hk_1[heizflaeche] = rohrdaten[heizflaeche]
                    elif int(rohrdaten[heizflaeche][3]) == 2:
                        hk_2[heizflaeche] = rohrdaten[heizflaeche]
                #verteiler mit knoten 1
                hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
                for hvac in hvac_components:
                    if 'Verteiler-Heizkreis' in hvac.Name:
                        vt = hvac
                    elif 'Rohr - Vorlauf zu Knoten1' in hvac.Name:
                        k1_v = hvac
                    elif 'Rohr - Ruecklauf von Knoten1' in hvac.Name:
                        k1_r = hvac
                out_vt= vt.IsNestedBy[0].RelatedObjects[2]
                in_vt= vt.IsNestedBy[0].RelatedObjects[3]
                rohr_k1_v_in = k1_v.IsNestedBy[0].RelatedObjects[1]
                rohr_k1_r_out = k1_r.IsNestedBy[0].RelatedObjects[0]
                rel_vt_out_k1 = self.add_links(ifc_system, gebauede, [out_vt], [rohr_k1_v_in], name = ["Verteiler mit K1 - Strang1/2 - Vorlauf"])
                rel_vt_in_k1  = self.add_links(ifc_system, gebauede, [rohr_k1_r_out], [in_vt], name = ["K1 mit Verteiler - Strang1/2 - Ruecklauf"])
                #Knoten1 Rohre mit T
                rohr_k1_v_out = k1_v.IsNestedBy[0].RelatedObjects[0]
                rohr_k1_r_in  = k1_r.IsNestedBy[0].RelatedObjects[1]   
                t_vl_k1_in1   = t_vl_k1.IsNestedBy[0].RelatedObjects[2]
                t_rl_k1_out1   = t_rl_k1.IsNestedBy[0].RelatedObjects[0]
                rel_k1_out_t = self.add_links(ifc_system, gebauede, [rohr_k1_v_out], [t_vl_k1_in1], name = ["T mit K1 Rohre - Strang1/2 - Vorlauf"])
                rel_k1_in_t  = self.add_links(ifc_system, gebauede, [t_rl_k1_out1], [rohr_k1_r_in], name = ["K1 Rohre mit T - Strang1/2 - Ruecklauf"])                
                for property_set in k1_v.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk1_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk1_d
                for property_set in k1_r.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk1_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk1_d
                #strang1
                laengen = []
                anzahl_heizungen = (len(hk_1))
                for heizflaeche in hk_1:
                    laengen.append(float(hk_1[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in hk_1:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                for heizflaeche in hk_1:
                    laengen.append(float(hk_1[str(heizflaeche)][0]))
                laengen.sort()
                if anzahl_heizungen == 1:
                    hk1_1 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1_1 = hks[0]
                    hk2_1 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in hk_1:
                        if float(hk_1[str(heizflaeche)][0]) == laengen[0]:
                            hk1_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2_1 = hks[0]
                    hk3_1 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in hk_1:
                        if float(hk_1[str(heizflaeche)][0]) == laengen[0]:
                            hk1_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_1[str(heizflaeche)][0]) == laengen[1]:
                            hk2_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3_1 = hks[0]
                    hk4_1 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in hk_1:
                        if float(hk_1[str(heizflaeche)][0]) == laengen[0]:
                            hk1_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_1[str(heizflaeche)][0]) == laengen[1]:
                            hk2_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_1[str(heizflaeche)][0]) == laengen[2]:
                            hk3_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4_1 = hks[0]
                    hk5_1 = hks[1]

                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1_1.split(' ')[0]:
                        hzk1_1 = element
                        hzk1_1.Description = "HK1_1"
                        rohr_v1 = hzk1_1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk1_1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #knoten1 nur mit hk1 verbinden
                            t_vl_k1_out1 = t_vl_k1.IsNestedBy[0].RelatedObjects[0]
                            t_rl_k1_in1  = t_rl_k1.IsNestedBy[0].RelatedObjects[1]
                            rel_k1_out_hk1_1 = self.add_links(ifc_system, gebauede, [t_vl_k1_out1], [rohr_v1_in], name = ["Knoten1 mit HK1-1 - Strang1 - Vorlauf"])
                            rel_k1_in_hk1_1  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl_k1_in1], name = ["HK1-1 mit Knoten1 - Strang1 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #Knoten1 mit strang 1 verbinden und über t-stueck zu hk 1
                            #Knoten1 mit Strang1
                            t_vl_k1_out1 = t_vl_k1.IsNestedBy[0].RelatedObjects[0]
                            t_rl_k1_in1  = t_rl_k1.IsNestedBy[0].RelatedObjects[1]
                            vl_strang1_in  = rohr_strang1_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang1_out = rohr_strang1_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_k1_out_st1 = self.add_links(ifc_system, gebauede, [t_vl_k1_out1], [vl_strang1_in], name = ["Knoten1 mit Strang1 - Vorlauf"])
                            rel_k1_in_st1  = self.add_links(ifc_system, gebauede, [rl_strang1_out], [t_rl_k1_in1], name = ["Strang1 mit Knoten1 - Ruecklauf"])
                            #Strang1 mit T-Stuecke
                            vl_strang1_out = rohr_strang1_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang1_in  = rohr_strang1_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl1_out1     = t_vl1.IsNestedBy[0].RelatedObjects[0]
                            t_vl1_in1      = t_vl1.IsNestedBy[0].RelatedObjects[2]
                            t_rl1_out1     = t_rl1.IsNestedBy[0].RelatedObjects[0]
                            t_rl1_in1      = t_rl1.IsNestedBy[0].RelatedObjects[1]
                            rel_st1_1_out_t1 = self.add_links(ifc_system, gebauede, [vl_strang1_out], [t_vl1_in1], name = ["Strang1-1 mit T - Vorlauf"])
                            rel_t1_in_st1_1  = self.add_links(ifc_system, gebauede, [t_rl1_out1], [rl_strang1_in], name = ["T mit Strang1-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1_1 = self.add_links(ifc_system, gebauede, [t_vl1_out1], [rohr_v1_in], name = ["T  mit HK1-1 - Vorlauf"])
                            rel_hk1_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl1_in1], name = ["HK1-1 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang1
                            for heizflaeche in hk_1:
                                if str(heizflaeche) == hk1_1:
                                    rohrlaenge_1 = float(hk_1[str(heizflaeche)][0])
                                    for property_set in rohr_strang1_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_1[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2])
                                    for property_set in rohr_strang1_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_1[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2_1.split(' ')[0]:
                            hzk1_1_2 = element
                            hzk1_1_2.Description = "HK2_1"
                            rohr_v2 = hzk1_1_2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk1_1_2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl1_out2       = t_vl1.IsNestedBy[0].RelatedObjects[1]
                                t_rl1_in2        = t_rl1.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl1_out_hk2_1 = self.add_links(ifc_system, gebauede, [t_vl1_out2], [rohr_v2_in], name = ["T mit HK2-1 - Strang1 - Vorlauf"])
                                rel_trl1_in_hk2_1  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl1_in2], name = ["HK2-1 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 1 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang1-2
                                t_vl1_out2       = t_vl1.IsNestedBy[0].RelatedObjects[1]
                                t_rl1_in2        = t_rl1.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_2_in  = rohr_strang1_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_2_out = rohr_strang1_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_2 = self.add_links(ifc_system, gebauede, [t_vl1_out2], [vl_strang1_2_in], name = ["T mit Strang1-2 - Vorlauf"])
                                rel_t_in_st1_2  = self.add_links(ifc_system, gebauede, [rl_strang1_2_out], [t_rl1_in2], name = ["Strang1-2 mit T - Ruecklauf"])
                                #Strang1-2 mit T-Stuecke
                                vl_strang1_2_out = rohr_strang1_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_2_in  = rohr_strang1_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl2_out1     = t_vl2.IsNestedBy[0].RelatedObjects[0]
                                t_vl2_in1      = t_vl2.IsNestedBy[0].RelatedObjects[2]
                                t_rl2_out1     = t_rl2.IsNestedBy[0].RelatedObjects[0]
                                t_rl2_in1      = t_rl2.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_2_out_t2 = self.add_links(ifc_system, gebauede, [vl_strang1_2_out], [t_vl2_in1], name = ["Strang1-2 mit T - Vorlauf"])
                                rel_t2_in_st1_2  = self.add_links(ifc_system, gebauede, [t_rl2_out1], [rl_strang1_2_in], name = ["T mit Strang1-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2_1 = self.add_links(ifc_system, gebauede, [t_vl2_out1], [rohr_v2_in], name = ["T  mit HK2-1 - Vorlauf"])
                                rel_hk2_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl2_in1], name = ["HK2-1 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang1
                                for heizflaeche in hk_1:
                                    if str(heizflaeche) == hk2_1:
                                        rohrlaenge_2 = float(hk_1[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang1_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_1[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_1[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3_1.split(' ')[0]:
                            hzk1_1_3 = element
                            hzk1_1_3.Description = "HK3_1"
                            rohr_v3 = hzk1_1_3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk1_1_3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl2_out2       = t_vl2.IsNestedBy[0].RelatedObjects[1]
                                t_rl2_in2        = t_rl2.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl2_out_hk3_1 = self.add_links(ifc_system, gebauede, [t_vl2_out2], [rohr_v3_in], name = ["T mit HK3-1 - Strang1 - Vorlauf"])
                                rel_trl2_in_hk3_1  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl2_in2], name = ["HK3-1 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 1 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang1-3
                                t_vl2_out2       = t_vl2.IsNestedBy[0].RelatedObjects[1]
                                t_rl2_in2        = t_rl2.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_3_in  = rohr_strang1_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_3_out = rohr_strang1_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_3 = self.add_links(ifc_system, gebauede, [t_vl2_out2], [vl_strang1_3_in], name = ["T mit Strang1-3 - Vorlauf"])
                                rel_t_in_st1_3  = self.add_links(ifc_system, gebauede, [rl_strang1_3_out], [t_rl2_in2], name = ["Strang1-3 mit T - Ruecklauf"])
                                #Strang1-3 mit T-Stuecke
                                vl_strang1_3_out = rohr_strang1_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_3_in  = rohr_strang1_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl3_out1     = t_vl3.IsNestedBy[0].RelatedObjects[0]
                                t_vl3_in1      = t_vl3.IsNestedBy[0].RelatedObjects[2]
                                t_rl3_out1     = t_rl3.IsNestedBy[0].RelatedObjects[0]
                                t_rl3_in1      = t_rl3.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_3_out_t3 = self.add_links(ifc_system, gebauede, [vl_strang1_3_out], [t_vl3_in1], name = ["Strang1-3 mit T - Vorlauf"])
                                rel_t3_in_st1_3  = self.add_links(ifc_system, gebauede, [t_rl3_out1], [rl_strang1_3_in], name = ["T mit Strang1-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk3_1 = self.add_links(ifc_system, gebauede, [t_vl3_out1], [rohr_v3_in], name = ["T  mit HK3-1 - Vorlauf"])
                                rel_hk3_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl3_in1], name = ["HK3-1 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang1
                                for heizflaeche in hk_1:
                                    if str(heizflaeche) == hk3_1:
                                        rohrlaenge_3 = float(hk_1[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang1_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4_1.split(' ')[0]:
                            hzk1_1_4 = element
                            hzk1_1_4.Description = "HK4_1"
                            rohr_v4 = hzk1_1_4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk1_1_4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl3_out2       = t_vl3.IsNestedBy[0].RelatedObjects[1]
                                t_rl3_in2        = t_rl3.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl3_out_hk4_1 = self.add_links(ifc_system, gebauede, [t_vl3_out2], [rohr_v4_in], name = ["T mit HK4-1 - Strang1 - Vorlauf"])
                                rel_trl3_in_hk4_1  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl3_in2], name = ["HK4-1 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 1 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang1-4
                                t_vl3_out2       = t_vl3.IsNestedBy[0].RelatedObjects[1]
                                t_rl3_in2        = t_rl3.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_4_in  = rohr_strang1_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_4_out = rohr_strang1_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_4 = self.add_links(ifc_system, gebauede, [t_vl3_out2], [vl_strang1_4_in], name = ["T mit Strang1-4 - Vorlauf"])
                                rel_t_in_st1_4  = self.add_links(ifc_system, gebauede, [rl_strang1_4_out], [t_rl3_in2], name = ["Strang1-4 mit T - Ruecklauf"])
                                #Strang1-4 mit T-Stuecke
                                vl_strang1_4_out = rohr_strang1_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_4_in  = rohr_strang1_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl4_out1     = t_vl4.IsNestedBy[0].RelatedObjects[0]
                                t_vl4_in1      = t_vl4.IsNestedBy[0].RelatedObjects[2]
                                t_rl4_out1     = t_rl4.IsNestedBy[0].RelatedObjects[0]
                                t_rl4_in1      = t_rl4.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_4_out_t4 = self.add_links(ifc_system, gebauede, [vl_strang1_4_out], [t_vl4_in1], name = ["Strang1-4 mit T - Vorlauf"])
                                rel_t4_in_st1_4  = self.add_links(ifc_system, gebauede, [t_rl4_out1], [rl_strang1_4_in], name = ["T mit Strang1-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4_1 = self.add_links(ifc_system, gebauede, [t_vl4_out1], [rohr_v4_in], name = ["T  mit HK4-1 - Vorlauf"])
                                rel_hk4_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl4_in1], name = ["HK4-1 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang1
                                for heizflaeche in hk_1:
                                    if str(heizflaeche) == hk4_1:
                                        rohrlaenge_4 = float(hk_1[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang1_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5_1.split(' ')[0]:
                            hzk1_1_5 = element
                            hzk1_1_5.Description = "HK5_1"
                            rohr_v5 = hzk1_1_5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk1_1_5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl4_out2       = t_vl4.IsNestedBy[0].RelatedObjects[1]
                                t_rl4_in2        = t_rl4.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl4_out_hk5_1 = self.add_links(ifc_system, gebauede, [t_vl4_out2], [rohr_v5_in], name = ["T mit HK5-1 - Strang1 - Vorlauf"])
                                rel_trl4_in_hk5_1  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl4_in2], name = ["HK5-1 mit T - Strang1 - Ruecklauf"])
                #strang2
                laengen = []
                anzahl_heizungen = (len(hk_2))
                for heizflaeche in hk_2:
                    laengen.append(float(hk_2[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in hk_2:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                for heizflaeche in hk_2:
                    laengen.append(float(hk_2[str(heizflaeche)][0]))
                laengen.sort()
                if anzahl_heizungen == 1:
                    hk1_2 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1_2 = hks[0]
                    hk2_2 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in hk_2:
                        if float(hk_2[str(heizflaeche)][0]) == laengen[0]:
                            hk1_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2_2 = hks[0]
                    hk3_2 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in hk_2:
                        if float(hk_2[str(heizflaeche)][0]) == laengen[0]:
                            hk1_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_2[str(heizflaeche)][0]) == laengen[1]:
                            hk2_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3_2 = hks[0]
                    hk4_2 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in hk_2:
                        if float(hk_2[str(heizflaeche)][0]) == laengen[0]:
                            hk1_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_2[str(heizflaeche)][0]) == laengen[1]:
                            hk2_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_2[str(heizflaeche)][0]) == laengen[2]:
                            hk3_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4_2 = hks[0]
                    hk5_2 = hks[1]
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1_2.split(' ')[0]:
                        hzk1 = element
                        hzk1.Description = "HK1_2"
                        rohr_v1 = hzk1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #knoten1 nur mit hk1 verbinden
                            t_vl_k1_out2 = t_vl_k1.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k1_in2  = t_rl_k1.IsNestedBy[0].RelatedObjects[2]
                            rel_k1_out_hk1_2 = self.add_links(ifc_system, gebauede, [t_vl_k1_out2], [rohr_v1_in], name = ["Knoten1 mit HK1-2 - Strang2 - Vorlauf"])
                            rel_k1_in_hk1_2  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl_k1_in2], name = ["HK1-2 mit Knoten1 - Strang2 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #Knoten1 mit strang 2 verbinden und über t-stueck zu hk 1
                            #Knoten1 mit Strang2
                            t_vl_k1_out2 = t_vl_k1.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k1_in2  = t_rl_k1.IsNestedBy[0].RelatedObjects[2]
                            vl_strang2_in  = rohr_strang2_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang2_out = rohr_strang2_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_k1_out_st2 = self.add_links(ifc_system, gebauede, [t_vl_k1_out2], [vl_strang2_in], name = ["Knoten1 mit Strang2 - Vorlauf"])
                            rel_k1_in_st2  = self.add_links(ifc_system, gebauede, [rl_strang2_out], [t_rl_k1_in2], name = ["Strang2 mit Knoten1 - Ruecklauf"])
                            #Strang2 mit T-Stuecke
                            vl_strang2_out = rohr_strang2_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang2_in  = rohr_strang2_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl6_out1     = t_vl6.IsNestedBy[0].RelatedObjects[0]
                            t_vl6_in1      = t_vl6.IsNestedBy[0].RelatedObjects[2]
                            t_rl6_out1     = t_rl6.IsNestedBy[0].RelatedObjects[0]
                            t_rl6_in1      = t_rl6.IsNestedBy[0].RelatedObjects[1]
                            rel_st2_1_out_t6 = self.add_links(ifc_system, gebauede, [vl_strang2_out], [t_vl6_in1], name = ["Strang2-1 mit T - Vorlauf"])
                            rel_t6_in_st2_1  = self.add_links(ifc_system, gebauede, [t_rl6_out1], [rl_strang2_in], name = ["T mit Strang2-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1_2 = self.add_links(ifc_system, gebauede, [t_vl6_out1], [rohr_v1_in], name = ["T  mit HK1-2 - Vorlauf"])
                            rel_hk1_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl6_in1], name = ["HK1-2 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang2
                            for heizflaeche in hk_2:
                                if str(heizflaeche) == hk1_2:
                                    rohrlaenge_1 = float(hk_2[str(heizflaeche)][0])
                                    for property_set in rohr_strang2_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_2[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2])
                                    for property_set in rohr_strang2_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_2[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2_2.split(' ')[0]:
                            hzk2 = element
                            hzk2.Description = "HK2_2"
                            rohr_v2 = hzk2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl6_out2       = t_vl6.IsNestedBy[0].RelatedObjects[1]
                                t_rl6_in2        = t_rl6.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl6_out_hk2_2 = self.add_links(ifc_system, gebauede, [t_vl6_out2], [rohr_v2_in], name = ["T mit HK2-2 - Strang2 - Vorlauf"])
                                rel_trl6_in_hk2_2  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl6_in2], name = ["HK2-2 mit T - Strang2 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 2 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang2-2
                                t_vl6_out2       = t_vl6.IsNestedBy[0].RelatedObjects[1]
                                t_rl6_in2        = t_rl6.IsNestedBy[0].RelatedObjects[2]
                                vl_strang2_2_in  = rohr_strang2_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang2_2_out = rohr_strang2_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st2_2 = self.add_links(ifc_system, gebauede, [t_vl6_out2], [vl_strang2_2_in], name = ["T mit Strang2-2 - Vorlauf"])
                                rel_t_in_st2_2  = self.add_links(ifc_system, gebauede, [rl_strang2_2_out], [t_rl6_in2], name = ["Strang2-2 mit T - Ruecklauf"])
                                #Strang2-2 mit T-Stuecke
                                vl_strang2_2_out = rohr_strang2_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang2_2_in  = rohr_strang2_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl7_out1     = t_vl7.IsNestedBy[0].RelatedObjects[0]
                                t_vl7_in1      = t_vl7.IsNestedBy[0].RelatedObjects[2]
                                t_rl7_out1     = t_rl7.IsNestedBy[0].RelatedObjects[0]
                                t_rl7_in1      = t_rl7.IsNestedBy[0].RelatedObjects[1]
                                rel_st2_2_out_t7 = self.add_links(ifc_system, gebauede, [vl_strang2_2_out], [t_vl7_in1], name = ["Strang2-2 mit T - Vorlauf"])
                                rel_t7_in_st2_2  = self.add_links(ifc_system, gebauede, [t_rl7_out1], [rl_strang2_2_in], name = ["T mit Strang2-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2_2 = self.add_links(ifc_system, gebauede, [t_vl7_out1], [rohr_v2_in], name = ["T  mit HK2-2 - Vorlauf"])
                                rel_hk2_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl7_in1], name = ["HK2-2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang2
                                for heizflaeche in hk_2:
                                    if str(heizflaeche) == hk2_2:
                                        rohrlaenge_2 = float(hk_2[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang2_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_2[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang2_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_2[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3_2.split(' ')[0]:
                            hzk3 = element
                            hzk3.Description = "HK3_2"
                            rohr_v3 = hzk3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl7_out2       = t_vl7.IsNestedBy[0].RelatedObjects[1]
                                t_rl7_in2        = t_rl7.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl7_out_hk3_2 = self.add_links(ifc_system, gebauede, [t_vl7_out2], [rohr_v3_in], name = ["T mit HK3-2 - Strang2 - Vorlauf"])
                                rel_trl7_in_hk3_2  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl7_in2], name = ["HK3-2 mit T - Strang2 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 2 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang2-3
                                t_vl7_out2       = t_vl7.IsNestedBy[0].RelatedObjects[1]
                                t_rl7_in2        = t_rl7.IsNestedBy[0].RelatedObjects[2]
                                vl_strang2_3_in  = rohr_strang2_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang2_3_out = rohr_strang2_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st2_3 = self.add_links(ifc_system, gebauede, [t_vl7_out2], [vl_strang2_3_in], name = ["T mit Strang2-3 - Vorlauf"])
                                rel_t_in_st2_3  = self.add_links(ifc_system, gebauede, [rl_strang2_3_out], [t_rl7_in2], name = ["Strang2-3 mit T - Ruecklauf"])
                                #Strang2-3 mit T-Stuecke
                                vl_strang2_3_out = rohr_strang2_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang2_3_in  = rohr_strang2_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl8_out1     = t_vl8.IsNestedBy[0].RelatedObjects[0]
                                t_vl8_in1      = t_vl8.IsNestedBy[0].RelatedObjects[2]
                                t_rl8_out1     = t_rl8.IsNestedBy[0].RelatedObjects[0]
                                t_rl8_in1      = t_rl8.IsNestedBy[0].RelatedObjects[1]
                                rel_st2_3_out_t8 = self.add_links(ifc_system, gebauede, [vl_strang2_3_out], [t_vl8_in1], name = ["Strang2-3 mit T - Vorlauf"])
                                rel_t8_in_st2_3  = self.add_links(ifc_system, gebauede, [t_rl8_out1], [rl_strang2_3_in], name = ["T mit Strang2-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk3_2 = self.add_links(ifc_system, gebauede, [t_vl8_out1], [rohr_v3_in], name = ["T  mit HK3-2 - Vorlauf"])
                                rel_hk3_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl8_in1], name = ["HK3-2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang2
                                for heizflaeche in hk_2:
                                    if str(heizflaeche) == hk3_2:
                                        rohrlaenge_3 = float(hk_2[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang2_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang2_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4_2.split(' ')[0]:
                            hzk4 = element
                            hzk4.Description = "HK4_2"
                            rohr_v4 = hzk4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl8_out2       = t_vl8.IsNestedBy[0].RelatedObjects[1]
                                t_rl8_in2        = t_rl8.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl8_out_hk4_2 = self.add_links(ifc_system, gebauede, [t_vl8_out2], [rohr_v4_in], name = ["T mit HK4-2 - Strang2 - Vorlauf"])
                                rel_trl8_in_hk4_2  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl8_in2], name = ["HK4-2 mit T - Strang2 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 2 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang2-4
                                t_vl8_out2       = t_vl8.IsNestedBy[0].RelatedObjects[1]
                                t_rl8_in2        = t_rl8.IsNestedBy[0].RelatedObjects[2]
                                vl_strang2_4_in  = rohr_strang2_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang2_4_out = rohr_strang2_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st2_4 = self.add_links(ifc_system, gebauede, [t_vl8_out2], [vl_strang2_4_in], name = ["T mit Strang2-4 - Vorlauf"])
                                rel_t_in_st2_4  = self.add_links(ifc_system, gebauede, [rl_strang2_4_out], [t_rl8_in2], name = ["Strang2-4 mit T - Ruecklauf"])
                                #Strang2-4 mit T-Stuecke
                                vl_strang2_4_out = rohr_strang2_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang2_4_in  = rohr_strang2_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl9_out1     = t_vl9.IsNestedBy[0].RelatedObjects[0]
                                t_vl9_in1      = t_vl9.IsNestedBy[0].RelatedObjects[2]
                                t_rl9_out1     = t_rl9.IsNestedBy[0].RelatedObjects[0]
                                t_rl9_in1      = t_rl9.IsNestedBy[0].RelatedObjects[1]
                                rel_st2_4_out_t9 = self.add_links(ifc_system, gebauede, [vl_strang2_4_out], [t_vl9_in1], name = ["Strang2-4 mit T - Vorlauf"])
                                rel_t9_in_st2_4  = self.add_links(ifc_system, gebauede, [t_rl9_out1], [rl_strang2_4_in], name = ["T mit Strang2-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4_2 = self.add_links(ifc_system, gebauede, [t_vl9_out1], [rohr_v4_in], name = ["T  mit HK4-2 - Vorlauf"])
                                rel_hk4_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl9_in1], name = ["HK4-2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang2
                                for heizflaeche in hk_2:
                                    if str(heizflaeche) == hk4_2:
                                        rohrlaenge_4 = float(hk_2[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang2_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang2_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5_2.split(' ')[0]:
                            hzk5 = element
                            hzk5.Description = "HK5_2"
                            rohr_v5 = hzk5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl9_out2       = t_vl9.IsNestedBy[0].RelatedObjects[1]
                                t_rl9_in2        = t_rl9.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl9_out_hk5_2 = self.add_links(ifc_system, gebauede, [t_vl9_out2], [rohr_v5_in], name = ["T mit HK5-2 - Strang2 - Vorlauf"])
                                rel_trl9_in_hk5_2  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl9_in2], name = ["HK5-2 mit T - Strang2 - Ruecklauf"])
            elif int(self.app.heizkreis_hk) == 3:
                hk_1 = {}
                hk_2 = {}
                hk_3 = {}
                for heizflaeche in rohrdaten:
                    if int(rohrdaten[heizflaeche][3]) == 1:
                        hk_1[heizflaeche] = rohrdaten[heizflaeche]
                    elif int(rohrdaten[heizflaeche][3]) == 2:
                        hk_2[heizflaeche] = rohrdaten[heizflaeche]
                    elif int(rohrdaten[heizflaeche][3]) == 3:
                        hk_3[heizflaeche] = rohrdaten[heizflaeche]
                hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
                for hvac in hvac_components:
                    if 'Verteiler-Heizkreis' in hvac.Name:
                        vt = hvac
                    elif 'Rohr - Vorlauf zu Knoten1' in hvac.Name:
                        k1_v = hvac
                    elif 'Rohr - Ruecklauf von Knoten1' in hvac.Name:
                        k1_r = hvac
                    elif 'Rohr - Vorlauf zu Knoten2' in hvac.Name:
                        k2_v = hvac
                    elif 'Rohr - Ruecklauf von Knoten2' in hvac.Name:
                        k2_r = hvac   
                #verteiler mit knoten 1
                out_vt= vt.IsNestedBy[0].RelatedObjects[2]
                in_vt= vt.IsNestedBy[0].RelatedObjects[3]
                rohr_k1_v_in = k1_v.IsNestedBy[0].RelatedObjects[1]
                rohr_k1_r_out = k1_r.IsNestedBy[0].RelatedObjects[0]
                rel_vt_out_k1 = self.add_links(ifc_system, gebauede, [out_vt], [rohr_k1_v_in], name = ["Verteiler mit K1 - Strang1/2/3 - Vorlauf"])
                rel_vt_in_k1  = self.add_links(ifc_system, gebauede, [rohr_k1_r_out], [in_vt], name = ["K1 mit Verteiler - Strang1/2/3 - Ruecklauf"])
                for property_set in k1_v.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk1_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk1_d
                for property_set in k1_r.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk1_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk1_d
                #Knoten1 Rohre mit T
                rohr_k1_v_out = k1_v.IsNestedBy[0].RelatedObjects[0]
                rohr_k1_r_in  = k1_r.IsNestedBy[0].RelatedObjects[1]   
                t_vl_k1_in1   = t_vl_k1.IsNestedBy[0].RelatedObjects[2]
                t_rl_k1_out1   = t_rl_k1.IsNestedBy[0].RelatedObjects[0]
                rel_k1_out_t = self.add_links(ifc_system, gebauede, [rohr_k1_v_out], [t_vl_k1_in1], name = ["T mit K1 Rohre - Strang1/2/3 - Vorlauf"])
                rel_k1_in_t  = self.add_links(ifc_system, gebauede, [t_rl_k1_out1], [rohr_k1_r_in], name = ["K1 Rohre mit T - Strang1/2/3 - Ruecklauf"])   
                #Knoten1 T mit Rohre Knoten2
                t_vl_k1_out1   = t_vl_k1.IsNestedBy[0].RelatedObjects[0]
                t_rl_k1_in1   = t_rl_k1.IsNestedBy[0].RelatedObjects[1]
                rohr_k2_v_in = k2_v.IsNestedBy[0].RelatedObjects[1]
                rohr_k2_r_out = k2_r.IsNestedBy[0].RelatedObjects[0]
                rel_t_out_k2 = self.add_links(ifc_system, gebauede, [t_vl_k1_out1], [rohr_k2_v_in], name = ["T K1 mit K2 - Strang 1/2 - Vorlauf"])
                rel_t_in_k2  = self.add_links(ifc_system, gebauede, [rohr_k2_r_out], [t_rl_k1_in1], name = ["K2 mit T K1 - Strang 1/2 - Ruecklauf"])
                for property_set in k2_v.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk2_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk2_d
                for property_set in k2_r.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk2_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk2_d
                #Knoten2 Rohre mit T
                rohr_k2_v_out = k2_v.IsNestedBy[0].RelatedObjects[0]
                rohr_k2_r_in  = k2_r.IsNestedBy[0].RelatedObjects[1]   
                t_vl_k2_in1   = t_vl_k2.IsNestedBy[0].RelatedObjects[2]
                t_rl_k2_out1   = t_rl_k2.IsNestedBy[0].RelatedObjects[0]
                rel_k2_out_t = self.add_links(ifc_system, gebauede, [rohr_k2_v_out], [t_vl_k2_in1], name = ["T mit K2 Rohre - Strang1/2 - Vorlauf"])
                rel_k2_in_t  = self.add_links(ifc_system, gebauede, [t_rl_k2_out1], [rohr_k2_r_in], name = ["K2 Rohre mit T - Strang1/2 - Ruecklauf"])   
                
                #strang1
                laengen = []
                anzahl_heizungen = (len(hk_1))
                for heizflaeche in hk_1:
                    laengen.append(float(hk_1[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in hk_1:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                for heizflaeche in hk_1:
                    laengen.append(float(hk_1[str(heizflaeche)][0]))
                laengen.sort()
                if anzahl_heizungen == 1:
                    hk1_1 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1_1 = hks[0]
                    hk2_1 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in hk_1:
                        if float(hk_1[str(heizflaeche)][0]) == laengen[0]:
                            hk1_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2_1 = hks[0]
                    hk3_1 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in hk_1:
                        if float(hk_1[str(heizflaeche)][0]) == laengen[0]:
                            hk1_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_1[str(heizflaeche)][0]) == laengen[1]:
                            hk2_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3_1 = hks[0]
                    hk4_1 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in hk_1:
                        if float(hk_1[str(heizflaeche)][0]) == laengen[0]:
                            hk1_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_1[str(heizflaeche)][0]) == laengen[1]:
                            hk2_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_1[str(heizflaeche)][0]) == laengen[2]:
                            hk3_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4_1 = hks[0]
                    hk5_1 = hks[1]
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1_1.split(' ')[0]:
                        hzk1_1 = element
                        hzk1_1.Description = "HK1_1"
                        rohr_v1 = hzk1_1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk1_1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #knoten2 nur mit hk1 verbinden
                            t_vl_k2_out1 = t_vl_k2.IsNestedBy[0].RelatedObjects[0]
                            t_rl_k2_in1  = t_rl_k2.IsNestedBy[0].RelatedObjects[1]
                            rel_k2_out_hk1_1 = self.add_links(ifc_system, gebauede, [t_vl_k2_out1], [rohr_v1_in], name = ["Knoten2 mit HK1-1 - Strang1 - Vorlauf"])
                            rel_k2_in_hk1_1  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl_k2_in1], name = ["HK1-1 mit Knoten2 - Strang1 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #Knoten1 mit strang 1 verbinden und über t-stueck zu hk 1
                            #Knoten2 mit Strang1
                            t_vl_k2_out1 = t_vl_k2.IsNestedBy[0].RelatedObjects[0]
                            t_rl_k2_in1  = t_rl_k2.IsNestedBy[0].RelatedObjects[1]
                            vl_strang1_in  = rohr_strang1_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang1_out = rohr_strang1_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_k2_out_st1 = self.add_links(ifc_system, gebauede, [t_vl_k2_out1], [vl_strang1_in], name = ["Knoten2 mit Strang1 - Vorlauf"])
                            rel_k2_in_st1  = self.add_links(ifc_system, gebauede, [rl_strang1_out], [t_rl_k2_in1], name = ["Strang1 mit Knoten2 - Ruecklauf"])
                            #Strang1 mit T-Stuecke
                            vl_strang1_out = rohr_strang1_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang1_in  = rohr_strang1_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl1_out1     = t_vl1.IsNestedBy[0].RelatedObjects[0]
                            t_vl1_in1      = t_vl1.IsNestedBy[0].RelatedObjects[2]
                            t_rl1_out1     = t_rl1.IsNestedBy[0].RelatedObjects[0]
                            t_rl1_in1      = t_rl1.IsNestedBy[0].RelatedObjects[1]
                            rel_st1_1_out_t1 = self.add_links(ifc_system, gebauede, [vl_strang1_out], [t_vl1_in1], name = ["Strang1-1 mit T - Vorlauf"])
                            rel_t1_in_st1_1  = self.add_links(ifc_system, gebauede, [t_rl1_out1], [rl_strang1_in], name = ["T mit Strang1-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1_1 = self.add_links(ifc_system, gebauede, [t_vl1_out1], [rohr_v1_in], name = ["T  mit HK1-1 - Vorlauf"])
                            rel_hk1_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl1_in1], name = ["HK1-1 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang1
                            for heizflaeche in hk_1:
                                if str(heizflaeche) == hk1_1:
                                    rohrlaenge_1 = float(hk_1[str(heizflaeche)][0])
                                    for property_set in rohr_strang1_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_1[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2])
                                    for property_set in rohr_strang1_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_1[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2_1.split(' ')[0]:
                            hzk1_2 = element
                            hzk1_2.Description = "HK2_1"
                            rohr_v2 = hzk1_2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk1_2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl1_out2       = t_vl1.IsNestedBy[0].RelatedObjects[1]
                                t_rl1_in2        = t_rl1.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl1_out_hk2_1 = self.add_links(ifc_system, gebauede, [t_vl1_out2], [rohr_v2_in], name = ["T mit HK2-1 - Strang1 - Vorlauf"])
                                rel_trl1_in_hk2_1  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl1_in2], name = ["HK2-1 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 1 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang1-2
                                t_vl1_out2       = t_vl1.IsNestedBy[0].RelatedObjects[1]
                                t_rl1_in2        = t_rl1.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_2_in  = rohr_strang1_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_2_out = rohr_strang1_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_2 = self.add_links(ifc_system, gebauede, [t_vl1_out2], [vl_strang1_2_in], name = ["T mit Strang1-2 - Vorlauf"])
                                rel_t_in_st1_2  = self.add_links(ifc_system, gebauede, [rl_strang1_2_out], [t_rl1_in2], name = ["Strang1-2 mit T - Ruecklauf"])
                                #Strang1-2 mit T-Stuecke
                                vl_strang1_2_out = rohr_strang1_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_2_in  = rohr_strang1_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl2_out1     = t_vl2.IsNestedBy[0].RelatedObjects[0]
                                t_vl2_in1      = t_vl2.IsNestedBy[0].RelatedObjects[2]
                                t_rl2_out1     = t_rl2.IsNestedBy[0].RelatedObjects[0]
                                t_rl2_in1      = t_rl2.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_2_out_t2 = self.add_links(ifc_system, gebauede, [vl_strang1_2_out], [t_vl2_in1], name = ["Strang1-2 mit T - Vorlauf"])
                                rel_t2_in_st1_2  = self.add_links(ifc_system, gebauede, [t_rl2_out1], [rl_strang1_2_in], name = ["T mit Strang1-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2_1 = self.add_links(ifc_system, gebauede, [t_vl2_out1], [rohr_v2_in], name = ["T  mit HK2-1 - Vorlauf"])
                                rel_hk2_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl2_in1], name = ["HK2-1 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang1
                                for heizflaeche in hk_1:
                                    if str(heizflaeche) == hk2_1:
                                        rohrlaenge_2 = float(hk_1[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang1_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_1[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_1[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3_1.split(' ')[0]:
                            hzk1_3 = element
                            hzk1_3.Description = "HK3_1"
                            rohr_v3 = hzk1_3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk1_3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl2_out2       = t_vl2.IsNestedBy[0].RelatedObjects[1]
                                t_rl2_in2        = t_rl2.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl2_out_hk3_1 = self.add_links(ifc_system, gebauede, [t_vl2_out2], [rohr_v3_in], name = ["T mit HK3-1 - Strang1 - Vorlauf"])
                                rel_trl2_in_hk3_1  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl2_in2], name = ["HK3-1 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 1 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang1-3
                                t_vl2_out2       = t_vl2.IsNestedBy[0].RelatedObjects[1]
                                t_rl2_in2        = t_rl2.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_3_in  = rohr_strang1_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_3_out = rohr_strang1_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_3 = self.add_links(ifc_system, gebauede, [t_vl2_out2], [vl_strang1_3_in], name = ["T mit Strang1-3 - Vorlauf"])
                                rel_t_in_st1_3  = self.add_links(ifc_system, gebauede, [rl_strang1_3_out], [t_rl2_in2], name = ["Strang1-3 mit T - Ruecklauf"])
                                #Strang1-3 mit T-Stuecke
                                vl_strang1_3_out = rohr_strang1_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_3_in  = rohr_strang1_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl3_out1     = t_vl3.IsNestedBy[0].RelatedObjects[0]
                                t_vl3_in1      = t_vl3.IsNestedBy[0].RelatedObjects[2]
                                t_rl3_out1     = t_rl3.IsNestedBy[0].RelatedObjects[0]
                                t_rl3_in1      = t_rl3.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_3_out_t3 = self.add_links(ifc_system, gebauede, [vl_strang1_3_out], [t_vl3_in1], name = ["Strang1-3 mit T - Vorlauf"])
                                rel_t3_in_st1_3  = self.add_links(ifc_system, gebauede, [t_rl3_out1], [rl_strang1_3_in], name = ["T mit Strang1-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk3_1 = self.add_links(ifc_system, gebauede, [t_vl3_out1], [rohr_v3_in], name = ["T  mit HK3-1 - Vorlauf"])
                                rel_hk3_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl3_in1], name = ["HK3-1 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang1
                                for heizflaeche in hk_1:
                                    if str(heizflaeche) == hk3_1:
                                        rohrlaenge_3 = float(hk_1[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang1_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4_1.split(' ')[0]:
                            hzk1_4 = element
                            hzk1_4.Description = "HK4_1"
                            rohr_v4 = hzk1_4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk1_4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl3_out2       = t_vl3.IsNestedBy[0].RelatedObjects[1]
                                t_rl3_in2        = t_rl3.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl3_out_hk4_1 = self.add_links(ifc_system, gebauede, [t_vl3_out2], [rohr_v4_in], name = ["T mit HK4-1 - Strang1 - Vorlauf"])
                                rel_trl3_in_hk4_1  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl3_in2], name = ["HK4-1 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 1 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang1-4
                                t_vl3_out2       = t_vl3.IsNestedBy[0].RelatedObjects[1]
                                t_rl3_in2        = t_rl3.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_4_in  = rohr_strang1_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_4_out = rohr_strang1_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_4 = self.add_links(ifc_system, gebauede, [t_vl3_out2], [vl_strang1_4_in], name = ["T mit Strang1-4 - Vorlauf"])
                                rel_t_in_st1_4  = self.add_links(ifc_system, gebauede, [rl_strang1_4_out], [t_rl3_in2], name = ["Strang1-4 mit T - Ruecklauf"])
                                #Strang1-4 mit T-Stuecke
                                vl_strang1_4_out = rohr_strang1_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_4_in  = rohr_strang1_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl4_out1     = t_vl4.IsNestedBy[0].RelatedObjects[0]
                                t_vl4_in1      = t_vl4.IsNestedBy[0].RelatedObjects[2]
                                t_rl4_out1     = t_rl4.IsNestedBy[0].RelatedObjects[0]
                                t_rl4_in1      = t_rl4.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_4_out_t4 = self.add_links(ifc_system, gebauede, [vl_strang1_4_out], [t_vl4_in1], name = ["Strang1-4 mit T - Vorlauf"])
                                rel_t4_in_st1_4  = self.add_links(ifc_system, gebauede, [t_rl4_out1], [rl_strang1_4_in], name = ["T mit Strang1-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4_1 = self.add_links(ifc_system, gebauede, [t_vl4_out1], [rohr_v4_in], name = ["T  mit HK4-1 - Vorlauf"])
                                rel_hk4_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl4_in1], name = ["HK4-1 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang1
                                for heizflaeche in hk_1:
                                    if str(heizflaeche) == hk4_1:
                                        rohrlaenge_4 = float(hk_1[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang1_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5_1.split(' ')[0]:
                            hzk1_5 = element
                            hzk1_5.Description = "HK5_1"
                            rohr_v5 = hzk1_5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk1_5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl4_out2       = t_vl4.IsNestedBy[0].RelatedObjects[1]
                                t_rl4_in2        = t_rl4.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl4_out_hk5_1 = self.add_links(ifc_system, gebauede, [t_vl4_out2], [rohr_v5_in], name = ["T mit HK5-1 - Strang1 - Vorlauf"])
                                rel_trl4_in_hk5_1  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl4_in2], name = ["HK5-1 mit T - Strang1 - Ruecklauf"])
                #strang2
                laengen = []
                anzahl_heizungen = (len(hk_2))
                for heizflaeche in hk_2:
                    laengen.append(float(hk_2[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in hk_2:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                for heizflaeche in hk_2:
                    laengen.append(float(hk_2[str(heizflaeche)][0]))
                laengen.sort()
                if anzahl_heizungen == 1:
                    hk1_2 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1_2 = hks[0]
                    hk2_2 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in hk_2:
                        if float(hk_2[str(heizflaeche)][0]) == laengen[0]:
                            hk1_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2_2 = hks[0]
                    hk3_2 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in hk_2:
                        if float(hk_2[str(heizflaeche)][0]) == laengen[0]:
                            hk1_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_2[str(heizflaeche)][0]) == laengen[1]:
                            hk2_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3_2 = hks[0]
                    hk4_2 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in hk_2:
                        if float(hk_2[str(heizflaeche)][0]) == laengen[0]:
                            hk1_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_2[str(heizflaeche)][0]) == laengen[1]:
                            hk2_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_2[str(heizflaeche)][0]) == laengen[2]:
                            hk3_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4_2 = hks[0]
                    hk5_2 = hks[1]
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1_2.split(' ')[0]:
                        hzk2_1 = element
                        hzk2_1.Description = "HK1_2"
                        rohr_v1 = hzk2_1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk2_1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #knoten2 nur mit hk1 verbinden
                            t_vl_k2_out2 = t_vl_k2.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k2_in2  = t_rl_k2.IsNestedBy[0].RelatedObjects[2]
                            rel_k2_out_hk1_2 = self.add_links(ifc_system, gebauede, [t_vl_k2_out2], [rohr_v1_in], name = ["Knoten2 mit HK1-2 - Strang2 - Vorlauf"])
                            rel_k2_in_hk1_2  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl_k2_in2], name = ["HK1-2 mit Knoten2 - Strang2 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #Knoten2 mit strang 2 verbinden und über t-stueck zu hk 1
                            #Knoten2 mit Strang2
                            t_vl_k2_out2 = t_vl_k2.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k2_in2  = t_rl_k2.IsNestedBy[0].RelatedObjects[2]
                            vl_strang2_in  = rohr_strang2_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang2_out = rohr_strang2_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_k2_out_st2 = self.add_links(ifc_system, gebauede, [t_vl_k2_out2], [vl_strang2_in], name = ["Knoten2 mit Strang2 - Vorlauf"])
                            rel_k2_in_st2  = self.add_links(ifc_system, gebauede, [rl_strang2_out], [t_rl_k2_in2], name = ["Strang2 mit Knoten2 - Ruecklauf"])
                            #Strang2 mit T-Stuecke
                            vl_strang2_out = rohr_strang2_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang2_in  = rohr_strang2_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl6_out1     = t_vl6.IsNestedBy[0].RelatedObjects[0]
                            t_vl6_in1      = t_vl6.IsNestedBy[0].RelatedObjects[2]
                            t_rl6_out1     = t_rl6.IsNestedBy[0].RelatedObjects[0]
                            t_rl6_in1      = t_rl6.IsNestedBy[0].RelatedObjects[1]
                            rel_st2_1_out_t6 = self.add_links(ifc_system, gebauede, [vl_strang2_out], [t_vl6_in1], name = ["Strang2-1 mit T - Vorlauf"])
                            rel_t6_in_st2_1  = self.add_links(ifc_system, gebauede, [t_rl6_out1], [rl_strang2_in], name = ["T mit Strang2-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1_2 = self.add_links(ifc_system, gebauede, [t_vl6_out1], [rohr_v1_in], name = ["T  mit HK1-2 - Vorlauf"])
                            rel_hk1_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl6_in1], name = ["HK1-2 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang2
                            for heizflaeche in hk_2:
                                if str(heizflaeche) == hk1_2:
                                    rohrlaenge_1 = float(hk_2[str(heizflaeche)][0])
                                    for property_set in rohr_strang2_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_2[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2])
                                    for property_set in rohr_strang2_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_2[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2_2.split(' ')[0]:
                            hzk2_2 = element
                            hzk2_2.Description = "HK2_2"
                            rohr_v2 = hzk2_2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk2_2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl6_out2       = t_vl6.IsNestedBy[0].RelatedObjects[1]
                                t_rl6_in2        = t_rl6.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl6_out_hk2_2 = self.add_links(ifc_system, gebauede, [t_vl6_out2], [rohr_v2_in], name = ["T mit HK2-2 - Strang2 - Vorlauf"])
                                rel_trl6_in_hk2_2  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl6_in2], name = ["HK2-2 mit T - Strang2 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 2 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang2-2
                                t_vl6_out2       = t_vl6.IsNestedBy[0].RelatedObjects[1]
                                t_rl6_in2        = t_rl6.IsNestedBy[0].RelatedObjects[2]
                                vl_strang2_2_in  = rohr_strang2_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang2_2_out = rohr_strang2_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st2_2 = self.add_links(ifc_system, gebauede, [t_vl6_out2], [vl_strang2_2_in], name = ["T mit Strang2-2 - Vorlauf"])
                                rel_t_in_st2_2  = self.add_links(ifc_system, gebauede, [rl_strang2_2_out], [t_rl6_in2], name = ["Strang2-2 mit T - Ruecklauf"])
                                #Strang2-2 mit T-Stuecke
                                vl_strang2_2_out = rohr_strang2_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang2_2_in  = rohr_strang2_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl7_out1     = t_vl7.IsNestedBy[0].RelatedObjects[0]
                                t_vl7_in1      = t_vl7.IsNestedBy[0].RelatedObjects[2]
                                t_rl7_out1     = t_rl7.IsNestedBy[0].RelatedObjects[0]
                                t_rl7_in1      = t_rl7.IsNestedBy[0].RelatedObjects[1]
                                rel_st2_2_out_t7 = self.add_links(ifc_system, gebauede, [vl_strang2_2_out], [t_vl7_in1], name = ["Strang2-2 mit T - Vorlauf"])
                                rel_t7_in_st2_2  = self.add_links(ifc_system, gebauede, [t_rl7_out1], [rl_strang2_2_in], name = ["T mit Strang2-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2_2 = self.add_links(ifc_system, gebauede, [t_vl7_out1], [rohr_v2_in], name = ["T  mit HK2-2 - Vorlauf"])
                                rel_hk2_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl7_in1], name = ["HK2-2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang2
                                for heizflaeche in hk_2:
                                    if str(heizflaeche) == hk2_2:
                                        rohrlaenge_2 = float(hk_2[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang2_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_2[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang2_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_2[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3_2.split(' ')[0]:
                            hzk2_2_3 = element
                            hzk2_2_3.Description = "HK3_2"
                            rohr_v3 = hzk2_2_3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk2_2_3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl7_out2       = t_vl7.IsNestedBy[0].RelatedObjects[1]
                                t_rl7_in2        = t_rl7.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl7_out_hk3_2 = self.add_links(ifc_system, gebauede, [t_vl7_out2], [rohr_v3_in], name = ["T mit HK3-2 - Strang2 - Vorlauf"])
                                rel_trl7_in_hk3_2  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl7_in2], name = ["HK3-2 mit T - Strang2 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 2 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang2-3
                                t_vl7_out2       = t_vl7.IsNestedBy[0].RelatedObjects[1]
                                t_rl7_in2        = t_rl7.IsNestedBy[0].RelatedObjects[2]
                                vl_strang2_3_in  = rohr_strang2_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang2_3_out = rohr_strang2_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st2_3 = self.add_links(ifc_system, gebauede, [t_vl7_out2], [vl_strang2_3_in], name = ["T mit Strang2-3 - Vorlauf"])
                                rel_t_in_st2_3  = self.add_links(ifc_system, gebauede, [rl_strang2_3_out], [t_rl7_in2], name = ["Strang2-3 mit T - Ruecklauf"])
                                #Strang2-3 mit T-Stuecke
                                vl_strang2_3_out = rohr_strang2_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang2_3_in  = rohr_strang2_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl8_out1     = t_vl8.IsNestedBy[0].RelatedObjects[0]
                                t_vl8_in1      = t_vl8.IsNestedBy[0].RelatedObjects[2]
                                t_rl8_out1     = t_rl8.IsNestedBy[0].RelatedObjects[0]
                                t_rl8_in1      = t_rl8.IsNestedBy[0].RelatedObjects[1]
                                rel_st2_3_out_t8 = self.add_links(ifc_system, gebauede, [vl_strang2_3_out], [t_vl8_in1], name = ["Strang2-3 mit T - Vorlauf"])
                                rel_t8_in_st2_3  = self.add_links(ifc_system, gebauede, [t_rl8_out1], [rl_strang2_3_in], name = ["T mit Strang2-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk3_2 = self.add_links(ifc_system, gebauede, [t_vl8_out1], [rohr_v3_in], name = ["T  mit HK3-2 - Vorlauf"])
                                rel_hk3_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl8_in1], name = ["HK3-2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang2
                                for heizflaeche in hk_2:
                                    if str(heizflaeche) == hk3_2:
                                        rohrlaenge_3 = float(hk_2[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang2_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang2_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4_2.split(' ')[0]:
                            hzk2_2_4 = element
                            hzk2_2_4.Description = "HK4_2"
                            rohr_v4 = hzk2_2_4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk2_2_4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl8_out2       = t_vl8.IsNestedBy[0].RelatedObjects[1]
                                t_rl8_in2        = t_rl8.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl8_out_hk4_2 = self.add_links(ifc_system, gebauede, [t_vl8_out2], [rohr_v4_in], name = ["T mit HK4-2 - Strang2 - Vorlauf"])
                                rel_trl8_in_hk4_2  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl8_in2], name = ["HK4-2 mit T - Strang2 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 2 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang2-4
                                t_vl8_out2       = t_vl8.IsNestedBy[0].RelatedObjects[1]
                                t_rl8_in2        = t_rl8.IsNestedBy[0].RelatedObjects[2]
                                vl_strang2_4_in  = rohr_strang2_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang2_4_out = rohr_strang2_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st2_4 = self.add_links(ifc_system, gebauede, [t_vl8_out2], [vl_strang2_4_in], name = ["T mit Strang2-4 - Vorlauf"])
                                rel_t_in_st2_4  = self.add_links(ifc_system, gebauede, [rl_strang2_4_out], [t_rl8_in2], name = ["Strang2-4 mit T - Ruecklauf"])
                                #Strang2-4 mit T-Stuecke
                                vl_strang2_4_out = rohr_strang2_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang2_4_in  = rohr_strang2_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl9_out1     = t_vl9.IsNestedBy[0].RelatedObjects[0]
                                t_vl9_in1      = t_vl9.IsNestedBy[0].RelatedObjects[2]
                                t_rl9_out1     = t_rl9.IsNestedBy[0].RelatedObjects[0]
                                t_rl9_in1      = t_rl9.IsNestedBy[0].RelatedObjects[1]
                                rel_st2_4_out_t9 = self.add_links(ifc_system, gebauede, [vl_strang2_4_out], [t_vl9_in1], name = ["Strang2-4 mit T - Vorlauf"])
                                rel_t9_in_st2_4  = self.add_links(ifc_system, gebauede, [t_rl9_out1], [rl_strang2_4_in], name = ["T mit Strang2-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4_2 = self.add_links(ifc_system, gebauede, [t_vl9_out1], [rohr_v4_in], name = ["T  mit HK4-2 - Vorlauf"])
                                rel_hk4_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl9_in1], name = ["HK4-2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang2
                                for heizflaeche in hk_2:
                                    if str(heizflaeche) == hk4_2:
                                        rohrlaenge_4 = float(hk_2[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang2_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang2_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5_2.split(' ')[0]:
                            hzk2_2_5 = element
                            hzk2_2_5.Description = "HK5_2"
                            rohr_v5 = hzk2_2_5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk2_2_5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl9_out2       = t_vl9.IsNestedBy[0].RelatedObjects[1]
                                t_rl9_in2        = t_rl9.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl9_out_hk5_2 = self.add_links(ifc_system, gebauede, [t_vl9_out2], [rohr_v5_in], name = ["T mit HK5-2 - Strang2 - Vorlauf"])
                                rel_trl9_in_hk5_2  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl9_in2], name = ["HK5-2 mit T - Strang2 - Ruecklauf"])
                #strang3
                laengen = []
                anzahl_heizungen = (len(hk_3))
                for heizflaeche in hk_3:
                    laengen.append(float(hk_3[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in hk_3:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                for heizflaeche in hk_3:
                    laengen.append(float(hk_3[str(heizflaeche)][0]))
                laengen.sort()
                if anzahl_heizungen == 1:
                    hk1_3 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1_3 = hks[0]
                    hk2_3 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in hk_3:
                        if float(hk_3[str(heizflaeche)][0]) == laengen[0]:
                            hk1_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2_3 = hks[0]
                    hk3_3 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in hk_3:
                        if float(hk_3[str(heizflaeche)][0]) == laengen[0]:
                            hk1_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_3[str(heizflaeche)][0]) == laengen[1]:
                            hk2_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3_3 = hks[0]
                    hk4_3 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in hk_3:
                        if float(hk_3[str(heizflaeche)][0]) == laengen[0]:
                            hk1_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_3[str(heizflaeche)][0]) == laengen[1]:
                            hk2_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_3[str(heizflaeche)][0]) == laengen[2]:
                            hk3_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4_3 = hks[0]
                    hk5_3 = hks[1]
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1_3.split(' ')[0]:
                        hzk1 = element
                        hzk1.Description = "HK1_3"
                        rohr_v1 = hzk1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #knoten1 nur mit hk1 verbinden
                            t_vl_k1_out2 = t_vl_k1.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k1_in2  = t_rl_k1.IsNestedBy[0].RelatedObjects[2]
                            rel_k1_out_hk1_3 = self.add_links(ifc_system, gebauede, [t_vl_k1_out2], [rohr_v1_in], name = ["Knoten1 mit HK1-3 - Strang3 - Vorlauf"])
                            rel_k1_in_hk1_3  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl_k1_in2], name = ["HK1-3 mit Knoten1 - Strang3 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #Knoten1 mit strang 3 verbinden und über t-stueck zu hk 1
                            #Knoten1 mit Strang3
                            t_vl_k1_out2 = t_vl_k1.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k1_in2  = t_rl_k1.IsNestedBy[0].RelatedObjects[2]
                            vl_strang3_in  = rohr_strang3_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang3_out = rohr_strang3_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_k1_out_st3 = self.add_links(ifc_system, gebauede, [t_vl_k1_out2], [vl_strang3_in], name = ["Knoten1 mit Strang3 - Vorlauf"])
                            rel_k1_in_st3  = self.add_links(ifc_system, gebauede, [rl_strang3_out], [t_rl_k1_in2], name = ["Strang3 mit Knoten1 - Ruecklauf"])
                            #Strang3 mit T-Stuecke
                            vl_strang3_out = rohr_strang3_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang3_in  = rohr_strang3_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl11_out1     = t_vl11.IsNestedBy[0].RelatedObjects[0]
                            t_vl11_in1      = t_vl11.IsNestedBy[0].RelatedObjects[2]
                            t_rl11_out1     = t_rl11.IsNestedBy[0].RelatedObjects[0]
                            t_rl11_in1      = t_rl11.IsNestedBy[0].RelatedObjects[1]
                            rel_st3_1_out_t11 = self.add_links(ifc_system, gebauede, [vl_strang3_out], [t_vl11_in1], name = ["Strang3-1 mit T - Vorlauf"])
                            rel_t11_in_st3_1  = self.add_links(ifc_system, gebauede, [t_rl11_out1], [rl_strang3_in], name = ["T mit Strang3-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1_3 = self.add_links(ifc_system, gebauede, [t_vl11_out1], [rohr_v1_in], name = ["T  mit HK1-3 - Vorlauf"])
                            rel_hk1_3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl11_in1], name = ["HK1-3 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang3
                            for heizflaeche in hk_3:
                                if str(heizflaeche) == hk1_3:
                                    rohrlaenge_1 = float(hk_3[str(heizflaeche)][0])
                                    for property_set in rohr_strang3_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_3[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2])
                                    for property_set in rohr_strang3_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_3[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2_3.split(' ')[0]:
                            hzk2 = element
                            hzk2.Description = "HK2_3"
                            rohr_v2 = hzk2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl11_out2       = t_vl11.IsNestedBy[0].RelatedObjects[1]
                                t_rl11_in2        = t_rl11.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl11_out_hk2_3 = self.add_links(ifc_system, gebauede, [t_vl11_out2], [rohr_v2_in], name = ["T mit HK2-3 - Strang3 - Vorlauf"])
                                rel_trl11_in_hk2_3  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl11_in2], name = ["HK2-3 mit T - Strang3 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 3 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang3-2
                                t_vl11_out2       = t_vl11.IsNestedBy[0].RelatedObjects[1]
                                t_rl11_in2        = t_rl11.IsNestedBy[0].RelatedObjects[2]
                                vl_strang3_2_in  = rohr_strang3_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang3_2_out = rohr_strang3_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st3_2 = self.add_links(ifc_system, gebauede, [t_vl11_out2], [vl_strang3_2_in], name = ["T mit Strang3-2 - Vorlauf"])
                                rel_t_in_st3_2  = self.add_links(ifc_system, gebauede, [rl_strang3_2_out], [t_rl11_in2], name = ["Strang3-2 mit T - Ruecklauf"])
                                #Strang2-3 mit T-Stuecke
                                vl_strang3_2_out = rohr_strang3_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang3_2_in  = rohr_strang3_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl12_out1     = t_vl12.IsNestedBy[0].RelatedObjects[0]
                                t_vl12_in1      = t_vl12.IsNestedBy[0].RelatedObjects[2]
                                t_rl12_out1     = t_rl12.IsNestedBy[0].RelatedObjects[0]
                                t_rl12_in1      = t_rl12.IsNestedBy[0].RelatedObjects[1]
                                rel_st3_2_out_t12 = self.add_links(ifc_system, gebauede, [vl_strang3_2_out], [t_vl12_in1], name = ["Strang3-2 mit T - Vorlauf"])
                                rel_t12_in_st3_2  = self.add_links(ifc_system, gebauede, [t_rl12_out1], [rl_strang3_2_in], name = ["T mit Strang3-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2_3 = self.add_links(ifc_system, gebauede, [t_vl12_out1], [rohr_v2_in], name = ["T  mit HK2-3 - Vorlauf"])
                                rel_hk2_3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl12_in1], name = ["HK2-3 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang3
                                for heizflaeche in hk_3:
                                    if str(heizflaeche) == hk2_3:
                                        rohrlaenge_2 = float(hk_3[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang3_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_3[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang3_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_3[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3_3.split(' ')[0]:
                            hzk3 = element
                            hzk3.Description = "HK3_3"
                            rohr_v3 = hzk3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl12_out2       = t_vl12.IsNestedBy[0].RelatedObjects[1]
                                t_rl12_in2        = t_rl12.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl12_out_hk3_3 = self.add_links(ifc_system, gebauede, [t_vl12_out2], [rohr_v3_in], name = ["T mit HK3-3 - Strang3 - Vorlauf"])
                                rel_trl12_in_hk3_3  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl12_in2], name = ["HK3-3 mit T - Strang3 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 3 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang3-3
                                t_vl12_out2       = t_vl12.IsNestedBy[0].RelatedObjects[1]
                                t_rl12_in2        = t_rl12.IsNestedBy[0].RelatedObjects[2]
                                vl_strang3_3_in  = rohr_strang3_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang3_3_out = rohr_strang3_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st3_3 = self.add_links(ifc_system, gebauede, [t_vl12_out2], [vl_strang3_3_in], name = ["T mit Strang3-3 - Vorlauf"])
                                rel_t_in_st3_3  = self.add_links(ifc_system, gebauede, [rl_strang3_3_out], [t_rl12_in2], name = ["Strang3-3 mit T - Ruecklauf"])
                                #Strang3-3 mit T-Stuecke
                                vl_strang3_3_out = rohr_strang3_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang3_3_in  = rohr_strang3_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl13_out1     = t_vl13.IsNestedBy[0].RelatedObjects[0]
                                t_vl13_in1      = t_vl13.IsNestedBy[0].RelatedObjects[2]
                                t_rl13_out1     = t_rl13.IsNestedBy[0].RelatedObjects[0]
                                t_rl13_in1      = t_rl13.IsNestedBy[0].RelatedObjects[1]
                                rel_st3_3_out_t13 = self.add_links(ifc_system, gebauede, [vl_strang3_3_out], [t_vl13_in1], name = ["Strang3-3 mit T - Vorlauf"])
                                rel_t13_in_st3_3  = self.add_links(ifc_system, gebauede, [t_rl13_out1], [rl_strang3_3_in], name = ["T mit Strang3-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk3_3 = self.add_links(ifc_system, gebauede, [t_vl13_out1], [rohr_v3_in], name = ["T  mit HK3-3 - Vorlauf"])
                                rel_hk3_3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl13_in1], name = ["HK3-3 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang3
                                for heizflaeche in hk_3:
                                    if str(heizflaeche) == hk3_3:
                                        rohrlaenge_3 = float(hk_3[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang3_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang3_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4_3.split(' ')[0]:
                            hzk4 = element
                            hzk4.Description = "HK4_3"
                            rohr_v4 = hzk4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl13_out2       = t_vl13.IsNestedBy[0].RelatedObjects[1]
                                t_rl13_in2        = t_rl13.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl13_out_hk4_3 = self.add_links(ifc_system, gebauede, [t_vl13_out2], [rohr_v4_in], name = ["T mit HK4-3 - Strang3 - Vorlauf"])
                                rel_trl13_in_hk4_3  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl13_in2], name = ["HK4-3 mit T - Strang3 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 3 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang3-4
                                t_vl13_out2       = t_vl13.IsNestedBy[0].RelatedObjects[1]
                                t_rl13_in2        = t_rl13.IsNestedBy[0].RelatedObjects[2]
                                vl_strang3_4_in  = rohr_strang3_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang3_4_out = rohr_strang3_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st3_4 = self.add_links(ifc_system, gebauede, [t_vl13_out2], [vl_strang3_4_in], name = ["T mit Strang3-4 - Vorlauf"])
                                rel_t_in_st3_4  = self.add_links(ifc_system, gebauede, [rl_strang3_4_out], [t_rl13_in2], name = ["Strang3-4 mit T - Ruecklauf"])
                                #Strang3-4 mit T-Stuecke
                                vl_strang3_4_out = rohr_strang3_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang3_4_in  = rohr_strang3_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl14_out1     = t_vl14.IsNestedBy[0].RelatedObjects[0]
                                t_vl14_in1      = t_vl14.IsNestedBy[0].RelatedObjects[2]
                                t_rl14_out1     = t_rl14.IsNestedBy[0].RelatedObjects[0]
                                t_rl14_in1      = t_rl14.IsNestedBy[0].RelatedObjects[1]
                                rel_st3_4_out_t14 = self.add_links(ifc_system, gebauede, [vl_strang3_4_out], [t_vl14_in1], name = ["Strang3-4 mit T - Vorlauf"])
                                rel_t14_in_st3_4  = self.add_links(ifc_system, gebauede, [t_rl14_out1], [rl_strang3_4_in], name = ["T mit Strang3-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4_3 = self.add_links(ifc_system, gebauede, [t_vl14_out1], [rohr_v4_in], name = ["T  mit HK4-3 - Vorlauf"])
                                rel_hk4_3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl14_in1], name = ["HK4-3 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang2
                                for heizflaeche in hk_3:
                                    if str(heizflaeche) == hk4_3:
                                        rohrlaenge_4 = float(hk_3[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang3_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang3_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5_3.split(' ')[0]:
                            hzk5 = element
                            hzk5.Description = "HK5_3"
                            rohr_v5 = hzk5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl14_out2       = t_vl14.IsNestedBy[0].RelatedObjects[1]
                                t_rl14_in2        = t_rl14.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl14_out_hk5_3 = self.add_links(ifc_system, gebauede, [t_vl14_out2], [rohr_v5_in], name = ["T mit HK5-3 - Strang3 - Vorlauf"])
                                rel_trl14_in_hk5_3  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl14_in2], name = ["HK5-3 mit T - Strang3 - Ruecklauf"])
            
            elif int(self.app.heizkreis_hk) == 4:
                hk_1 = {}
                hk_2 = {}
                hk_3 = {}
                hk_4 = {}
                for heizflaeche in rohrdaten:
                    if int(rohrdaten[heizflaeche][3]) == 1:
                        hk_1[heizflaeche] = rohrdaten[heizflaeche]
                    elif int(rohrdaten[heizflaeche][3]) == 2:
                        hk_2[heizflaeche] = rohrdaten[heizflaeche]
                    elif int(rohrdaten[heizflaeche][3]) == 3:
                        hk_3[heizflaeche] = rohrdaten[heizflaeche]
                    elif int(rohrdaten[heizflaeche][3]) == 4:
                        hk_4[heizflaeche] = rohrdaten[heizflaeche]
                hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
                for hvac in hvac_components:
                    if 'Verteiler-Heizkreis' in hvac.Name:
                        vt = hvac
                    elif 'Rohr - Vorlauf zu Knoten1' in hvac.Name:
                        k1_v = hvac
                    elif 'Rohr - Ruecklauf von Knoten1' in hvac.Name:
                        k1_r = hvac
                    elif 'Rohr - Vorlauf zu Knoten2' in hvac.Name:
                        k2_v = hvac
                    elif 'Rohr - Ruecklauf von Knoten2' in hvac.Name:
                        k2_r = hvac 
                    elif 'Rohr - Vorlauf zu Knoten3' in hvac.Name:
                        k3_v = hvac
                    elif 'Rohr - Ruecklauf von Knoten3' in hvac.Name:
                        k3_r = hvac  
                        
                #verteiler mit knoten 1
                out_vt= vt.IsNestedBy[0].RelatedObjects[2]
                in_vt= vt.IsNestedBy[0].RelatedObjects[3]
                rohr_k1_v_in = k1_v.IsNestedBy[0].RelatedObjects[1]
                rohr_k1_r_out = k1_r.IsNestedBy[0].RelatedObjects[0]
                rel_vt_out_k1 = self.add_links(ifc_system, gebauede, [out_vt], [rohr_k1_v_in], name = ["Verteiler mit K1 - Strang1/2/3/4 - Vorlauf"])
                rel_vt_in_k1  = self.add_links(ifc_system, gebauede, [rohr_k1_r_out], [in_vt], name = ["K1 mit Verteiler - Strang1/2/3/4 - Ruecklauf"])
                for property_set in k1_v.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk1_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk1_d
                for property_set in k1_r.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk1_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk1_d
                #Knoten1 Rohre mit T
                rohr_k1_v_out = k1_v.IsNestedBy[0].RelatedObjects[0]
                rohr_k1_r_in  = k1_r.IsNestedBy[0].RelatedObjects[1]   
                t_vl_k1_in1   = t_vl_k1.IsNestedBy[0].RelatedObjects[2]
                t_rl_k1_out1   = t_rl_k1.IsNestedBy[0].RelatedObjects[0]
                rel_k1_out_t = self.add_links(ifc_system, gebauede, [rohr_k1_v_out], [t_vl_k1_in1], name = ["T mit K1 Rohre - Strang1/2/3/4 - Vorlauf"])
                rel_k1_in_t  = self.add_links(ifc_system, gebauede, [t_rl_k1_out1], [rohr_k1_r_in], name = ["K1 Rohre mit T - Strang1/2/3/4 - Ruecklauf"])   
                #Knoten1 T mit Rohre Knoten2
                t_vl_k1_out1   = t_vl_k1.IsNestedBy[0].RelatedObjects[0]
                t_rl_k1_in1   = t_rl_k1.IsNestedBy[0].RelatedObjects[1]
                rohr_k2_v_in = k2_v.IsNestedBy[0].RelatedObjects[1]
                rohr_k2_r_out = k2_r.IsNestedBy[0].RelatedObjects[0]
                rel_t_out_k2 = self.add_links(ifc_system, gebauede, [t_vl_k1_out1], [rohr_k2_v_in], name = ["T K1 mit K2 - Strang 1/2 - Vorlauf"])
                rel_t_in_k2  = self.add_links(ifc_system, gebauede, [rohr_k2_r_out], [t_rl_k1_in1], name = ["K2 mit T K1 - Strang 1/2 - Ruecklauf"])
                for property_set in k2_v.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk2_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk2_d
                for property_set in k2_r.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk2_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk2_d
                #Knoten2 Rohre mit T
                rohr_k2_v_out = k2_v.IsNestedBy[0].RelatedObjects[0]
                rohr_k2_r_in  = k2_r.IsNestedBy[0].RelatedObjects[1]   
                t_vl_k2_in1   = t_vl_k2.IsNestedBy[0].RelatedObjects[2]
                t_rl_k2_out1   = t_rl_k2.IsNestedBy[0].RelatedObjects[0]
                rel_k2_out_t = self.add_links(ifc_system, gebauede, [rohr_k2_v_out], [t_vl_k2_in1], name = ["T mit K2 Rohre - Strang1/2 - Vorlauf"])
                rel_k2_in_t  = self.add_links(ifc_system, gebauede, [t_rl_k2_out1], [rohr_k2_r_in], name = ["K2 Rohre mit T - Strang1/2 - Ruecklauf"])   
                #Knoten1 T mit Rohre Knoten3
                t_vl_k1_out2   = t_vl_k1.IsNestedBy[0].RelatedObjects[1]
                t_rl_k1_in2   = t_rl_k1.IsNestedBy[0].RelatedObjects[2]
                rohr_k3_v_in = k3_v.IsNestedBy[0].RelatedObjects[1]
                rohr_k3_r_out = k3_r.IsNestedBy[0].RelatedObjects[0]
                rel_t_out_k3 = self.add_links(ifc_system, gebauede, [t_vl_k1_out2], [rohr_k3_v_in], name = ["T K1 mit K3 - Strang 3/4 - Vorlauf"])
                rel_t_in_k3  = self.add_links(ifc_system, gebauede, [rohr_k3_r_out], [t_rl_k1_in2], name = ["K3 mit T K1 - Strang 3/4 - Ruecklauf"])
                for property_set in k3_v.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk3_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk3_d
                for property_set in k3_r.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                        property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = self.app.rohrk3_l*1000
                        property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = self.app.rohrk3_d
                #Knoten3 Rohre mit T
                rohr_k3_v_out = k3_v.IsNestedBy[0].RelatedObjects[0]
                rohr_k3_r_in  = k3_r.IsNestedBy[0].RelatedObjects[1]   
                t_vl_k3_in1   = t_vl_k3.IsNestedBy[0].RelatedObjects[2]
                t_rl_k3_out1   = t_rl_k3.IsNestedBy[0].RelatedObjects[0]
                rel_k3_out_t = self.add_links(ifc_system, gebauede, [rohr_k3_v_out], [t_vl_k3_in1], name = ["T mit K3 Rohre - Strang3/4 - Vorlauf"])
                rel_k3_in_t  = self.add_links(ifc_system, gebauede, [t_rl_k3_out1], [rohr_k3_r_in], name = ["K3 Rohre mit T - Strang3/4 - Ruecklauf"])                  
                #strang1
                laengen = []
                anzahl_heizungen = (len(hk_1))
                for heizflaeche in hk_1:
                    laengen.append(float(hk_1[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in hk_1:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                for heizflaeche in hk_1:
                    laengen.append(float(hk_1[str(heizflaeche)][0]))
                laengen.sort()
                if anzahl_heizungen == 1:
                    hk1_1 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1_1 = hks[0]
                    hk2_1 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in hk_1:
                        if float(hk_1[str(heizflaeche)][0]) == laengen[0]:
                            hk1_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2_1 = hks[0]
                    hk3_1 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in hk_1:
                        if float(hk_1[str(heizflaeche)][0]) == laengen[0]:
                            hk1_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_1[str(heizflaeche)][0]) == laengen[1]:
                            hk2_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3_1 = hks[0]
                    hk4_1 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in hk_1:
                        if float(hk_1[str(heizflaeche)][0]) == laengen[0]:
                            hk1_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_1[str(heizflaeche)][0]) == laengen[1]:
                            hk2_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_1[str(heizflaeche)][0]) == laengen[2]:
                            hk3_1 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4_1 = hks[0]
                    hk5_1 = hks[1]
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1_1.split(' ')[0]:
                        hzk1 = element
                        hzk1.Description = "HK1_1"
                        rohr_v1 = hzk1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #knoten2 nur mit hk1 verbinden
                            t_vl_k2_out1 = t_vl_k2.IsNestedBy[0].RelatedObjects[0]
                            t_rl_k2_in1  = t_rl_k2.IsNestedBy[0].RelatedObjects[1]
                            rel_k2_out_hk1_1 = self.add_links(ifc_system, gebauede, [t_vl_k2_out1], [rohr_v1_in], name = ["Knoten2 mit HK1-1 - Strang1 - Vorlauf"])
                            rel_k2_in_hk1_1  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl_k2_in1], name = ["HK1-1 mit Knoten2 - Strang1 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #Knoten1 mit strang 1 verbinden und über t-stueck zu hk 1
                            #Knoten2 mit Strang1
                            t_vl_k2_out1 = t_vl_k2.IsNestedBy[0].RelatedObjects[0]
                            t_rl_k2_in1  = t_rl_k2.IsNestedBy[0].RelatedObjects[1]
                            vl_strang1_in  = rohr_strang1_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang1_out = rohr_strang1_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_k2_out_st1 = self.add_links(ifc_system, gebauede, [t_vl_k2_out1], [vl_strang1_in], name = ["Knoten2 mit Strang1 - Vorlauf"])
                            rel_k2_in_st1  = self.add_links(ifc_system, gebauede, [rl_strang1_out], [t_rl_k2_in1], name = ["Strang1 mit Knoten2 - Ruecklauf"])
                            #Strang1 mit T-Stuecke
                            vl_strang1_out = rohr_strang1_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang1_in  = rohr_strang1_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl1_out1     = t_vl1.IsNestedBy[0].RelatedObjects[0]
                            t_vl1_in1      = t_vl1.IsNestedBy[0].RelatedObjects[2]
                            t_rl1_out1     = t_rl1.IsNestedBy[0].RelatedObjects[0]
                            t_rl1_in1      = t_rl1.IsNestedBy[0].RelatedObjects[1]
                            rel_st1_1_out_t1 = self.add_links(ifc_system, gebauede, [vl_strang1_out], [t_vl1_in1], name = ["Strang1-1 mit T - Vorlauf"])
                            rel_t1_in_st1_1  = self.add_links(ifc_system, gebauede, [t_rl1_out1], [rl_strang1_in], name = ["T mit Strang1-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1_1 = self.add_links(ifc_system, gebauede, [t_vl1_out1], [rohr_v1_in], name = ["T  mit HK1-1 - Vorlauf"])
                            rel_hk1_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl1_in1], name = ["HK1-1 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang1
                            for heizflaeche in hk_1:
                                if str(heizflaeche) == hk1_1:
                                    rohrlaenge_1 = float(hk_1[str(heizflaeche)][0])
                                    for property_set in rohr_strang1_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_1[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2])
                                    for property_set in rohr_strang1_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_1[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2_1.split(' ')[0]:
                            hzk2 = element
                            hzk2.Description = "HK2_1"
                            rohr_v2 = hzk2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl1_out2       = t_vl1.IsNestedBy[0].RelatedObjects[1]
                                t_rl1_in2        = t_rl1.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl1_out_hk2_1 = self.add_links(ifc_system, gebauede, [t_vl1_out2], [rohr_v2_in], name = ["T mit HK2-1 - Strang1 - Vorlauf"])
                                rel_trl1_in_hk2_1  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl1_in2], name = ["HK2-1 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 1 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang1-2
                                t_vl1_out2       = t_vl1.IsNestedBy[0].RelatedObjects[1]
                                t_rl1_in2        = t_rl1.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_2_in  = rohr_strang1_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_2_out = rohr_strang1_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_2 = self.add_links(ifc_system, gebauede, [t_vl1_out2], [vl_strang1_2_in], name = ["T mit Strang1-2 - Vorlauf"])
                                rel_t_in_st1_2  = self.add_links(ifc_system, gebauede, [rl_strang1_2_out], [t_rl1_in2], name = ["Strang1-2 mit T - Ruecklauf"])
                                #Strang1-2 mit T-Stuecke
                                vl_strang1_2_out = rohr_strang1_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_2_in  = rohr_strang1_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl2_out1     = t_vl2.IsNestedBy[0].RelatedObjects[0]
                                t_vl2_in1      = t_vl2.IsNestedBy[0].RelatedObjects[2]
                                t_rl2_out1     = t_rl2.IsNestedBy[0].RelatedObjects[0]
                                t_rl2_in1      = t_rl2.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_2_out_t2 = self.add_links(ifc_system, gebauede, [vl_strang1_2_out], [t_vl2_in1], name = ["Strang1-2 mit T - Vorlauf"])
                                rel_t2_in_st1_2  = self.add_links(ifc_system, gebauede, [t_rl2_out1], [rl_strang1_2_in], name = ["T mit Strang1-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2_1 = self.add_links(ifc_system, gebauede, [t_vl2_out1], [rohr_v2_in], name = ["T  mit HK2-1 - Vorlauf"])
                                rel_hk2_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl2_in1], name = ["HK2-1 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang1
                                for heizflaeche in hk_1:
                                    if str(heizflaeche) == hk2_1:
                                        rohrlaenge_2 = float(hk_1[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang1_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_1[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_1[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3_1.split(' ')[0]:
                            hzk3 = element
                            hzk3.Description = "HK3_1"
                            rohr_v3 = hzk3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl2_out2       = t_vl2.IsNestedBy[0].RelatedObjects[1]
                                t_rl2_in2        = t_rl2.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl2_out_hk3_1 = self.add_links(ifc_system, gebauede, [t_vl2_out2], [rohr_v3_in], name = ["T mit HK3-1 - Strang1 - Vorlauf"])
                                rel_trl2_in_hk3_1  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl2_in2], name = ["HK3-1 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 1 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang1-3
                                t_vl2_out2       = t_vl2.IsNestedBy[0].RelatedObjects[1]
                                t_rl2_in2        = t_rl2.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_3_in  = rohr_strang1_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_3_out = rohr_strang1_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_3 = self.add_links(ifc_system, gebauede, [t_vl2_out2], [vl_strang1_3_in], name = ["T mit Strang1-3 - Vorlauf"])
                                rel_t_in_st1_3  = self.add_links(ifc_system, gebauede, [rl_strang1_3_out], [t_rl2_in2], name = ["Strang1-3 mit T - Ruecklauf"])
                                #Strang1-3 mit T-Stuecke
                                vl_strang1_3_out = rohr_strang1_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_3_in  = rohr_strang1_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl3_out1     = t_vl3.IsNestedBy[0].RelatedObjects[0]
                                t_vl3_in1      = t_vl3.IsNestedBy[0].RelatedObjects[2]
                                t_rl3_out1     = t_rl3.IsNestedBy[0].RelatedObjects[0]
                                t_rl3_in1      = t_rl3.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_3_out_t3 = self.add_links(ifc_system, gebauede, [vl_strang1_3_out], [t_vl3_in1], name = ["Strang1-3 mit T - Vorlauf"])
                                rel_t3_in_st1_3  = self.add_links(ifc_system, gebauede, [t_rl3_out1], [rl_strang1_3_in], name = ["T mit Strang1-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk3_1 = self.add_links(ifc_system, gebauede, [t_vl3_out1], [rohr_v3_in], name = ["T  mit HK3-1 - Vorlauf"])
                                rel_hk3_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl3_in1], name = ["HK3-1 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang1
                                for heizflaeche in hk_1:
                                    if str(heizflaeche) == hk3_1:
                                        rohrlaenge_3 = float(hk_1[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang1_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4_1.split(' ')[0]:
                            hzk4 = element
                            hzk4.Description = "HK4_1"
                            rohr_v4 = hzk4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl3_out2       = t_vl3.IsNestedBy[0].RelatedObjects[1]
                                t_rl3_in2        = t_rl3.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl3_out_hk4_1 = self.add_links(ifc_system, gebauede, [t_vl3_out2], [rohr_v4_in], name = ["T mit HK4-1 - Strang1 - Vorlauf"])
                                rel_trl3_in_hk4_1  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl3_in2], name = ["HK4-1 mit T - Strang1 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 1 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang1-4
                                t_vl3_out2       = t_vl3.IsNestedBy[0].RelatedObjects[1]
                                t_rl3_in2        = t_rl3.IsNestedBy[0].RelatedObjects[2]
                                vl_strang1_4_in  = rohr_strang1_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang1_4_out = rohr_strang1_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st1_4 = self.add_links(ifc_system, gebauede, [t_vl3_out2], [vl_strang1_4_in], name = ["T mit Strang1-4 - Vorlauf"])
                                rel_t_in_st1_4  = self.add_links(ifc_system, gebauede, [rl_strang1_4_out], [t_rl3_in2], name = ["Strang1-4 mit T - Ruecklauf"])
                                #Strang1-4 mit T-Stuecke
                                vl_strang1_4_out = rohr_strang1_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang1_4_in  = rohr_strang1_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl4_out1     = t_vl4.IsNestedBy[0].RelatedObjects[0]
                                t_vl4_in1      = t_vl4.IsNestedBy[0].RelatedObjects[2]
                                t_rl4_out1     = t_rl4.IsNestedBy[0].RelatedObjects[0]
                                t_rl4_in1      = t_rl4.IsNestedBy[0].RelatedObjects[1]
                                rel_st1_4_out_t4 = self.add_links(ifc_system, gebauede, [vl_strang1_4_out], [t_vl4_in1], name = ["Strang1-4 mit T - Vorlauf"])
                                rel_t4_in_st1_4  = self.add_links(ifc_system, gebauede, [t_rl4_out1], [rl_strang1_4_in], name = ["T mit Strang1-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4_1 = self.add_links(ifc_system, gebauede, [t_vl4_out1], [rohr_v4_in], name = ["T  mit HK4-1 - Vorlauf"])
                                rel_hk4_1_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl4_in1], name = ["HK4-1 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang1
                                for heizflaeche in hk_1:
                                    if str(heizflaeche) == hk4_1:
                                        rohrlaenge_4 = float(hk_1[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang1_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang1_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_1[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5_1.split(' ')[0]:
                            hzk5 = element
                            hzk5.Description = "HK5_1"
                            rohr_v5 = hzk5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl4_out2       = t_vl4.IsNestedBy[0].RelatedObjects[1]
                                t_rl4_in2        = t_rl4.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl4_out_hk5_1 = self.add_links(ifc_system, gebauede, [t_vl4_out2], [rohr_v5_in], name = ["T mit HK5-1 - Strang1 - Vorlauf"])
                                rel_trl4_in_hk5_1  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl4_in2], name = ["HK5-1 mit T - Strang1 - Ruecklauf"])
                #strang2
                laengen = []
                anzahl_heizungen = (len(hk_2))
                for heizflaeche in hk_2:
                    laengen.append(float(hk_2[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in hk_2:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                for heizflaeche in hk_2:
                    laengen.append(float(hk_2[str(heizflaeche)][0]))
                laengen.sort()
                if anzahl_heizungen == 1:
                    hk1_2 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1_2 = hks[0]
                    hk2_2 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in hk_2:
                        if float(hk_2[str(heizflaeche)][0]) == laengen[0]:
                            hk1_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2_2 = hks[0]
                    hk3_2 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in hk_2:
                        if float(hk_2[str(heizflaeche)][0]) == laengen[0]:
                            hk1_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_2[str(heizflaeche)][0]) == laengen[1]:
                            hk2_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3_2 = hks[0]
                    hk4_2 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in hk_2:
                        if float(hk_2[str(heizflaeche)][0]) == laengen[0]:
                            hk1_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_2[str(heizflaeche)][0]) == laengen[1]:
                            hk2_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_2[str(heizflaeche)][0]) == laengen[2]:
                            hk3_2 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4_2 = hks[0]
                    hk5_2 = hks[1]
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1_2.split(' ')[0]:
                        hzk1 = element
                        hzk1.Description = "HK1_2"
                        rohr_v1 = hzk1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #knoten2 nur mit hk1 verbinden
                            t_vl_k2_out2 = t_vl_k2.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k2_in2  = t_rl_k2.IsNestedBy[0].RelatedObjects[2]
                            rel_k2_out_hk1_2 = self.add_links(ifc_system, gebauede, [t_vl_k2_out2], [rohr_v1_in], name = ["Knoten2 mit HK1-2 - Strang2 - Vorlauf"])
                            rel_k2_in_hk1_2  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl_k2_in2], name = ["HK1-2 mit Knoten2 - Strang2 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #Knoten2 mit strang 2 verbinden und über t-stueck zu hk 1
                            #Knoten2 mit Strang2
                            t_vl_k2_out2 = t_vl_k2.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k2_in2  = t_rl_k2.IsNestedBy[0].RelatedObjects[2]
                            vl_strang2_in  = rohr_strang2_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang2_out = rohr_strang2_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_k2_out_st2 = self.add_links(ifc_system, gebauede, [t_vl_k2_out2], [vl_strang2_in], name = ["Knoten2 mit Strang2 - Vorlauf"])
                            rel_k2_in_st2  = self.add_links(ifc_system, gebauede, [rl_strang2_out], [t_rl_k2_in2], name = ["Strang2 mit Knoten2 - Ruecklauf"])
                            #Strang2 mit T-Stuecke
                            vl_strang2_out = rohr_strang2_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang2_in  = rohr_strang2_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl6_out1     = t_vl6.IsNestedBy[0].RelatedObjects[0]
                            t_vl6_in1      = t_vl6.IsNestedBy[0].RelatedObjects[2]
                            t_rl6_out1     = t_rl6.IsNestedBy[0].RelatedObjects[0]
                            t_rl6_in1      = t_rl6.IsNestedBy[0].RelatedObjects[1]
                            rel_st2_1_out_t6 = self.add_links(ifc_system, gebauede, [vl_strang2_out], [t_vl6_in1], name = ["Strang2-1 mit T - Vorlauf"])
                            rel_t6_in_st2_1  = self.add_links(ifc_system, gebauede, [t_rl6_out1], [rl_strang2_in], name = ["T mit Strang2-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1_2 = self.add_links(ifc_system, gebauede, [t_vl6_out1], [rohr_v1_in], name = ["T  mit HK1-2 - Vorlauf"])
                            rel_hk1_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl6_in1], name = ["HK1-2 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang2
                            for heizflaeche in hk_2:
                                if str(heizflaeche) == hk1_2:
                                    rohrlaenge_1 = float(hk_2[str(heizflaeche)][0])
                                    for property_set in rohr_strang2_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_2[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2])
                                    for property_set in rohr_strang2_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_2[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2_2.split(' ')[0]:
                            hzk2 = element
                            hzk2.Description = "HK2_2"
                            rohr_v2 = hzk2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl6_out2       = t_vl6.IsNestedBy[0].RelatedObjects[1]
                                t_rl6_in2        = t_rl6.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl6_out_hk2_2 = self.add_links(ifc_system, gebauede, [t_vl6_out2], [rohr_v2_in], name = ["T mit HK2-2 - Strang2 - Vorlauf"])
                                rel_trl6_in_hk2_2  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl6_in2], name = ["HK2-2 mit T - Strang2 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 2 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang2-2
                                t_vl6_out2       = t_vl6.IsNestedBy[0].RelatedObjects[1]
                                t_rl6_in2        = t_rl6.IsNestedBy[0].RelatedObjects[2]
                                vl_strang2_2_in  = rohr_strang2_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang2_2_out = rohr_strang2_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st2_2 = self.add_links(ifc_system, gebauede, [t_vl6_out2], [vl_strang2_2_in], name = ["T mit Strang2-2 - Vorlauf"])
                                rel_t_in_st2_2  = self.add_links(ifc_system, gebauede, [rl_strang2_2_out], [t_rl6_in2], name = ["Strang2-2 mit T - Ruecklauf"])
                                #Strang2-2 mit T-Stuecke
                                vl_strang2_2_out = rohr_strang2_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang2_2_in  = rohr_strang2_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl7_out1     = t_vl7.IsNestedBy[0].RelatedObjects[0]
                                t_vl7_in1      = t_vl7.IsNestedBy[0].RelatedObjects[2]
                                t_rl7_out1     = t_rl7.IsNestedBy[0].RelatedObjects[0]
                                t_rl7_in1      = t_rl7.IsNestedBy[0].RelatedObjects[1]
                                rel_st2_2_out_t7 = self.add_links(ifc_system, gebauede, [vl_strang2_2_out], [t_vl7_in1], name = ["Strang2-2 mit T - Vorlauf"])
                                rel_t7_in_st2_2  = self.add_links(ifc_system, gebauede, [t_rl7_out1], [rl_strang2_2_in], name = ["T mit Strang2-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2_2 = self.add_links(ifc_system, gebauede, [t_vl7_out1], [rohr_v2_in], name = ["T  mit HK2-2 - Vorlauf"])
                                rel_hk2_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl7_in1], name = ["HK2-2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang2
                                for heizflaeche in hk_2:
                                    if str(heizflaeche) == hk2_2:
                                        rohrlaenge_2 = float(hk_2[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang2_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_2[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang2_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_2[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3_2.split(' ')[0]:
                            hzk3 = element
                            hzk3.Description = "HK3_2"
                            rohr_v3 = hzk3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl7_out2       = t_vl7.IsNestedBy[0].RelatedObjects[1]
                                t_rl7_in2        = t_rl7.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl7_out_hk3_2 = self.add_links(ifc_system, gebauede, [t_vl7_out2], [rohr_v3_in], name = ["T mit HK3-2 - Strang2 - Vorlauf"])
                                rel_trl7_in_hk3_2  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl7_in2], name = ["HK3-2 mit T - Strang2 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 2 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang2-3
                                t_vl7_out2       = t_vl7.IsNestedBy[0].RelatedObjects[1]
                                t_rl7_in2        = t_rl7.IsNestedBy[0].RelatedObjects[2]
                                vl_strang2_3_in  = rohr_strang2_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang2_3_out = rohr_strang2_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st2_3 = self.add_links(ifc_system, gebauede, [t_vl7_out2], [vl_strang2_3_in], name = ["T mit Strang2-3 - Vorlauf"])
                                rel_t_in_st2_3  = self.add_links(ifc_system, gebauede, [rl_strang2_3_out], [t_rl7_in2], name = ["Strang2-3 mit T - Ruecklauf"])
                                #Strang2-3 mit T-Stuecke
                                vl_strang2_3_out = rohr_strang2_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang2_3_in  = rohr_strang2_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl8_out1     = t_vl8.IsNestedBy[0].RelatedObjects[0]
                                t_vl8_in1      = t_vl8.IsNestedBy[0].RelatedObjects[2]
                                t_rl8_out1     = t_rl8.IsNestedBy[0].RelatedObjects[0]
                                t_rl8_in1      = t_rl8.IsNestedBy[0].RelatedObjects[1]
                                rel_st2_3_out_t8 = self.add_links(ifc_system, gebauede, [vl_strang2_3_out], [t_vl8_in1], name = ["Strang2-3 mit T - Vorlauf"])
                                rel_t8_in_st2_3  = self.add_links(ifc_system, gebauede, [t_rl8_out1], [rl_strang2_3_in], name = ["T mit Strang2-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk3_2 = self.add_links(ifc_system, gebauede, [t_vl8_out1], [rohr_v3_in], name = ["T  mit HK3-2 - Vorlauf"])
                                rel_hk3_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl8_in1], name = ["HK3-2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang2
                                for heizflaeche in hk_2:
                                    if str(heizflaeche) == hk3_2:
                                        rohrlaenge_3 = float(hk_2[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang2_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang2_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4_2.split(' ')[0]:
                            hzk4 = element
                            hzk4.Description = "HK4_2"
                            rohr_v4 = hzk4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl8_out2       = t_vl8.IsNestedBy[0].RelatedObjects[1]
                                t_rl8_in2        = t_rl8.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl8_out_hk4_2 = self.add_links(ifc_system, gebauede, [t_vl8_out2], [rohr_v4_in], name = ["T mit HK4-2 - Strang2 - Vorlauf"])
                                rel_trl8_in_hk4_2  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl8_in2], name = ["HK4-2 mit T - Strang2 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 2 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang2-4
                                t_vl8_out2       = t_vl8.IsNestedBy[0].RelatedObjects[1]
                                t_rl8_in2        = t_rl8.IsNestedBy[0].RelatedObjects[2]
                                vl_strang2_4_in  = rohr_strang2_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang2_4_out = rohr_strang2_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st2_4 = self.add_links(ifc_system, gebauede, [t_vl8_out2], [vl_strang2_4_in], name = ["T mit Strang2-4 - Vorlauf"])
                                rel_t_in_st2_4  = self.add_links(ifc_system, gebauede, [rl_strang2_4_out], [t_rl8_in2], name = ["Strang2-4 mit T - Ruecklauf"])
                                #Strang2-4 mit T-Stuecke
                                vl_strang2_4_out = rohr_strang2_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang2_4_in  = rohr_strang2_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl9_out1     = t_vl9.IsNestedBy[0].RelatedObjects[0]
                                t_vl9_in1      = t_vl9.IsNestedBy[0].RelatedObjects[2]
                                t_rl9_out1     = t_rl9.IsNestedBy[0].RelatedObjects[0]
                                t_rl9_in1      = t_rl9.IsNestedBy[0].RelatedObjects[1]
                                rel_st2_4_out_t9 = self.add_links(ifc_system, gebauede, [vl_strang2_4_out], [t_vl9_in1], name = ["Strang2-4 mit T - Vorlauf"])
                                rel_t9_in_st2_4  = self.add_links(ifc_system, gebauede, [t_rl9_out1], [rl_strang2_4_in], name = ["T mit Strang2-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4_2 = self.add_links(ifc_system, gebauede, [t_vl9_out1], [rohr_v4_in], name = ["T  mit HK4-2 - Vorlauf"])
                                rel_hk4_2_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl9_in1], name = ["HK4-2 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang2
                                for heizflaeche in hk_2:
                                    if str(heizflaeche) == hk4_2:
                                        rohrlaenge_4 = float(hk_2[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang2_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang2_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_2[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5_2.split(' ')[0]:
                            hzk5 = element
                            hzk5.Description = "HK5_2"
                            rohr_v5 = hzk5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl9_out2       = t_vl9.IsNestedBy[0].RelatedObjects[1]
                                t_rl9_in2        = t_rl9.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl9_out_hk5_2 = self.add_links(ifc_system, gebauede, [t_vl9_out2], [rohr_v5_in], name = ["T mit HK5-2 - Strang2 - Vorlauf"])
                                rel_trl9_in_hk5_2  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl9_in2], name = ["HK5-2 mit T - Strang2 - Ruecklauf"])
                #strang3
                laengen = []
                anzahl_heizungen = (len(hk_3))
                for heizflaeche in hk_3:
                    laengen.append(float(hk_3[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in hk_3:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                for heizflaeche in hk_3:
                    laengen.append(float(hk_3[str(heizflaeche)][0]))
                laengen.sort()
                if anzahl_heizungen == 1:
                    hk1_3 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1_3 = hks[0]
                    hk2_3 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in hk_3:
                        if float(hk_3[str(heizflaeche)][0]) == laengen[0]:
                            hk1_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2_3 = hks[0]
                    hk3_3 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in hk_3:
                        if float(hk_3[str(heizflaeche)][0]) == laengen[0]:
                            hk1_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_3[str(heizflaeche)][0]) == laengen[1]:
                            hk2_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3_3 = hks[0]
                    hk4_3 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in hk_3:
                        if float(hk_3[str(heizflaeche)][0]) == laengen[0]:
                            hk1_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_3[str(heizflaeche)][0]) == laengen[1]:
                            hk2_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_3[str(heizflaeche)][0]) == laengen[2]:
                            hk3_3 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4_3 = hks[0]
                    hk5_3 = hks[1]
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1_3.split(' ')[0]:
                        hzk1 = element
                        hzk1.Description = "HK1_3"
                        rohr_v1 = hzk1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #knoten1 nur mit hk1 verbinden
                            t_vl_k3_out1 = t_vl_k3.IsNestedBy[0].RelatedObjects[0]
                            t_rl_k3_in1  = t_rl_k3.IsNestedBy[0].RelatedObjects[1]
                            rel_k3_out_hk1_3 = self.add_links(ifc_system, gebauede, [t_vl_k3_out1], [rohr_v1_in], name = ["Knoten3 mit HK1-3 - Strang3 - Vorlauf"])
                            rel_k3_in_hk1_3  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl_k3_in1], name = ["HK1-3 mit Knoten3 - Strang3 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #Knoten3 mit strang 3 verbinden und über t-stueck zu hk 1
                            #Knoten3 mit Strang3
                            t_vl_k3_out1 = t_vl_k3.IsNestedBy[0].RelatedObjects[0]
                            t_rl_k3_in1  = t_rl_k3.IsNestedBy[0].RelatedObjects[1]
                            vl_strang3_in  = rohr_strang3_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang3_out = rohr_strang3_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_k3_out_st3 = self.add_links(ifc_system, gebauede, [t_vl_k3_out1], [vl_strang3_in], name = ["Knoten3 mit Strang3 - Vorlauf"])
                            rel_k3_in_st3  = self.add_links(ifc_system, gebauede, [rl_strang3_out], [t_rl_k3_in1], name = ["Strang3 mit Knoten3 - Ruecklauf"])
                            #Strang3 mit T-Stuecke
                            vl_strang3_out = rohr_strang3_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang3_in  = rohr_strang3_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl11_out1     = t_vl11.IsNestedBy[0].RelatedObjects[0]
                            t_vl11_in1      = t_vl11.IsNestedBy[0].RelatedObjects[2]
                            t_rl11_out1     = t_rl11.IsNestedBy[0].RelatedObjects[0]
                            t_rl11_in1      = t_rl11.IsNestedBy[0].RelatedObjects[1]
                            rel_st3_1_out_t11 = self.add_links(ifc_system, gebauede, [vl_strang3_out], [t_vl11_in1], name = ["Strang3-1 mit T - Vorlauf"])
                            rel_t11_in_st3_1  = self.add_links(ifc_system, gebauede, [t_rl11_out1], [rl_strang3_in], name = ["T mit Strang3-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1_3 = self.add_links(ifc_system, gebauede, [t_vl11_out1], [rohr_v1_in], name = ["T  mit HK1-3 - Vorlauf"])
                            rel_hk1_3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl11_in1], name = ["HK1-3 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang3
                            for heizflaeche in hk_3:
                                if str(heizflaeche) == hk1_3:
                                    rohrlaenge_1 = float(hk_3[str(heizflaeche)][0])
                                    for property_set in rohr_strang3_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_3[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2])
                                    for property_set in rohr_strang3_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_3[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2_3.split(' ')[0]:
                            hzk2 = element
                            hzk2.Description = "HK2_3"
                            rohr_v2 = hzk2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl11_out2       = t_vl11.IsNestedBy[0].RelatedObjects[1]
                                t_rl11_in2        = t_rl11.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl11_out_hk2_3 = self.add_links(ifc_system, gebauede, [t_vl11_out2], [rohr_v2_in], name = ["T mit HK2-3 - Strang3 - Vorlauf"])
                                rel_trl11_in_hk2_3  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl11_in2], name = ["HK2-3 mit T - Strang3 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 3 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang3-2
                                t_vl11_out2       = t_vl11.IsNestedBy[0].RelatedObjects[1]
                                t_rl11_in2        = t_rl11.IsNestedBy[0].RelatedObjects[2]
                                vl_strang3_2_in  = rohr_strang3_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang3_2_out = rohr_strang3_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st3_2 = self.add_links(ifc_system, gebauede, [t_vl11_out2], [vl_strang3_2_in], name = ["T mit Strang3-2 - Vorlauf"])
                                rel_t_in_st3_2  = self.add_links(ifc_system, gebauede, [rl_strang3_2_out], [t_rl11_in2], name = ["Strang3-2 mit T - Ruecklauf"])
                                #Strang2-3 mit T-Stuecke
                                vl_strang3_2_out = rohr_strang3_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang3_2_in  = rohr_strang3_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl12_out1     = t_vl12.IsNestedBy[0].RelatedObjects[0]
                                t_vl12_in1      = t_vl12.IsNestedBy[0].RelatedObjects[2]
                                t_rl12_out1     = t_rl12.IsNestedBy[0].RelatedObjects[0]
                                t_rl12_in1      = t_rl12.IsNestedBy[0].RelatedObjects[1]
                                rel_st3_2_out_t12 = self.add_links(ifc_system, gebauede, [vl_strang3_2_out], [t_vl12_in1], name = ["Strang3-2 mit T - Vorlauf"])
                                rel_t12_in_st3_2  = self.add_links(ifc_system, gebauede, [t_rl12_out1], [rl_strang3_2_in], name = ["T mit Strang3-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2_3 = self.add_links(ifc_system, gebauede, [t_vl12_out1], [rohr_v2_in], name = ["T  mit HK2-3 - Vorlauf"])
                                rel_hk2_3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl12_in1], name = ["HK2-3 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang3
                                for heizflaeche in hk_3:
                                    if str(heizflaeche) == hk2_3:
                                        rohrlaenge_2 = float(hk_3[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang3_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_3[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang3_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_3[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3_3.split(' ')[0]:
                            hzk3 = element
                            hzk3.Description = "HK3_3"
                            rohr_v3 = hzk3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl12_out2       = t_vl12.IsNestedBy[0].RelatedObjects[1]
                                t_rl12_in2        = t_rl12.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl12_out_hk3_3 = self.add_links(ifc_system, gebauede, [t_vl12_out2], [rohr_v3_in], name = ["T mit HK3-3 - Strang3 - Vorlauf"])
                                rel_trl12_in_hk3_3  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl12_in2], name = ["HK3-3 mit T - Strang3 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 3 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang3-3
                                t_vl12_out2       = t_vl12.IsNestedBy[0].RelatedObjects[1]
                                t_rl12_in2        = t_rl12.IsNestedBy[0].RelatedObjects[2]
                                vl_strang3_3_in  = rohr_strang3_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang3_3_out = rohr_strang3_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st3_3 = self.add_links(ifc_system, gebauede, [t_vl12_out2], [vl_strang3_3_in], name = ["T mit Strang3-3 - Vorlauf"])
                                rel_t_in_st3_3  = self.add_links(ifc_system, gebauede, [rl_strang3_3_out], [t_rl12_in2], name = ["Strang3-3 mit T - Ruecklauf"])
                                #Strang3-3 mit T-Stuecke
                                vl_strang3_3_out = rohr_strang3_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang3_3_in  = rohr_strang3_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl13_out1     = t_vl13.IsNestedBy[0].RelatedObjects[0]
                                t_vl13_in1      = t_vl13.IsNestedBy[0].RelatedObjects[2]
                                t_rl13_out1     = t_rl13.IsNestedBy[0].RelatedObjects[0]
                                t_rl13_in1      = t_rl13.IsNestedBy[0].RelatedObjects[1]
                                rel_st3_3_out_t13 = self.add_links(ifc_system, gebauede, [vl_strang3_3_out], [t_vl13_in1], name = ["Strang3-3 mit T - Vorlauf"])
                                rel_t13_in_st3_3  = self.add_links(ifc_system, gebauede, [t_rl13_out1], [rl_strang3_3_in], name = ["T mit Strang3-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk3_3 = self.add_links(ifc_system, gebauede, [t_vl13_out1], [rohr_v3_in], name = ["T  mit HK3-3 - Vorlauf"])
                                rel_hk3_3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl13_in1], name = ["HK3-3 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang3
                                for heizflaeche in hk_3:
                                    if str(heizflaeche) == hk3_3:
                                        rohrlaenge_3 = float(hk_3[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang3_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang3_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4_3.split(' ')[0]:
                            hzk4 = element
                            hzk4.Description = "HK4_3"
                            rohr_v4 = hzk4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl13_out2       = t_vl13.IsNestedBy[0].RelatedObjects[1]
                                t_rl13_in2        = t_rl13.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl13_out_hk4_3 = self.add_links(ifc_system, gebauede, [t_vl13_out2], [rohr_v4_in], name = ["T mit HK4-3 - Strang3 - Vorlauf"])
                                rel_trl13_in_hk4_3  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl13_in2], name = ["HK4-3 mit T - Strang3 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 3 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang3-4
                                t_vl13_out2       = t_vl13.IsNestedBy[0].RelatedObjects[1]
                                t_rl13_in2        = t_rl13.IsNestedBy[0].RelatedObjects[2]
                                vl_strang3_4_in  = rohr_strang3_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang3_4_out = rohr_strang3_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st3_4 = self.add_links(ifc_system, gebauede, [t_vl13_out2], [vl_strang3_4_in], name = ["T mit Strang3-4 - Vorlauf"])
                                rel_t_in_st3_4  = self.add_links(ifc_system, gebauede, [rl_strang3_4_out], [t_rl13_in2], name = ["Strang3-4 mit T - Ruecklauf"])
                                #Strang3-4 mit T-Stuecke
                                vl_strang3_4_out = rohr_strang3_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang3_4_in  = rohr_strang3_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl14_out1     = t_vl14.IsNestedBy[0].RelatedObjects[0]
                                t_vl14_in1      = t_vl14.IsNestedBy[0].RelatedObjects[2]
                                t_rl14_out1     = t_rl14.IsNestedBy[0].RelatedObjects[0]
                                t_rl14_in1      = t_rl14.IsNestedBy[0].RelatedObjects[1]
                                rel_st3_4_out_t14 = self.add_links(ifc_system, gebauede, [vl_strang3_4_out], [t_vl14_in1], name = ["Strang3-4 mit T - Vorlauf"])
                                rel_t14_in_st3_4  = self.add_links(ifc_system, gebauede, [t_rl14_out1], [rl_strang3_4_in], name = ["T mit Strang3-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4_3 = self.add_links(ifc_system, gebauede, [t_vl14_out1], [rohr_v4_in], name = ["T  mit HK4-3 - Vorlauf"])
                                rel_hk4_3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl14_in1], name = ["HK4-3 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang2
                                for heizflaeche in hk_3:
                                    if str(heizflaeche) == hk4_3:
                                        rohrlaenge_4 = float(hk_3[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang3_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang3_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_3[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5_3.split(' ')[0]:
                            hzk5 = element
                            hzk5.Description = "HK5_3"
                            rohr_v5 = hzk5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl14_out2       = t_vl14.IsNestedBy[0].RelatedObjects[1]
                                t_rl14_in2        = t_rl14.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl14_out_hk5_3 = self.add_links(ifc_system, gebauede, [t_vl14_out2], [rohr_v5_in], name = ["T mit HK5-3 - Strang3 - Vorlauf"])
                                rel_trl14_in_hk5_3  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl14_in2], name = ["HK5-3 mit T - Strang3 - Ruecklauf"])
                #strang4
                laengen = []
                anzahl_heizungen = (len(hk_4))
                for heizflaeche in hk_4:
                    laengen.append(float(hk_4[str(heizflaeche)][0]))
                laengen.sort()
                hks = []
                for heizflaeche in hk_4:
                    hks.append(str(heizflaeche))
                #for heizflaeche in rohrdaten:
                for heizflaeche in hk_4:
                    laengen.append(float(hk_4[str(heizflaeche)][0]))
                laengen.sort()
                if anzahl_heizungen == 1:
                    hk1_4 = hks[0]
                elif anzahl_heizungen == 2:
                    hk1_4 = hks[0]
                    hk2_4 = hks[1]
                elif anzahl_heizungen == 3: 
                    for heizflaeche in hk_4:
                        if float(hk_4[str(heizflaeche)][0]) == laengen[0]:
                            hk1_4 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk2_4 = hks[0]
                    hk3_4 = hks[1]
                elif anzahl_heizungen == 4: 
                    for heizflaeche in hk_4:
                        if float(hk_4[str(heizflaeche)][0]) == laengen[0]:
                            hk1_4 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_4[str(heizflaeche)][0]) == laengen[1]:
                            hk2_4 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk3_4 = hks[0]
                    hk4_4 = hks[1]                   
                elif anzahl_heizungen == 5: 
                    for heizflaeche in hk_4:
                        if float(hk_4[str(heizflaeche)][0]) == laengen[0]:
                            hk1_4 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_4[str(heizflaeche)][0]) == laengen[1]:
                            hk2_4 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                        elif float(hk_4[str(heizflaeche)][0]) == laengen[2]:
                            hk3_4 = str(heizflaeche)
                            hks.remove(str(heizflaeche))
                    hk4_4 = hks[0]
                    hk5_4 = hks[1]
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if element.Name.split(' ')[0] == hk1_4.split(' ')[0]:
                        hzk1 = element
                        hzk1.Description = "HK1_4"
                        rohr_v1 = hzk1.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_v1_in = rohr_v1.IsNestedBy[0].RelatedObjects[1]
                        rohr_r1 = hzk1.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        rohr_r1_out = rohr_r1.IsNestedBy[0].RelatedObjects[0]
                        if anzahl_heizungen == 1:  #knoten3 nur mit hk1 verbinden
                            t_vl_k3_out2 = t_vl_k3.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k3_in2  = t_rl_k3.IsNestedBy[0].RelatedObjects[2]
                            rel_k3_out_hk1_4 = self.add_links(ifc_system, gebauede, [t_vl_k3_out2], [rohr_v1_in], name = ["Knoten3 mit HK1-4 - Strang4 - Vorlauf"])
                            rel_k3_in_hk1_4  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl_k3_in2], name = ["HK1-4 mit Knoten3 - Strang4 - Ruecklauf"])
                        if anzahl_heizungen > 1:   #Knoten3 mit strang 4 verbinden und über t-stueck zu hk 1
                            #Knoten3 mit Strang4
                            t_vl_k3_out2 = t_vl_k3.IsNestedBy[0].RelatedObjects[1]
                            t_rl_k3_in2  = t_rl_k3.IsNestedBy[0].RelatedObjects[2]
                            vl_strang4_in  = rohr_strang4_vl1.IsNestedBy[0].RelatedObjects[1]
                            rl_strang4_out = rohr_strang4_rl1.IsNestedBy[0].RelatedObjects[0]
                            rel_k3_out_st4 = self.add_links(ifc_system, gebauede, [t_vl_k3_out2], [vl_strang4_in], name = ["Knoten3 mit Strang4 - Vorlauf"])
                            rel_k3_in_st4  = self.add_links(ifc_system, gebauede, [rl_strang4_out], [t_rl_k3_in2], name = ["Strang4 mit Knoten3 - Ruecklauf"])
                            #Strang4 mit T-Stuecke
                            vl_strang4_out = rohr_strang4_vl1.IsNestedBy[0].RelatedObjects[0]
                            rl_strang4_in  = rohr_strang4_rl1.IsNestedBy[0].RelatedObjects[1]
                            t_vl16_out1     = t_vl16.IsNestedBy[0].RelatedObjects[0]
                            t_vl16_in1      = t_vl16.IsNestedBy[0].RelatedObjects[2]
                            t_rl16_out1     = t_rl16.IsNestedBy[0].RelatedObjects[0]
                            t_rl16_in1      = t_rl16.IsNestedBy[0].RelatedObjects[1]
                            rel_st4_1_out_t16 = self.add_links(ifc_system, gebauede, [vl_strang4_out], [t_vl16_in1], name = ["Strang4-1 mit T - Vorlauf"])
                            rel_t16_in_st4_1  = self.add_links(ifc_system, gebauede, [t_rl16_out1], [rl_strang4_in], name = ["T mit Strang4-1 - Ruecklauf"]) 
                            #Hk1 mit T-Stueck
                            rel_t_out_hk1_4 = self.add_links(ifc_system, gebauede, [t_vl16_out1], [rohr_v1_in], name = ["T  mit HK1-4 - Vorlauf"])
                            rel_hk1_4_in_t  = self.add_links(ifc_system, gebauede, [rohr_r1_out], [t_rl16_in1], name = ["HK1-4 mit T - Ruecklauf"])                            
                            #Längen und Durchmesser Rohr1 Strang4
                            for heizflaeche in hk_4:
                                if str(heizflaeche) == hk1_4:
                                    rohrlaenge_1 = float(hk_4[str(heizflaeche)][0])
                                    for property_set in rohr_strang4_vl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_4[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_4[str(heizflaeche)][2])
                                    for property_set in rohr_strang4_rl1.IsDefinedBy:
                                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                            property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(hk_4[str(heizflaeche)][0])*1000
                                            property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_4[str(heizflaeche)][2])              
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 1:
                        if element.Name.split(' ')[0] == hk2_4.split(' ')[0]:
                            hzk2 = element
                            hzk2.Description = "HK2_4"
                            rohr_v2 = hzk2.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v2_in = rohr_v2.IsNestedBy[0].RelatedObjects[1]
                            rohr_r2 = hzk2.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r2_out = rohr_r2.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 2:  #t von hk1 mit hk2 verbinden
                                t_vl16_out2       = t_vl16.IsNestedBy[0].RelatedObjects[1]
                                t_rl16_in2        = t_rl16.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl16_out_hk2_4 = self.add_links(ifc_system, gebauede, [t_vl16_out2], [rohr_v2_in], name = ["T mit HK2-4 - Strang4 - Vorlauf"])
                                rel_trl16_in_hk2_4  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl16_in2], name = ["HK2-4 mit T - Strang4 - Ruecklauf"])  
                            if anzahl_heizungen > 2: #T HK1 mit strang 4 - 2  verbinden und über t-stueck zu hk 2
                            #T mit Strang4-2
                                t_vl16_out2       = t_vl16.IsNestedBy[0].RelatedObjects[1]
                                t_rl16_in2        = t_rl16.IsNestedBy[0].RelatedObjects[2]
                                vl_strang4_2_in  = rohr_strang4_vl2.IsNestedBy[0].RelatedObjects[1]
                                rl_strang4_2_out = rohr_strang4_rl2.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st4_2 = self.add_links(ifc_system, gebauede, [t_vl16_out2], [vl_strang4_2_in], name = ["T mit Strang4-2 - Vorlauf"])
                                rel_t_in_st4_2  = self.add_links(ifc_system, gebauede, [rl_strang4_2_out], [t_rl16_in2], name = ["Strang4-2 mit T - Ruecklauf"])
                                #Strang4-2 mit T-Stuecke
                                vl_strang4_2_out = rohr_strang4_vl2.IsNestedBy[0].RelatedObjects[0]
                                rl_strang4_2_in  = rohr_strang4_rl2.IsNestedBy[0].RelatedObjects[1]
                                t_vl17_out1     = t_vl17.IsNestedBy[0].RelatedObjects[0]
                                t_vl17_in1      = t_vl17.IsNestedBy[0].RelatedObjects[2]
                                t_rl17_out1     = t_rl17.IsNestedBy[0].RelatedObjects[0]
                                t_rl17_in1      = t_rl17.IsNestedBy[0].RelatedObjects[1]
                                rel_st4_2_out_t17 = self.add_links(ifc_system, gebauede, [vl_strang4_2_out], [t_vl17_in1], name = ["Strang4-2 mit T - Vorlauf"])
                                rel_t17_in_st4_2  = self.add_links(ifc_system, gebauede, [t_rl17_out1], [rl_strang4_2_in], name = ["T mit Strang4-2 - Ruecklauf"]) 
                                #Hk2 mit T-Stueck
                                rel_t_out_hk2_4 = self.add_links(ifc_system, gebauede, [t_vl17_out1], [rohr_v2_in], name = ["T  mit HK2-4 - Vorlauf"])
                                rel_hk2_4_in_t  = self.add_links(ifc_system, gebauede, [rohr_r2_out], [t_rl17_in1], name = ["HK2-4 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr2 Strang4
                                for heizflaeche in hk_4:
                                    if str(heizflaeche) == hk2_4:
                                        rohrlaenge_2 = float(hk_4[str(heizflaeche)][0])- rohrlaenge_1
                                        for property_set in rohr_strang4_vl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_4[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_4[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang4_rl2.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = (float(hk_4[str(heizflaeche)][0]) - rohrlaenge_1)*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_4[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 2:
                        if element.Name.split(' ')[0] == hk3_3.split(' ')[0]:
                            hzk3 = element
                            hzk3.Description = "HK3_4"
                            rohr_v3 = hzk3.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v3_in = rohr_v3.IsNestedBy[0].RelatedObjects[1]
                            rohr_r3 = hzk3.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r3_out = rohr_r3.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 3:  #t von hk2 mit hk3 verbinden
                                t_vl17_out2       = t_vl17.IsNestedBy[0].RelatedObjects[1]
                                t_rl17_in2        = t_rl17.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl17_out_hk3_4 = self.add_links(ifc_system, gebauede, [t_vl17_out2], [rohr_v3_in], name = ["T mit HK3-4 - Strang4 - Vorlauf"])
                                rel_trl17_in_hk3_4  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl17_in2], name = ["HK3-4 mit T - Strang4 - Ruecklauf"])  
                            if anzahl_heizungen > 3: #T HK2 mit strang 4 - 3  verbinden und über t-stueck zu hk 3
                            #T mit Strang4-3
                                t_vl17_out2       = t_vl17.IsNestedBy[0].RelatedObjects[1]
                                t_rl17_in2        = t_rl17.IsNestedBy[0].RelatedObjects[2]
                                vl_strang4_3_in  = rohr_strang4_vl3.IsNestedBy[0].RelatedObjects[1]
                                rl_strang4_3_out = rohr_strang4_rl3.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st4_3 = self.add_links(ifc_system, gebauede, [t_vl17_out2], [vl_strang4_3_in], name = ["T mit Strang4-3 - Vorlauf"])
                                rel_t_in_st4_3  = self.add_links(ifc_system, gebauede, [rl_strang4_3_out], [t_rl17_in2], name = ["Strang4-3 mit T - Ruecklauf"])
                                #Strang4-3 mit T-Stuecke
                                vl_strang4_3_out = rohr_strang4_vl3.IsNestedBy[0].RelatedObjects[0]
                                rl_strang4_3_in  = rohr_strang4_rl3.IsNestedBy[0].RelatedObjects[1]
                                t_vl18_out1     = t_vl18.IsNestedBy[0].RelatedObjects[0]
                                t_vl18_in1      = t_vl18.IsNestedBy[0].RelatedObjects[2]
                                t_rl18_out1     = t_rl18.IsNestedBy[0].RelatedObjects[0]
                                t_rl18_in1      = t_rl18.IsNestedBy[0].RelatedObjects[1]
                                rel_st4_3_out_t13 = self.add_links(ifc_system, gebauede, [vl_strang4_3_out], [t_vl18_in1], name = ["Strang4-3 mit T - Vorlauf"])
                                rel_t14_in_st3_3  = self.add_links(ifc_system, gebauede, [t_rl18_out1], [rl_strang4_3_in], name = ["T mit Strang4-3 - Ruecklauf"]) 
                                #Hk3 mit T-Stueck
                                rel_t_out_hk4_3 = self.add_links(ifc_system, gebauede, [t_vl18_out1], [rohr_v3_in], name = ["T  mit HK3-4 - Vorlauf"])
                                rel_hk4_3_in_t  = self.add_links(ifc_system, gebauede, [rohr_r3_out], [t_rl18_in1], name = ["HK3-4 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr3 Strang4
                                for heizflaeche in hk_4:
                                    if str(heizflaeche) == hk3_4:
                                        rohrlaenge_3 = float(hk_4[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2
                                        for property_set in rohr_strang4_vl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_4[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang4_rl3.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_3*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_4[str(heizflaeche)][2])     
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 3:
                        if element.Name.split(' ')[0] == hk4_4.split(' ')[0]:
                            hzk4 = element
                            hzk4.Description = "HK4_4"
                            rohr_v4 = hzk4.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v4_in = rohr_v4.IsNestedBy[0].RelatedObjects[1]
                            rohr_r4 = hzk4.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r4_out = rohr_r4.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 4:  #t von hk3 mit hk4 verbinden
                                t_vl18_out2       = t_vl18.IsNestedBy[0].RelatedObjects[1]
                                t_rl18_in2        = t_rl18.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl18_out_hk4_4 = self.add_links(ifc_system, gebauede, [t_vl18_out2], [rohr_v4_in], name = ["T mit HK4-4 - Strang4 - Vorlauf"])
                                rel_trl18_in_hk4_4  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl18_in2], name = ["HK4-4 mit T - Strang4 - Ruecklauf"])  
                            if anzahl_heizungen > 4: #T HK3 mit strang 3 - 4  verbinden und über t-stueck zu hk 4
                            #T mit Strang4-4
                                t_vl18_out2       = t_vl18.IsNestedBy[0].RelatedObjects[1]
                                t_rl18_in2        = t_rl18.IsNestedBy[0].RelatedObjects[2]
                                vl_strang4_4_in  = rohr_strang4_vl4.IsNestedBy[0].RelatedObjects[1]
                                rl_strang4_4_out = rohr_strang4_rl4.IsNestedBy[0].RelatedObjects[0]
                                rel_t_out_st4_4 = self.add_links(ifc_system, gebauede, [t_vl18_out2], [vl_strang4_4_in], name = ["T mit Strang4-4 - Vorlauf"])
                                rel_t_in_st4_4  = self.add_links(ifc_system, gebauede, [rl_strang4_4_out], [t_rl18_in2], name = ["Strang4-4 mit T - Ruecklauf"])
                                #Strang4-4 mit T-Stuecke
                                vl_strang4_4_out = rohr_strang4_vl4.IsNestedBy[0].RelatedObjects[0]
                                rl_strang4_4_in  = rohr_strang4_rl4.IsNestedBy[0].RelatedObjects[1]
                                t_vl19_out1     = t_vl19.IsNestedBy[0].RelatedObjects[0]
                                t_vl19_in1      = t_vl19.IsNestedBy[0].RelatedObjects[2]
                                t_rl19_out1     = t_rl19.IsNestedBy[0].RelatedObjects[0]
                                t_rl19_in1      = t_rl19.IsNestedBy[0].RelatedObjects[1]
                                rel_st4_4_out_t19 = self.add_links(ifc_system, gebauede, [vl_strang4_4_out], [t_vl19_in1], name = ["Strang4-4 mit T - Vorlauf"])
                                rel_t19_in_st4_4  = self.add_links(ifc_system, gebauede, [t_rl19_out1], [rl_strang4_4_in], name = ["T mit Strang4-4 - Ruecklauf"]) 
                                #Hk4 mit T-Stueck
                                rel_t_out_hk4_4 = self.add_links(ifc_system, gebauede, [t_vl19_out1], [rohr_v4_in], name = ["T  mit HK4-4 - Vorlauf"])
                                rel_hk4_4_in_t  = self.add_links(ifc_system, gebauede, [rohr_r4_out], [t_rl19_in1], name = ["HK4-4 mit T - Ruecklauf"])                            
                                #Längen und Durchmesser Rohr4 Strang4
                                for heizflaeche in hk_4:
                                    if str(heizflaeche) == hk4_4:
                                        rohrlaenge_4 = float(hk_4[str(heizflaeche)][0])- rohrlaenge_1 - rohrlaenge_2 - rohrlaenge_3
                                        for property_set in rohr_strang4_vl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_4[str(heizflaeche)][2]) 
                                        for property_set in rohr_strang4_rl4.IsDefinedBy:
                                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = rohrlaenge_4*1000
                                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(hk_4[str(heizflaeche)][2]) 
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if anzahl_heizungen > 4:
                        if element.Name.split(' ')[0] == hk5_4.split(' ')[0]:
                            hzk5 = element
                            hzk5.Description = "HK5_4"
                            rohr_v5 = hzk5.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            rohr_v5_in = rohr_v5.IsNestedBy[0].RelatedObjects[1]
                            rohr_r5 = hzk5.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                            rohr_r5_out = rohr_r5.IsNestedBy[0].RelatedObjects[0]
                            if anzahl_heizungen == 5:  #t von hk4 mit hk5 verbinden
                                t_vl19_out2       = t_vl19.IsNestedBy[0].RelatedObjects[1]
                                t_rl19_in2        = t_rl19.IsNestedBy[0].RelatedObjects[2]
                                rel_tvl19_out_hk5_4 = self.add_links(ifc_system, gebauede, [t_vl19_out2], [rohr_v5_in], name = ["T mit HK5-5 - Strang4 - Vorlauf"])
                                rel_trl19_in_hk5_4  = self.add_links(ifc_system, gebauede, [rohr_r5_out], [t_rl19_in2], name = ["HK5-5 mit T - Strang4 - Ruecklauf"])         
            ifc_system.write("System_verbunden.ifc")
            self.app.root.add_widget(Anlagenparametrisierung4(name="Anlagenparametrisierung4"))
            self.app.root.current = 'Anlagenparametrisierung4'
            self.app.root.transition.direction = "left"
        elif button.text == "Rohrlängen festlegen und Parametrisierung fertigstellen":                              #Anlagenparametrisierung > Rohrdaten festlegen und zu den Pumpen
            ifc_system = ifcopenshell.open('System.ifc')
            rohrdaten = {}
            for element in ifc_system.by_type('IfcSpaceHeater'):
                heizungsname = element.Name
                laenge1 = float(self.laengen1[str(self.laengen1_s[heizungsname])].text.split(' ')[0])
                durchmesser = float(self.durchmesser[str(self.durchmesser_b[heizungsname])].text.split(' ')[0])
                heizkreis = int(self.straenge[str(self.straenge_b[heizungsname])].text)
                rohrdaten[heizungsname] = [laenge1, durchmesser, heizkreis]
            #Rohre direkt zu Heizflaechen festlegen
            for heizflaeche in rohrdaten:
                for element in ifc_system.by_type('IfcSpaceHeater'):
                    if str(heizflaeche).split(' ')[0] == element.Name.split(' ')[0]:
                        element.Description = 'Heizflaeche' + '_' + str(rohrdaten[heizflaeche][2])
                        rohr_v = element.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        rohr_r = element.IsNestedBy[0].RelatedObjects[0].ConnectedTo[0].RelatedPort.Nests[0].RelatingObject
                        for property_set in rohr_v.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(rohrdaten[str(heizflaeche)][0])*1000*0.5
                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][1]) 
                        for property_set in rohr_r.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                property_set.RelatingPropertyDefinition.Quantities[0].LengthValue = float(rohrdaten[str(heizflaeche)][0])*1000*0.5
                                property_set.RelatingPropertyDefinition.Quantities[3].LengthValue = float(rohrdaten[str(heizflaeche)][1])   
            ifc_system.write('System_verbunden.ifc')
            self.app.root.add_widget(Anlagenparametrisierung4(name="Anlagenparametrisierung4"))
            self.app.root.current = 'Anlagenparametrisierung4'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zur Auslegung der Heizflächen":                     #Anlagenparametriesierung > zurück zur vorherigen Folie
            self.app.root.current = 'Anlagenparametrisierung2'
            self.app.root.transition.direction = "right"  
        elif button.text == "Fertige Anlagenparametrisierung":                     #Ferige Anlagenparametriesierung
            self.app.root.current = 'Main'
            self.app.root.transition.direction = "right"
        


        #Datenerfassung und Berechnungen > Automatischer hydraulischer Abgleich
        elif button.text == "zurück zur Auswahl des Abgleichs":                        #Hydraulischer Abgleich > zurück zur Auswahl
            self.app.root.current = 'Auto_Abgleich'
            self.app.root.transition.direction = "right"
        elif button.text == "Hydraulischer Abgleich der erfassten Anlage (komplex)":             #Automatischer hydraulischer Abgleich mit erfasster Anlage > Folien öffnen
            ifc_techno = ifcopenshell.open("System.ifc")
            techno = ifc_techno.by_type("IfcBuilding")[0]
            if 'FBH' in techno.Description:
                ifc_system_neu = ifcopenshell.open('System_verbunden.ifc')        
                abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [], 'Volumenstrom [m³/h]': [], 'P [W]': [], 'L [m]': [],
                    'd [mm]': [], 'Druckv. Leitung [Pa]': [], 'Druckv. Ventil am Heizregister [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Ventilautorität [-]': []})
                df = pd.DataFrame(abgleich)
                strangverluste = {}
                strangverluste_liste = []
                strangverluste_n = {}
                heizkoerper_liste = []
                volumenstroeme = []
                volumenstroeme_liste = {}
                for heizflaeche in ifc_system_neu.by_type('IfcSpaceHeater'):
                    if 'Fussbodenheizung' in heizflaeche.Name:
                        print(heizflaeche.Name)
                        art = 'Fußbodenheizung'
                        name = heizflaeche.Name
                        dichte_w = 995 #kg/m³
                        k = 0.03
                        kinematische_zaehigkeit = 0.724  #mm²/s
                        waermekapazitaet_wasser = 1.16 #Wh/kg*K
                        rohr = heizflaeche.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000*2
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        for property_set in heizflaeche.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                betriebsleistung = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
                                print(betriebsleistung)
                                vorlauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                                ruecklauftemperatur =property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme.append(notwendiger_volumenstrom)
                        volumenstroeme_liste[name] = notwendiger_volumenstrom
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (notwendiger_volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust_leitung1 = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust_leitung1 = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_z = (druckverlust_leitung1+ verlust_t)*zf
                        druckverlust_leitung = round(druckverlust_z*zf,3)
                        for property_set in rohr.IsDefinedBy:                        
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue = geschwindigkeit_rohr 
                                property_set.RelatingPropertyDefinition.HasProperties[16].NominalValue.wrappedValue = rohrreibungswiderstand
                                property_set.RelatingPropertyDefinition.HasProperties[17].NominalValue.wrappedValue = druckverlust_leitung
                        strangverluste[druckverlust_leitung] = name
                        strangverluste_n[name] = druckverlust_leitung
                        strangverluste_liste.append(druckverlust_leitung)
                #ungünstigsten strang berechnen
                volumenstroeme = []
                for heizflaeche in ifc_system_neu.by_type('IfcSpaceHeater'):
                    if strangverluste[max(strangverluste_liste)] == heizflaeche.Name:
                        av = 0.3
                        #pvt1 = 5000 #Pa
                        pnetz = round(max(strangverluste_liste), 1)
                        pv100 = round((av/(1-av))*pnetz, 5)
                        pges = pnetz + pv100
                        ventilautoritaet = round(pv100/pges, 5)
                        if 'Fussbodenheizung' in heizflaeche.Name:
                            art = 'Fussbodenheizung'
                            volumenstrom = volumenstroeme_liste[heizflaeche.Name] 
                            rohr = heizflaeche.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                    rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000*2
                                    rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                            for property_set in heizflaeche.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = volumenstrom
                                    betriebsleistung = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
                            volumenstroeme.append(volumenstrom)
                            #kv = notwendiger_volumenstrom*math.sqrt((1/(pv100/100000)*(995/1000)))
                            for property_set in heizflaeche.IsDefinedBy:
                                if  property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pvt1
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                            heizkoerper_liste.append(heizflaeche.Name)
                            strang_u = {'pv100':pv100, 'pnetz': pnetz, 'pges': pges, 'v': volumenstrom}
                            neue_reihe = pd.DataFrame({'Name':heizflaeche.Name.split(' ')[0]+' '+heizflaeche.Name.split(' ')[1],
                                      'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': volumenstrom, 
                                      'P [W]': int(round(betriebsleistung)), 'L [m]': rohrlaenge, 'd [mm]': rohrinnenabmessung, 
                                      'Druckv. Leitung [Pa]': int(round(pnetz)),
                                      'Druckv. Ventil am Heizregister [Pa]': int(round(pv100)), 'Gesamtdruckv. [Pa]': int(round(pges)), 'Ventilautorität [-]': ventilautoritaet}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                #restlichen Heizflächen berechnen
                for heizkoerper in ifc_system_neu.by_type('IfcSpaceHeater'):
                    if heizkoerper.Name in heizkoerper_liste:
                        pass
                    else:
                        name = heizkoerper.Name
                        auslegungsproportionalbereich = 1.0
                        dichte_w = 995 #kg/m³
                        k = 0.03
                        kinematische_zaehigkeit = 0.724  #mm²/s
                        waermekapazitaet_wasser = 1.16 #Wh/kg*K
                        volumenstrom = volumenstroeme_liste[heizkoerper.Name]
                        volumenstroeme.append(volumenstrom)
                        pnetz = round(strangverluste_n[heizkoerper.Name],1)
                        pvt = pges - pnetz
                        ventilautoritaet = round(pvt/pges, 5)
                        if 'Fussbodenheizung' in name:
                            art = 'Fussbodenheizung'
                            rohr = heizkoerper.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                    betriebsleistung    = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
                                    vorlauftemperatur   = property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                                    ruecklauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                    rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000*2
                                    rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                            neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0]+' '+heizkoerper.Name.split(' ')[1],
                                      'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': volumenstrom, 
                                      'P [W]': int(round(betriebsleistung)), 'L [m]': rohrlaenge, 'd [mm]': rohrinnenabmessung, 
                                      'Druckv. Leitung [Pa]': int(round(pnetz)),
                                      'Druckv. Ventil am Heizregister [Pa]': int(round(pvt)), 'Gesamtdruckv. [Pa]': int(round(pges)), 'Ventilautorität [-]': ventilautoritaet}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')      
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = notwendiger_volumenstrom
                                elif  property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pvt1
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                            heizkoerper_liste.append(heizkoerper.Name)
                foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
                foerderstrom = sum(volumenstroeme)                 #m³/h
                for pumpe in ifc_system_neu.by_type('IfcPump'):
                    if 'Pumpe - Puffer zum Verteiler' in pumpe.Name:
                        for property_set in pumpe.IsDefinedBy:
                            if  property_set.RelatingPropertyDefinition.Name == "Pset_FlowMovingDevicePump":
                                property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = foerderhoehe
                                property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = foerderstrom
                # Spalten, die als int dargestellt werden sollen
                int_spalten = ['P [W]', 'Druckv. Leitung [Pa]', 'Druckv. Ventil am Heizregister [Pa]', 'Gesamtdruckv. [Pa]']
                # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
                df[int_spalten] = df[int_spalten].astype(int)
                df.to_csv('Abgleich.csv')
                pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
                df_p = pd.DataFrame(pumpe)
                pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
                df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
                df_p.to_csv('Pumpe.csv')
                dfi.export(df_p, 'Pumpe.png')
                dfi.export(df, 'Abgleich.png')
                ifc_system_neu.write("System_abgleich.ifc")
                self.app.root.add_widget(Abgleich_Anlage3(name="Abgleich_Anlage3"))
                self.app.root.current = 'Abgleich_Anlage3'
                self.app.root.transition.direction = "left"
            else:
                ifc_system = ifcopenshell.open('System_verbunden.ifc')
                hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
                building = ifc_system.by_type('IfcBuilding')[0]
                beschreibung = building.Description.split('_')
                stranganzahl = int(beschreibung.pop())
                zeta_t = 1.0
                heizungsradiatoren = ifc_system.by_type('IfcSpaceHeater')
                for heizkoerper in heizungsradiatoren:
                    if heizkoerper.Description == 'HK1_1':
                        hk1_1 = heizkoerper
                    elif heizkoerper.Description == 'HK2_1':
                        hk2_1 = heizkoerper
                    elif heizkoerper.Description == 'HK3_1':
                        hk3_1 = heizkoerper
                    elif heizkoerper.Description == 'HK4_1':
                        hk4_1 = heizkoerper
                    elif heizkoerper.Description == 'HK5_1':
                        hk5_1 = heizkoerper
                    elif heizkoerper.Description == 'HK1_2':
                        hk1_2 = heizkoerper    
                    elif heizkoerper.Description == 'HK2_2':
                        hk2_2 = heizkoerper
                    elif heizkoerper.Description == 'HK3_2':
                        hk3_2 = heizkoerper
                    elif heizkoerper.Description == 'HK4_2':
                        hk4_2 = heizkoerper
                    elif heizkoerper.Description == 'HK5_2':
                        hk5_2 = heizkoerper
                    elif heizkoerper.Description == 'HK1_3':
                        hk1_3 = heizkoerper    
                    elif heizkoerper.Description == 'HK2_3':
                        hk2_3 = heizkoerper
                    elif heizkoerper.Description == 'HK3_3':
                        hk3_3 = heizkoerper
                    elif heizkoerper.Description == 'HK4_3':
                        hk4_3 = heizkoerper
                    elif heizkoerper.Description == 'HK5_3':
                        hk5_3 = heizkoerper
                    elif heizkoerper.Description == 'HK1_4':
                        hk1_4 = heizkoerper    
                    elif heizkoerper.Description == 'HK2_4':
                        hk2_4 = heizkoerper
                    elif heizkoerper.Description == 'HK3_4':
                        hk3_4 = heizkoerper
                    elif heizkoerper.Description == 'HK4_4':
                        hk4_4 = heizkoerper
                    elif heizkoerper.Description == 'HK5_4':
                        hk5_4 = heizkoerper
                if stranganzahl == 1: ###Auswahl der Struktur für 1 > ein Strang
                    abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],'Volumenstrom [m³/h]': [], 'P [W]': [], 
                            'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                            'Ventilautorität [-]': [], 'KVs_Wert [m³/h]': [], 'Strang': []})
                    df = pd.DataFrame(abgleich)
                    heizkoerper_liste = []
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    volumenstroeme_1 = []
                    volumenstroeme = {}
                    heizungs_daten = {}
                    #Volumenströme berechnen
                    for heizkoerper in heizungsradiatoren:
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                betriebsleistung    = float(property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue)
                                vorlauftemperatur   = float(property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue)
                                ruecklauftemperatur = float(property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue)
                        rohr = heizkoerper.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        name = str(heizkoerper.Name).split(' ')[0]
                        spreizung          = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_1.append(notwendiger_volumenstrom)
                        volumenstroeme[name] = notwendiger_volumenstrom
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (notwendiger_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue = notwendiger_volumenstrom
                                heizungs_daten[name] = {'Betriebsleistung': betriebsleistung, 'Vorlauf_T': vorlauftemperatur, 'Ruecklauf_T': ruecklauftemperatur,
                                            'Rohrlaenge': rohrlaenge, 'Rohrinnenabmessung': rohrinnenabmessung, 'Name':name}
                    heizungen = {}
                    
                    

                ##HK1-1
                    if len(heizungs_daten) == 1: 
                        heizkoerper_data = heizungs_daten[hk1_1.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_1)
                        regeldifferenz = 1.0
                        name = str(hk1_1.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zeta_t = 1.0
                        zf_b = 1.0
                        absperrventil_z = 2.4
                        absperrklappe_z = 1.2
                        rueckschlagklappe_z = 1.8
                        schmutzfaenger_z = 2.0
                        waermemengenzaehler_z = 2.0
                        kugelhahn_z = 1.30
                    
                        verluste_arm = (2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            1*(absperrventil_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(absperrklappe_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            1*(rueckschlagklappe_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(schmutzfaenger_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            (waermemengenzaehler_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(kugelhahn_z*(dichte_w/2)*geschwindigkeit_rohr**2))
                        druckverlust_zu = (druckverlust_knoten+verluste_arm)*zf
                        verlust_K1 = druckverlust_zu
                        
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 2*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z+verlust_K1
                        volumenstrom_neu = volumenstrom - volumenstroeme[name]
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[name], verlust_bis1, regeldifferenz]
                    elif len(heizungs_daten) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 1" in hvac:
                                strang1_1 = hvac
                        for property_set in strang1_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_1)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        k = 0.03
                        for property_set in strang1_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zeta_t = 1.0
                        zf_b = 1.0
                        absperrventil_z = 2.4
                        absperrklappe_z = 1.2
                        rueckschlagklappe_z = 1.8
                        schmutzfaenger_z = 2.0
                        waermemengenzaehler_z = 2.0
                        kugelhahn_z = 1.30
                        
                        verluste_arm = (2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            1*(absperrventil_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(absperrklappe_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            1*(rueckschlagklappe_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(schmutzfaenger_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            (waermemengenzaehler_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(kugelhahn_z*(dichte_w/2)*geschwindigkeit_rohr**2))
                        druckverlust_zu = (druckverlust+verluste_arm)*zf
                        verlust_K1 = druckverlust_zu
                        
                        
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_1_1 = (druckverlust+ verlust_t)*zf+verlust_K1
                        #HK1_1
                        name = str(hk1_1.Name).split(' ')[0]
                        heizkoerper_data = heizungs_daten[hk1_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_1_3 = (druckverlust+ verlust_t)*zf
                        verlust_t = (druckverlust+ verlust_t)*zf
                        verlust_hk1_1 = verlust_t+ druckverlust_1_1
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[name], verlust_hk1_1, regeldifferenz]
                    #HK2_1
                    if len(heizungs_daten) == 2:
                        name = str(hk2_1.Name).split(' ')[0]
                        heizkoerper_data = heizungs_daten[hk2_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_1 = verlust_t_2+ druckverlust_1_1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[name], verlust_hk2_1, regeldifferenz]
                    elif len(heizungs_daten) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 2" in hvac:
                                strang1_2 = hvac
                        for property_set in strang1_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_1_2 = (druckverlust+ verlust_t)*zf
                        #HK2_1
                        name = str(hk2_1.Name).split(' ')[0]
                        heizkoerper_data = heizungs_daten[hk2_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_1 = verlust_t_2+ druckverlust_1_1 + druckverlust_1_2
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[name], verlust_hk2_1, regeldifferenz]
                    #HK3_1
                    if len(heizungs_daten) == 3:
                        name = str(hk3_1.Name).split(' ')[0]
                        heizkoerper_data = heizungs_daten[hk3_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t_3 = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 8*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_1 = verlust_t_3+ druckverlust_1_1 + druckverlust_1_2
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[name], verlust_hk3_1, regeldifferenz]
                    elif len(heizungs_daten) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 3" in hvac:
                                strang1_3 = hvac
                        for property_set in strang1_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_1_3 = (druckverlust+ verlust_t)*zf
                        #HK3_1
                        name = str(hk3_1.Name).split(' ')[0]
                        heizkoerper_data = heizungs_daten[hk3_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_1 = verlust_t_2+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[name], verlust_hk3_1, regeldifferenz]
                    #HK4_1
                    if len(heizungs_daten) == 4:
                        name = str(hk4_1.Name).split(' ')[0]
                        heizkoerper_data = heizungs_daten[hk4_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_4+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[name], verlust_hk4_1, regeldifferenz]
                    elif len(heizungs_daten) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 4" in hvac:
                                strang1_4 = hvac
                        for property_set in strang1_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_1_4 = (druckverlust+ verlust_t)*zf
                        #HK4_1
                        name = str(hk4_1.Name).split(' ')[0]
                        heizkoerper_data = heizungs_daten[hk4_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_2+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + druckverlust_1_4
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[name], verlust_hk4_1, regeldifferenz]               
                    if len(heizungs_daten) == 5:
                        name = str(hk5_1.Name).split(' ')[0]
                        heizkoerper_data = heizungs_daten[hk5_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_1 = verlust_t_5+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + druckverlust_1_4
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[name], verlust_hk5_1, regeldifferenz]
                    #ungünstigster heizkörper
                    verluste = []
                    for heizkoerper in heizungsradiatoren:
                        for heizung in heizungen:
                            verluste.append(heizungen[heizung][5])
                    for heizkoerper in heizungsradiatoren:
                        name = heizkoerper.Name.split(' ')[0]
                        if heizungen[name][5] == max(verluste):
                            vorlauftemperatur = float(heizungs_daten[name]['Vorlauf_T'])
                            ruecklauftemperatur = float(heizungs_daten[name]['Ruecklauf_T'])
                            betriebsleistung = float(heizungs_daten[name]['Betriebsleistung'])
                            daten = heizungen[name]
                            strang = int(heizkoerper.Description.split('_').pop())
                            av = 0.3
                            pnetz = round(daten[5], 5)
                            pv100 = round((av/(1-av))*pnetz, 5)
                            pges = pnetz + pv100
                            ventilautoritaet = round(pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv}
                            neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': round(daten[4],3), 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': round(ventilautoritaet,2), 
                                                       'KVs_Wert [m³/h]': round(kv,3), 'Strang': strang}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper.Name.split(' ')[0])
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = daten[6]   
                    for heizkoerper in heizungsradiatoren:
                        heizkoerper_data = heizungs_daten[heizkoerper.Name.split(' ')[0]]  
                        if str(heizkoerper.Name.split(' ')[0]) in heizkoerper_liste:
                            pass
                        else:
                            name = heizkoerper.Name.split(' ')[0]
                            vorlauftemperatur = float(heizungs_daten[name]['Vorlauf_T'])
                            ruecklauftemperatur = float(heizungs_daten[name]['Ruecklauf_T'])
                            betriebsleistung = float(heizungs_daten[name]['Betriebsleistung'])
                            daten = heizungen[heizkoerper.Name.split(' ')[0]]
                            strang = int(heizkoerper.Description.split('_').pop())
                            pnetz = round(daten[5], 5)
                            pges = strang_u['pges']
                            pv100 = pges-pnetz
                            ventilautoritaet = round( pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': round(daten[4],3), 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': round(ventilautoritaet,2), 
                                                       'KVs_Wert [m³/h]': round(kv,3), 'Strang': strang}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper.Name.split(' ')[0])
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = daten[6] 
                    #Pumpenauslegung
                    foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
                    foerderstrom = sum(volumenstroeme_1)                 #m³/h
                    pumpen = ifc_system.by_type('IfcPump')
                    for pumpe in pumpen:
                        if 'zum Verteiler' in pumpe.Name:
                            for property_set in pumpe.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_FlowMovingDevicePump":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = foerderhoehe
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = foerderstrom
                    # Spalten, die als int dargestellt werden sollen
                    int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
                    # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
                    df[int_spalten] = df[int_spalten].astype(int)
                    df.to_csv('Abgleich.csv')
                    pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
                    df_p = pd.DataFrame(pumpe)
                    pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
                    df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
                    df_p.to_csv('Pumpe.csv')
                    dfi.export(df_p, 'Pumpe.png')
                    dfi.export(df, 'Abgleich.png')
                    ifc_system.write('System_verbunden.ifc')
                if stranganzahl == 2: ###Auswahl der Struktur für 1 > ein Strang
                    strang1_data = {}
                    strang2_data = {}
                    rohre = ifc_system.by_type('IfcPipeSegment')
                    for rohr in rohre:
                        if 'Vorlauf zu Knoten1' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                    d_knoten = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                                    l_knoten = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                    heizungsradiatoren = ifc_system.by_type('IfcSpaceHeater')
                    heizkoerper_liste = []
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    volumenstroeme_1 = []
                    volumenstroeme_2 = []
                    volumenstroeme1 = {}
                    volumenstroeme2 = {}
                    heizungs_daten = {}
                    #Heizkörperdaten erfassen
                    for heizkoerper in heizungsradiatoren:
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                betriebsleistung    = float(property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue)
                                vorlauftemperatur   = float(property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue)
                                ruecklauftemperatur = float(property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue)
                        rohr = heizkoerper.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        name               = str(heizkoerper.Name).split(' ')[0]
                        spreizung          = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (notwendiger_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue = notwendiger_volumenstrom
                        heizungs_daten[name] = {'Betriebsleistung': betriebsleistung, 'Vorlauf_T': vorlauftemperatur, 'Ruecklauf_T': ruecklauftemperatur,
                                            'Rohrlaenge': rohrlaenge, 'Rohrinnenabmessung': rohrinnenabmessung, 'Name':name, 'Volumenstrom':notwendiger_volumenstrom}
                    #Straenge festlegen
                    for heizkoerper in heizungsradiatoren:
                        heizkoerper_data = heizungs_daten[heizkoerper.Name.split(' ')[0]] 
                        strang = int(heizkoerper.Description.split('_').pop())
                        if int(strang) == 1:
                            strang1_data[heizkoerper.Name.split(' ')[0]] = heizkoerper_data 
                        elif int(strang) == 2:
                            strang2_data[heizkoerper.Name.split(' ')[0]] = heizkoerper_data
                    abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],'Volumenstrom [m³/h]': [], 'P [W]': [], 
                        'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                        'Ventilautorität [-]': [], 'KVs_Wert [m³/h]': [], 'Strang': []})
                    df = pd.DataFrame(abgleich)
                    #strang1 volumenströme
                    for heizkoerper in strang1_data:
                        heizkoerper_data = strang1_data[heizkoerper]
                        name = heizkoerper_data['Name']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauf_T'])
                        ruecklauftemperatur = float(heizkoerper_data['Ruecklauf_T'])
                        betriebsleistung = float(heizkoerper_data['Betriebsleistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_1.append(notwendiger_volumenstrom)
                        volumenstroeme1[name] = notwendiger_volumenstrom
                    #strang2 volumenströme
                    for heizkoerper in strang2_data:
                        heizkoerper_data = strang2_data[heizkoerper]
                        name = heizkoerper_data['Name']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauf_T'])
                        ruecklauftemperatur = float(heizkoerper_data['Ruecklauf_T'])
                        betriebsleistung = float(heizkoerper_data['Betriebsleistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_2.append(notwendiger_volumenstrom)
                        volumenstroeme2[name] = notwendiger_volumenstrom     
                    #verluste zu den strängen - strang1 und strang2
                    volumenstrom_knoten = sum(volumenstroeme_1) + sum(volumenstroeme_2)
                    rohrquerschnitt_knoten = math.pi*((d_knoten/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten = (volumenstrom_knoten/3600)/rohrquerschnitt_knoten   #m/s
                    for rohr in rohre:
                        if 'Vorlauf zu Knoten1' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr_knoten
                    reynoldzahl = (geschwindigkeit_rohr_knoten*(d_knoten/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten**2))/(d_knoten/1000*2)    #Pa/m
                        druckverlust_knoten = rohrreibungswiderstand*l_knoten*2
                    else:
                        f = colebrook_prandtl(k, d_knoten/1000, reynoldzahl)
                        druckverlust_knoten = darcy_weisbach(l_knoten*2, dichte_w, geschwindigkeit_rohr_knoten, d_knoten/1000, f)
                    zf = 1.0
                    zeta_t = 1.0
                    zf_b = 1.0
                    absperrventil_z = 2.4
                    absperrklappe_z = 1.2
                    rueckschlagklappe_z = 1.8
                    schmutzfaenger_z = 2.0
                    waermemengenzaehler_z = 2.0
                    kugelhahn_z = 1.30
                    
                    verluste_arm = (2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            1*(absperrventil_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(absperrklappe_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            1*(rueckschlagklappe_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(schmutzfaenger_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            (waermemengenzaehler_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(kugelhahn_z*(dichte_w/2)*geschwindigkeit_rohr**2))
                    druckverlust_zu = (druckverlust_knoten+verluste_arm)*zf
                    verlust_K1 = druckverlust_zu
                    #Stränge
                    heizungen = {}
                #Strang1
                ##HK1-1
                    if len(strang1_data) == 1: 
                        heizkoerper_data = strang1_data[hk1_1.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_1)
                        regeldifferenz = 1.0
                        name = str(hk1_1.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_bis1, regeldifferenz]
                    elif len(strang1_data) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 1" in hvac:
                                strang1_1 = hvac
                        for property_set in strang1_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_1)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_1_1 = (druckverlust+ verlust_t)*zf
                        #HK1_1
                        name = str(hk1_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk1_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t = (druckverlust+ verlust_t)*zf
                        verlust_hk1_1 = verlust_t+ druckverlust_1_1 + verlust_K1
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk1_1, regeldifferenz]
                    #HK2_1
                    if len(strang1_data) == 2:
                        name = str(hk2_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk2_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_1 = verlust_t_2+ druckverlust_1_1 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk2_1, regeldifferenz]
                    elif len(strang1_data) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 2" in hvac:
                                strang1_2 = hvac
                        for property_set in strang1_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        zeta_t = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_1_2 = (druckverlust+ verlust_t)*zf
                        druckverlust_1_2 = (druckverlust+ verlust_t)*zf
                        #HK2_1
                        name = str(hk2_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk2_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_1 = verlust_t_2+ druckverlust_1_1 + druckverlust_1_2 + verlust_K1
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk2_1, regeldifferenz]
                    #HK3_1
                    if len(strang1_data) == 3:
                        name = str(hk3_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk3_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_1 = verlust_t_3+ druckverlust_1_1 + druckverlust_1_2 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk3_1, regeldifferenz]
                    elif len(strang1_data) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 3" in hvac:
                                strang1_3 = hvac
                        for property_set in strang1_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_1_3 = (druckverlust+ verlust_t)*zf
                        #HK3_1
                        name = str(hk3_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk3_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_1 = verlust_t_2+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + verlust_K1
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk3_1, regeldifferenz]
                    #HK4_1
                    if len(strang1_data) == 4:
                        name = str(hk4_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk4_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_4+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk4_1, regeldifferenz]
                    elif len(strang1_data) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 4" in hvac:
                                strang1_4 = hvac
                        for property_set in strang1_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_1_4 = (druckverlust+ verlust_t)*zf
                        #HK4_1
                        name = str(hk4_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk4_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_2+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + druckverlust_1_4 + verlust_K1
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk4_1, regeldifferenz]               
                    if len(strang1_data) == 5:
                        name = str(hk5_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk5_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_1 = verlust_t_5+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + druckverlust_1_4 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk5_1, regeldifferenz]
                #Strang2
                ##HK1-2
                    if len(strang2_data) == 1: 
                        heizkoerper_data = strang2_data[hk1_2.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_2)
                        regeldifferenz = 1.0
                        name = str(hk1_2.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z
                        max_verlust = verlust_bis1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_bis1, regeldifferenz]
                    elif len(strang2_data) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 1" in hvac:
                                strang2_1 = hvac
                        for property_set in strang2_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_2)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_2_1 = (druckverlust+ verlust_t)*zf
                        #HK1_2
                        name = str(hk1_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk1_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t = (druckverlust+ verlust_t)*zf
                        verlust_hk1_2 = verlust_t+ druckverlust_2_1 + verlust_K1
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk1_2, regeldifferenz]
                    #HK2_2
                    if len(strang2_data) == 2:
                        name = str(hk2_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk2_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_2 = verlust_t_2+ druckverlust_2_1 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk2_2, regeldifferenz]
                    elif len(strang2_data) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 2" in hvac:
                                strang2_2 = hvac
                        for property_set in strang2_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_2_2 = (druckverlust+ verlust_t)*zf
                        #HK2_2
                        name = str(hk2_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk2_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_2 = verlust_t_2+ druckverlust_2_1 + druckverlust_2_2 + verlust_K1
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk2_2, regeldifferenz]
                    #HK3_2
                    if len(strang2_data) == 3:
                        name = str(hk3_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk3_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_2 = verlust_t_3+ druckverlust_2_1 + druckverlust_2_2 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk3_2, regeldifferenz]
                    elif len(strang2_data) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 3" in hvac:
                                strang2_3 = hvac
                        for property_set in strang2_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_2_3 = (druckverlust+ verlust_t)*zf
                        #HK3_2
                        name = str(hk3_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk3_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_2 = verlust_t_2+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + verlust_K1
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk3_2, regeldifferenz]
                    #HK4_2
                    if len(strang2_data) == 4:
                        name = str(hk4_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk4_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_4+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk4_2, regeldifferenz]
                    elif len(strang2_data) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 4" in hvac:
                                strang2_4 = hvac
                        for property_set in strang2_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_2_4 = (druckverlust+ verlust_t)*zf
                        #HK4_2
                        name = str(hk4_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk4_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_2 = verlust_t_2+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + druckverlust_2_4 + verlust_K1
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk4_2, regeldifferenz]               
                    if len(strang2_data) == 5:
                        #Hk5_2
                        name = str(hk5_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk5_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_2 = verlust_t_5+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + druckverlust_2_4 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk5_2, regeldifferenz]               
                    #ungünstigster heizkörper
                    verluste = []
                    for heizkoerper in heizungsradiatoren:
                        for heizung in heizungen:
                            verluste.append(heizungen[heizung][5])
                    for heizkoerper in heizungsradiatoren:
                        name = heizkoerper.Name.split(' ')[0]
                        if heizungen[name][5] == max(verluste):
                            vorlauftemperatur = float(heizungs_daten[name]['Vorlauf_T'])
                            ruecklauftemperatur = float(heizungs_daten[name]['Ruecklauf_T'])
                            betriebsleistung = float(heizungs_daten[name]['Betriebsleistung'])
                            daten = heizungen[name]
                            strang = int(heizkoerper.Description.split('_').pop())
                            av = 0.3
                            pnetz = round(daten[5], 5)
                            pv100 = round((av/(1-av))*pnetz, 5)
                            pges = pnetz + pv100
                            ventilautoritaet = round(pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv}
                            neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': round(daten[4],3), 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': round(ventilautoritaet,2), 
                                                       'KVs_Wert [m³/h]': round(kv,3), 'Strang': strang}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper.Name.split(' ')[0])
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = daten[6]   
                    for heizkoerper in heizungsradiatoren:
                        heizkoerper_data = heizungs_daten[heizkoerper.Name.split(' ')[0]]  
                        if str(heizkoerper.Name.split(' ')[0]) in heizkoerper_liste:
                            pass
                        else:
                            name = heizkoerper.Name.split(' ')[0]
                            vorlauftemperatur = float(heizungs_daten[name]['Vorlauf_T'])
                            ruecklauftemperatur = float(heizungs_daten[name]['Ruecklauf_T'])
                            betriebsleistung = float(heizungs_daten[name]['Betriebsleistung'])
                            daten = heizungen[heizkoerper.Name.split(' ')[0]]
                            strang = int(heizkoerper.Description.split('_').pop())
                            pnetz = round(daten[5], 5)
                            pges = strang_u['pges']
                            pv100 = pges-pnetz
                            ventilautoritaet = round( pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': round(daten[4],3), 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': round(ventilautoritaet,2), 
                                                       'KVs_Wert [m³/h]': round(kv,3), 'Strang': strang}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper.Name.split(' ')[0])
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = daten[6] 
                    #Pumpenauslegung
                    foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
                    foerderstrom = sum(volumenstroeme_1) + sum(volumenstroeme_2)   #m³/h
                    pumpen = ifc_system.by_type('IfcPump')
                    for pumpe in pumpen:
                        if 'zum Verteiler' in pumpe.Name:
                            for property_set in pumpe.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_FlowMovingDevicePump":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = foerderhoehe
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = foerderstrom
                    # Spalten, die als int dargestellt werden sollen
                    int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
                    # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
                    df[int_spalten] = df[int_spalten].astype(int)
                    df.to_csv('Abgleich.csv')
                    pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
                    df_p = pd.DataFrame(pumpe)
                    pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
                    df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
                    df_p.to_csv('Pumpe.csv')
                    dfi.export(df_p, 'Pumpe.png')
                    dfi.export(df, 'Abgleich.png')
                    ifc_system.write('System_verbunden.ifc')  
                if stranganzahl == 3:
                    strang1_data = {}
                    strang2_data = {}
                    strang3_data = {}
                    rohre = ifc_system.by_type('IfcPipeSegment')
                    for rohr in rohre:
                        if 'Vorlauf zu Knoten1' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                    d_knoten = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                                    l_knoten = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                        elif 'Vorlauf zu Knoten2' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                    d_knoten12 = float(property_set.RelatingPropertyDefinition.Quantities[3].LengthValue)
                                    l_knoten12 = float(property_set.RelatingPropertyDefinition.Quantities[0].LengthValue)/1000
                    heizungsradiatoren = ifc_system.by_type('IfcSpaceHeater')
                    heizkoerper_liste = []
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    volumenstroeme_1 = []
                    volumenstroeme_2 = []
                    volumenstroeme_3 = []
                    volumenstroeme1 = {}
                    volumenstroeme2 = {}
                    volumenstroeme3 = {}
                    heizungs_daten = {}
                    #Heizkörperdaten erfassen
                    for heizkoerper in heizungsradiatoren:
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                betriebsleistung    = float(property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue)
                                vorlauftemperatur   = float(property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue)
                                ruecklauftemperatur = float(property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue)
                        rohr = heizkoerper.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        name               = str(heizkoerper.Name).split(' ')[0]
                        spreizung          = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (notwendiger_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue = notwendiger_volumenstrom
                        heizungs_daten[name] = {'Betriebsleistung': betriebsleistung, 'Vorlauf_T': vorlauftemperatur, 'Ruecklauf_T': ruecklauftemperatur,
                                            'Rohrlaenge': rohrlaenge, 'Rohrinnenabmessung': rohrinnenabmessung, 'Name':name, 'Volumenstrom':notwendiger_volumenstrom}
                    #Straenge festlegen
                    for heizkoerper in heizungsradiatoren:
                        heizkoerper_data = heizungs_daten[heizkoerper.Name.split(' ')[0]] 
                        strang = int(heizkoerper.Description.split('_').pop())
                        if int(strang) == 1:
                            strang1_data[heizkoerper.Name.split(' ')[0]] = heizkoerper_data 
                        elif int(strang) == 2:
                            strang2_data[heizkoerper.Name.split(' ')[0]] = heizkoerper_data
                        elif int(strang) == 3:
                            strang3_data[heizkoerper.Name.split(' ')[0]] = heizkoerper_data
                    abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],'Volumenstrom [m³/h]': [], 'P [W]': [], 
                        'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                        'Ventilautorität [-]': [], 'KVs_Wert [m³/h]': [], 'Strang': []})
                    df = pd.DataFrame(abgleich)
                    #strang1 volumenströme
                    for heizkoerper in strang1_data:
                        heizkoerper_data = strang1_data[heizkoerper]
                        name = heizkoerper_data['Name']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauf_T'])
                        ruecklauftemperatur = float(heizkoerper_data['Ruecklauf_T'])
                        betriebsleistung = float(heizkoerper_data['Betriebsleistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_1.append(notwendiger_volumenstrom)
                        volumenstroeme1[name] = notwendiger_volumenstrom
                    #strang2 volumenströme
                    for heizkoerper in strang2_data:
                        heizkoerper_data = strang2_data[heizkoerper]
                        name = heizkoerper_data['Name']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauf_T'])
                        ruecklauftemperatur = float(heizkoerper_data['Ruecklauf_T'])
                        betriebsleistung = float(heizkoerper_data['Betriebsleistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_2.append(notwendiger_volumenstrom)
                        volumenstroeme2[name] = notwendiger_volumenstrom     
                    #strang3 volumenströme
                    for heizkoerper in strang3_data:
                        heizkoerper_data = strang3_data[heizkoerper]
                        name = heizkoerper_data['Name']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauf_T'])
                        ruecklauftemperatur = float(heizkoerper_data['Ruecklauf_T'])
                        betriebsleistung = float(heizkoerper_data['Betriebsleistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_3.append(notwendiger_volumenstrom)
                        volumenstroeme3[name] = notwendiger_volumenstrom 
                    #verluste zu den strängen - strang1, strang2, strang 3
                    volumenstrom_knoten = sum(volumenstroeme_1) + sum(volumenstroeme_2) + sum(volumenstroeme_3)
                    rohrquerschnitt_knoten = math.pi*((d_knoten/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten = (volumenstrom_knoten/3600)/rohrquerschnitt_knoten   #m/s
                    for rohr in rohre:
                        if 'Vorlauf zu Knoten1' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr_knoten
                    reynoldzahl = (geschwindigkeit_rohr_knoten*(d_knoten/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten**2))/(d_knoten/1000*2)    #Pa/m
                        druckverlust_knoten = rohrreibungswiderstand*l_knoten*2
                    else:
                        f = colebrook_prandtl(k, d_knoten/1000, reynoldzahl)
                        druckverlust_knoten = darcy_weisbach(l_knoten*2, dichte_w, geschwindigkeit_rohr_knoten, d_knoten/1000, f)

                    zf = 1.0
                    zeta_t = 1.0
                    zf_b = 1.0
                    absperrventil_z = 2.4
                    absperrklappe_z = 1.2
                    rueckschlagklappe_z = 1.8
                    schmutzfaenger_z = 2.0
                    waermemengenzaehler_z = 2.0
                    kugelhahn_z = 1.30
                    
                    verluste_arm = (2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr_knoten**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr_knoten**2) + 
                            1*(absperrventil_z*(dichte_w/2)*geschwindigkeit_rohr_knoten**2) + 1*(absperrklappe_z*(dichte_w/2)*geschwindigkeit_rohr_knoten**2) + 
                            1*(rueckschlagklappe_z*(dichte_w/2)*geschwindigkeit_rohr_knoten**2) + 1*(schmutzfaenger_z*(dichte_w/2)*geschwindigkeit_rohr_knoten**2) + 
                            (waermemengenzaehler_z*(dichte_w/2)*geschwindigkeit_rohr_knoten**2) + 1*(kugelhahn_z*(dichte_w/2)*geschwindigkeit_rohr_knoten**2))
                    print(verluste_arm)
                    druckverlust_zu = (druckverlust_knoten+verluste_arm)*zf
                    verlust_K1 = druckverlust_zu
                    #verluste zu den knoten - strang1, strang2
                    volumenstrom_knoten12 = sum(volumenstroeme_1) + sum(volumenstroeme_2)
                    rohrquerschnitt_knoten12 = math.pi*((d_knoten12/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten12 = (volumenstrom_knoten12/3600)/rohrquerschnitt_knoten12   #m/s
                    for rohr in rohre:
                        if 'Vorlauf zu Knoten2' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr_knoten12
                    reynoldzahl = (geschwindigkeit_rohr_knoten12*(d_knoten12/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten12**2))/(d_knoten12/1000*2)    #Pa/m
                        druckverlust_knoten12 = rohrreibungswiderstand*l_knoten12*2
                    else:
                        f = colebrook_prandtl(k, d_knoten12/1000, reynoldzahl)
                        druckverlust_knoten12 = darcy_weisbach(l_knoten12*2, dichte_w, geschwindigkeit_rohr_knoten12, d_knoten12/1000, f)
                    zf = 1.0
                    zf_b = 1.0
                    verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr_knoten12**2 + 2*(zf_b*(dichte_w/2)*geschwindigkeit_rohr_knoten12**2)
                    druckverlust_zu12 = (druckverlust_knoten12+ verlust_t)*zf
                    verlust_K12 = verlust_K1 + druckverlust_zu12
                    #Stränge
                    heizungen = {}
                #Strang1
                ##HK1-1
                    if len(strang1_data) == 1: 
                        heizkoerper_data = strang1_data[hk1_1.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_1)
                        regeldifferenz = 1.0
                        name = str(hk1_1.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_bis1, regeldifferenz]
                    elif len(strang1_data) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 1" in hvac:
                                strang1_1 = hvac
                        for property_set in strang1_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_1)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        print(strang_volumenstrom)
                        for property_set in strang1_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        print(geschwindigkeit_rohr)
                        print(dichte_w)
                        print(zeta_t)
                        print(zf_b)
                        print(verlust_t)
                        druckverlust_1_1 = (druckverlust+ verlust_t)*zf
                        #HK1_1
                        name = str(hk1_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk1_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t = (druckverlust+ verlust_t)*zf
                        verlust_hk1_1 = verlust_t+ druckverlust_1_1 + verlust_K12
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk1_1, regeldifferenz]
                    #HK2_1
                    if len(strang1_data) == 2:
                        name = str(hk2_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk2_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_1 = verlust_t_2+ druckverlust_1_1 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk2_1, regeldifferenz]
                    elif len(strang1_data) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 2" in hvac:
                                strang1_2 = hvac
                        for property_set in strang1_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_1_2 = (druckverlust+ verlust_t)*zf
                        #HK2_1
                        name = str(hk2_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk2_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_1 = verlust_t_2+ druckverlust_1_1 + druckverlust_1_2 + verlust_K12
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk2_1, regeldifferenz]
                    #HK3_1
                    if len(strang1_data) == 3:
                        name = str(hk3_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk3_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_1 = verlust_t_3+ druckverlust_1_1 + druckverlust_1_2 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk3_1, regeldifferenz]
                    elif len(strang1_data) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 3" in hvac:
                                strang1_3 = hvac
                        for property_set in strang1_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_1_3  = (druckverlust+ verlust_t)*zf
                        #HK3_1
                        name = str(hk3_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk3_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t_3 = zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2
                        verlust_hk3_1 = verlust_t_3+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + verlust_K12
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk3_1, regeldifferenz]
                    #HK4_1
                    if len(strang1_data) == 4:
                        name = str(hk4_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk4_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4  = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_4+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk4_1, regeldifferenz]
                    elif len(strang1_data) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 4" in hvac:
                                strang1_4 = hvac
                        for property_set in strang1_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_1_4 = (druckverlust+ verlust_t)*zf
                        #HK4_1
                        name = str(hk4_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk4_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_4+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + druckverlust_1_4 + verlust_K12
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk4_1, regeldifferenz]               
                    if len(strang1_data) == 5:
                        name = str(hk5_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk5_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_1 = verlust_t_5+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + druckverlust_1_4 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk5_1, regeldifferenz]
                #Strang2
                ##HK1-2
                    if len(strang2_data) == 1: 
                        heizkoerper_data = strang2_data[hk1_2.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_2)
                        regeldifferenz = 1.0
                        name = str(hk1_2.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_bis1, regeldifferenz]
                    elif len(strang2_data) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 1" in hvac:
                                strang2_1 = hvac
                        for property_set in strang2_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_2)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_2_1 = (druckverlust+ verlust_t)*zf
                        #HK1_2
                        name = str(hk1_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk1_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t = (druckverlust+ verlust_t)*zf
                        verlust_hk1_2 = verlust_t+ druckverlust_2_1 + verlust_K12
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk1_2, regeldifferenz]
                    #HK2_2
                    if len(strang2_data) == 2:
                        name = str(hk2_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk2_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_2 = verlust_t_2+ druckverlust_2_1 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk2_2, regeldifferenz]
                    elif len(strang2_data) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 2" in hvac:
                                strang2_2 = hvac
                        for property_set in strang2_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_2_2 = (druckverlust+ verlust_t)*zf
                        #HK2_2
                        name = str(hk2_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk2_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_2 = verlust_t_2+ druckverlust_2_1 + druckverlust_2_2 + verlust_K12
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk2_2, regeldifferenz]
                    #HK3_2
                    if len(strang2_data) == 3:
                        name = str(hk3_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk3_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_2 = verlust_t_3+ druckverlust_2_1 + druckverlust_2_2 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk3_2, regeldifferenz]
                    elif len(strang2_data) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 3" in hvac:
                                strang2_3 = hvac
                        for property_set in strang2_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_2_3 = (druckverlust+ verlust_t)*zf
                        #HK3_2
                        name = str(hk3_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk3_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_2 = verlust_t_3+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + verlust_K12
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk3_2, regeldifferenz]
                    #HK4_2
                    if len(strang2_data) == 4:
                        name = str(hk4_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk4_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_4+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk4_2, regeldifferenz]
                    elif len(strang2_data) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 4" in hvac:
                                strang2_4 = hvac
                        for property_set in strang2_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_2_4 = (druckverlust+ verlust_t)*zf
                        #HK4_2
                        name = str(hk4_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk4_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_2 = verlust_t_4+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + druckverlust_2_4 + verlust_K12
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk4_2, regeldifferenz]               
                    if len(strang2_data) == 5:
                        #Hk5_2
                        name = str(hk5_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk5_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_2 = verlust_t_5+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + druckverlust_2_4 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk5_2, regeldifferenz] 
                #Strang3
                ##HK1-3
                    if len(strang3_data) == 1: 
                        heizkoerper_data = strang3_data[hk1_3.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_3)
                        regeldifferenz = 1.0
                        name = str(hk1_3.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_bis1, regeldifferenz]
                    elif len(strang3_data) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang3 - 1" in hvac:
                                strang3_1 = hvac
                        for property_set in strang3_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_3)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang3_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_3_1 = (druckverlust+ verlust_t)*zf
                        #HK1_1
                        name = str(hk1_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk1_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t = (druckverlust+ verlust_t)*zf
                        verlust_hk1_3 = verlust_t+ druckverlust_3_1 + verlust_K1
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk1_3, regeldifferenz]
                    #HK2_3
                    if len(strang3_data) == 2:
                        name = str(hk2_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk2_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_3 = verlust_t_2+ druckverlust_3_1 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk2_3, regeldifferenz]
                    elif len(strang3_data) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang3 - 2" in hvac:
                                strang3_2 = hvac
                        for property_set in strang3_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang3_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_3_2 = (druckverlust+ verlust_t)*zf
                        #HK2_3
                        name = str(hk2_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk2_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_3 = verlust_t_2+ druckverlust_3_1 + druckverlust_3_2 + verlust_K1
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk2_3, regeldifferenz]
                    #HK3_3
                    if len(strang3_data) == 3:
                        name = str(hk3_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk3_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_3 = verlust_t_3+ druckverlust_3_1 + druckverlust_3_2 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk3_3, regeldifferenz]
                    elif len(strang3_data) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang3 - 3" in hvac:
                                strang3_3 = hvac
                        for property_set in strang3_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang3_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        for property_set in strang3_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_3_3 = (druckverlust+ verlust_t)*zf
                        #HK3_3
                        name = str(hk3_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk3_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_3 = verlust_t_2+ druckverlust_3_1 + druckverlust_3_2 + druckverlust_3_3 + verlust_K1
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk3_3, regeldifferenz]
                    #HK4_3
                    if len(strang3_data) == 4:
                        name = str(hk4_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk4_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_3 = verlust_t_4+ druckverlust_3_1 + druckverlust_3_2 + druckverlust_3_3 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk4_3, regeldifferenz]
                    elif len(strang3_data) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang3 - 4" in hvac:
                                strang3_4 = hvac
                        for property_set in strang3_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang3_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_3_4 = (druckverlust+ verlust_t)*zf
                        #HK4_3
                        name = str(hk4_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk4_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_3 = verlust_t_4+ druckverlust_3_1 + druckverlust_3_2 + druckverlust_3_3 + druckverlust_3_4 + verlust_K1
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk4_3, regeldifferenz]               
                    if len(strang3_data) == 5:
                        name = str(hk5_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk5_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_3 = verlust_t_5+ druckverlust_3_1 + druckverlust_3_2 + druckverlust_3_3 + druckverlust_3_4 + verlust_K1
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk5_3, regeldifferenz]
                    #ungünstigster heizkörper
                    verluste = []
                    for heizkoerper in heizungsradiatoren:
                        for heizung in heizungen:
                            verluste.append(heizungen[heizung][5])
                    for heizkoerper in heizungsradiatoren:
                        name = heizkoerper.Name.split(' ')[0]
                        if heizungen[name][5] == max(verluste):
                            vorlauftemperatur = float(heizungs_daten[name]['Vorlauf_T'])
                            ruecklauftemperatur = float(heizungs_daten[name]['Ruecklauf_T'])
                            betriebsleistung = float(heizungs_daten[name]['Betriebsleistung'])
                            daten = heizungen[name]
                            strang = int(heizkoerper.Description.split('_').pop())
                            av = 0.3
                            pnetz = round(daten[5], 5)
                            pv100 = round((av/(1-av))*pnetz, 5)
                            pges = pnetz + pv100
                            ventilautoritaet = round(pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv}
                            neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': round(daten[4],3), 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': round(ventilautoritaet,2), 
                                                       'KVs_Wert [m³/h]': round(kv,3), 'Strang': strang}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper.Name.split(' ')[0])
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = daten[6]   
                    for heizkoerper in heizungsradiatoren:
                        heizkoerper_data = heizungs_daten[heizkoerper.Name.split(' ')[0]]  
                        if str(heizkoerper.Name.split(' ')[0]) in heizkoerper_liste:
                            pass
                        else:
                            name = heizkoerper.Name.split(' ')[0]
                            vorlauftemperatur = float(heizungs_daten[name]['Vorlauf_T'])
                            ruecklauftemperatur = float(heizungs_daten[name]['Ruecklauf_T'])
                            betriebsleistung = float(heizungs_daten[name]['Betriebsleistung'])
                            daten = heizungen[heizkoerper.Name.split(' ')[0]]
                            strang = int(heizkoerper.Description.split('_').pop())
                            pnetz = round(daten[5], 5)
                            pges = strang_u['pges']
                            pv100 = pges-pnetz
                            ventilautoritaet = round( pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': round(daten[4],3), 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': round(ventilautoritaet,2), 
                                                       'KVs_Wert [m³/h]': round(kv,3), 'Strang': strang}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper.Name.split(' ')[0])
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = daten[6] 
                    #Pumpenauslegung
                    foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
                    foerderstrom = sum(volumenstroeme_1) + sum(volumenstroeme_2) + sum(volumenstroeme_3)  #m³/h
                    pumpen = ifc_system.by_type('IfcPump')
                    for pumpe in pumpen:
                        if 'zum Verteiler' in pumpe.Name:
                            for property_set in pumpe.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_FlowMovingDevicePump":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = foerderhoehe
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = foerderstrom
                    # Spalten, die als int dargestellt werden sollen
                    int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
                    # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
                    df[int_spalten] = df[int_spalten].astype(int)
                    df.to_csv('Abgleich.csv')
                    pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
                    df_p = pd.DataFrame(pumpe)
                    pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
                    df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
                    df_p.to_csv('Pumpe.csv')
                    dfi.export(df_p, 'Pumpe.png')
                    dfi.export(df, 'Abgleich.png')
                    ifc_system.write('System_verbunden.ifc')      
                if stranganzahl == 4:
                    strang1_data = {}
                    strang2_data = {}
                    strang3_data = {}
                    strang4_data = {}
                    rohre = ifc_system.by_type('IfcPipeSegment')
                    for rohr in rohre:
                        if 'Vorlauf zu Knoten1' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                    d_knoten = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                                    l_knoten = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                        elif 'Vorlauf zu Knoten2' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                    d_knoten12 = float(property_set.RelatingPropertyDefinition.Quantities[3].LengthValue)
                                    l_knoten12 = float(property_set.RelatingPropertyDefinition.Quantities[0].LengthValue)/1000
                        elif 'Vorlauf zu Knoten3' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                    d_knoten34 = float(property_set.RelatingPropertyDefinition.Quantities[3].LengthValue)
                                    l_knoten34 = float(property_set.RelatingPropertyDefinition.Quantities[0].LengthValue)/1000
                    heizungsradiatoren = ifc_system.by_type('IfcSpaceHeater')
                    heizkoerper_liste = []
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    volumenstroeme_1 = []
                    volumenstroeme_2 = []
                    volumenstroeme_3 = []
                    volumenstroeme_4 = []
                    volumenstroeme1 = {}
                    volumenstroeme2 = {}
                    volumenstroeme3 = {}
                    volumenstroeme4 = {}
                    heizungs_daten = {}
                    #Heizkörperdaten erfassen
                    for heizkoerper in heizungsradiatoren:
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                betriebsleistung    = float(property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue)
                                vorlauftemperatur   = float(property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue)
                                ruecklauftemperatur = float(property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue)
                        rohr = heizkoerper.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        name               = str(heizkoerper.Name).split(' ')[0]
                        spreizung          = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (notwendiger_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue = notwendiger_volumenstrom
                        heizungs_daten[name] = {'Betriebsleistung': betriebsleistung, 'Vorlauf_T': vorlauftemperatur, 'Ruecklauf_T': ruecklauftemperatur,
                                            'Rohrlaenge': rohrlaenge, 'Rohrinnenabmessung': rohrinnenabmessung, 'Name':name, 'Volumenstrom':notwendiger_volumenstrom}
                    #Straenge festlegen
                    for heizkoerper in heizungsradiatoren:
                        heizkoerper_data = heizungs_daten[heizkoerper.Name.split(' ')[0]] 
                        strang = int(heizkoerper.Description.split('_').pop())
                        if int(strang) == 1:
                            strang1_data[heizkoerper.Name.split(' ')[0]] = heizkoerper_data 
                        elif int(strang) == 2:
                            strang2_data[heizkoerper.Name.split(' ')[0]] = heizkoerper_data
                        elif int(strang) == 3:
                            strang3_data[heizkoerper.Name.split(' ')[0]] = heizkoerper_data
                        elif int(strang) == 4:
                            strang4_data[heizkoerper.Name.split(' ')[0]] = heizkoerper_data
                    abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],'Volumenstrom [m³/h]': [], 'P [W]': [], 
                        'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                        'Ventilautorität [-]': [], 'KVs_Wert [m³/h]': [], 'Strang': []})
                    df = pd.DataFrame(abgleich)
                    #strang1 volumenströme
                    for heizkoerper in strang1_data:
                        heizkoerper_data = strang1_data[heizkoerper]
                        name = heizkoerper_data['Name']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauf_T'])
                        ruecklauftemperatur = float(heizkoerper_data['Ruecklauf_T'])
                        betriebsleistung = float(heizkoerper_data['Betriebsleistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_1.append(notwendiger_volumenstrom)
                        volumenstroeme1[name] = notwendiger_volumenstrom
                    #strang2 volumenströme
                    for heizkoerper in strang2_data:
                        heizkoerper_data = strang2_data[heizkoerper]
                        name = heizkoerper_data['Name']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauf_T'])
                        ruecklauftemperatur = float(heizkoerper_data['Ruecklauf_T'])
                        betriebsleistung = float(heizkoerper_data['Betriebsleistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_2.append(notwendiger_volumenstrom)
                        volumenstroeme2[name] = notwendiger_volumenstrom     
                    #strang3 volumenströme
                    for heizkoerper in strang3_data:
                        heizkoerper_data = strang3_data[heizkoerper]
                        name = heizkoerper_data['Name']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauf_T'])
                        ruecklauftemperatur = float(heizkoerper_data['Ruecklauf_T'])
                        betriebsleistung = float(heizkoerper_data['Betriebsleistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_3.append(notwendiger_volumenstrom)
                        volumenstroeme3[name] = notwendiger_volumenstrom 
                    #strang4 volumenströme
                    for heizkoerper in strang4_data:
                        heizkoerper_data = strang4_data[heizkoerper]
                        name = heizkoerper_data['Name']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauf_T'])
                        ruecklauftemperatur = float(heizkoerper_data['Ruecklauf_T'])
                        betriebsleistung = float(heizkoerper_data['Betriebsleistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_4.append(notwendiger_volumenstrom)
                        volumenstroeme4[name] = notwendiger_volumenstrom 
                    #verluste zu den strängen - strang1, strang2, strang 3, strang4
                    volumenstrom_knoten = sum(volumenstroeme_1) + sum(volumenstroeme_2) + sum(volumenstroeme_3) + sum(volumenstroeme_4)
                    rohrquerschnitt_knoten = math.pi*((d_knoten/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten = (volumenstrom_knoten/3600)/rohrquerschnitt_knoten   #m/s
                    for rohr in rohre:
                        if 'Vorlauf zu Knoten1' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr_knoten
                    reynoldzahl = (geschwindigkeit_rohr_knoten*(d_knoten/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten**2))/(d_knoten/1000*2)    #Pa/m
                        druckverlust_knoten = rohrreibungswiderstand*l_knoten*2
                    else:
                        f = colebrook_prandtl(k, d_knoten/1000, reynoldzahl)
                        druckverlust_knoten = darcy_weisbach(l_knoten*2, dichte_w, geschwindigkeit_rohr_knoten, d_knoten/1000, f)
                    zf = 1.0
                    zeta_t = 1.0
                    zf_b = 1.0
                    absperrventil_z = 2.4
                    absperrklappe_z = 1.2
                    rueckschlagklappe_z = 1.8
                    schmutzfaenger_z = 2.0
                    waermemengenzaehler_z = 2.0
                    kugelhahn_z = 1.30
                    
                    verluste_arm = (2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            1*(absperrventil_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(absperrklappe_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            1*(rueckschlagklappe_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(schmutzfaenger_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 
                            (waermemengenzaehler_z*(dichte_w/2)*geschwindigkeit_rohr**2) + 1*(kugelhahn_z*(dichte_w/2)*geschwindigkeit_rohr**2))
                    druckverlust_zu = (druckverlust_knoten+verluste_arm)*zf
                    verlust_K1 = druckverlust_zu


                    #verluste zu den knoten - strang1, strang2
                    volumenstrom_knoten12 = sum(volumenstroeme_1) + sum(volumenstroeme_2)
                    rohrquerschnitt_knoten12 = math.pi*((d_knoten12/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten12 = (volumenstrom_knoten12/3600)/rohrquerschnitt_knoten12   #m/s
                    for rohr in rohre:
                        if 'Vorlauf zu Knoten2' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr_knoten12
                    reynoldzahl = (geschwindigkeit_rohr_knoten12*(d_knoten12/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten12**2))/(d_knoten12/1000*2)    #Pa/m
                        druckverlust_knoten12 = rohrreibungswiderstand*l_knoten12*2
                    else:
                        f = colebrook_prandtl(k, d_knoten12/1000, reynoldzahl)
                        druckverlust_knoten12 = darcy_weisbach(l_knoten12*2, dichte_w, geschwindigkeit_rohr_knoten12, d_knoten12/1000, f)
                    zf = 1.0
                    zf_b = 1.0
                    verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr_knoten12**2 + 2*(zf_b*(dichte_w/2)*geschwindigkeit_rohr_knoten12**2)
                    druckverlust_zu12 = (druckverlust_knoten12+ verlust_t)*zf
                    verlust_K12 = verlust_K1 + druckverlust_zu12
                    #verluste zu den knoten - strang3, strang4
                    volumenstrom_knoten34 = sum(volumenstroeme_3) + sum(volumenstroeme_4)
                    rohrquerschnitt_knoten34 = math.pi*((d_knoten34/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten34 = (volumenstrom_knoten34/3600)/rohrquerschnitt_knoten34   #m/s
                    for rohr in rohre:
                        if 'Vorlauf zu Knoten3' in rohr.Name:
                            for property_set in rohr.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr_knoten34
                    reynoldzahl = (geschwindigkeit_rohr_knoten34*(d_knoten34/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten34**2))/(d_knoten34/1000*2)    #Pa/m
                        druckverlust_knoten34 = rohrreibungswiderstand*l_knoten34*2
                    else:
                        f = colebrook_prandtl(k, d_knoten34/1000, reynoldzahl)
                        druckverlust_knoten34 = darcy_weisbach(l_knoten34*2, dichte_w, geschwindigkeit_rohr_knoten34, d_knoten34/1000, f)
                    zf = 1.0
                    zf_b = 1.0
                    verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr_knoten34**2 + 2*(zf_b*(dichte_w/2)*geschwindigkeit_rohr_knoten34**2)
                    druckverlust_zu34 = (druckverlust_knoten34+ verlust_t)*zf
                    verlust_K34 = verlust_K1 + druckverlust_zu34  
                    
                    #Stränge
                    heizungen = {}
                #Strang1
                ##HK1-1
                    if len(strang1_data) == 1: 
                        heizkoerper_data = strang1_data[hk1_1.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_1)
                        regeldifferenz = 1.0
                        name = str(hk1_1.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_bis1, regeldifferenz]
                    elif len(strang1_data) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 1" in hvac:
                                strang1_1 = hvac
                        for property_set in strang1_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_1)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_1_1 = (druckverlust+ verlust_t)*zf
                        #HK1_1
                        name = str(hk1_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk1_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_1 = (druckverlust+ verlust_t)*zf
                        verlust_hk1_1 = verlust_t_1 + druckverlust_1_1
                        
                        verlust_hk1_1 = verlust_t+ druckverlust_1_1 + verlust_K12
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk1_1, regeldifferenz]
                    #HK2_1
                    if len(strang1_data) == 2:
                        name = str(hk2_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk2_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_1 = verlust_t_2+ druckverlust_1_1 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk2_1, regeldifferenz]
                    elif len(strang1_data) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 2" in hvac:
                                strang1_2 = hvac
                        for property_set in strang1_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_1_2 = (druckverlust+ verlust_t)*zf
                        #HK2_1
                        name = str(hk2_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk2_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_1 = verlust_t_2+ druckverlust_1_1 + verlust_K12
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk2_1, regeldifferenz]
                    #HK3_1
                    if len(strang1_data) == 3:
                        name = str(hk3_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk3_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_1 = verlust_t_3+ druckverlust_1_1 + druckverlust_1_2 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk3_1, regeldifferenz]
                    elif len(strang1_data) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 3" in hvac:
                                strang1_3 = hvac
                        for property_set in strang1_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_1_3 = (druckverlust+ verlust_t)*zf
                        #HK3_1
                        name = str(hk3_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk3_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_1 = verlust_t_2+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + verlust_K12
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk3_1, regeldifferenz]
                    #HK4_1
                    if len(strang1_data) == 4:
                        name = str(hk4_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk4_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_4+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk4_1, regeldifferenz]
                    elif len(strang1_data) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang1 - 4" in hvac:
                                strang1_4 = hvac
                        for property_set in strang1_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang1_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_1_4 = (druckverlust+ verlust_t)*zf
                        #HK4_1
                        name = str(hk4_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk4_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_2+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + druckverlust_1_4 + verlust_K12
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk4_1, regeldifferenz]               
                    if len(strang1_data) == 5:
                        name = str(hk5_1.Name).split(' ')[0]
                        heizkoerper_data = strang1_data[hk5_1.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme1[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_1 = verlust_t_5+ druckverlust_1_1 + druckverlust_1_2 + druckverlust_1_3 + druckverlust_1_4 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[name], verlust_hk5_1, regeldifferenz]
                #Strang2
                ##HK1-2
                    if len(strang2_data) == 1: 
                        heizkoerper_data = strang2_data[hk1_2.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_2)
                        regeldifferenz = 1.0
                        name = str(hk1_2.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_bis1, regeldifferenz]
                    elif len(strang2_data) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 1" in hvac:
                                strang2_1 = hvac
                        for property_set in strang2_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_2)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        druckverlust_2_1 = (druckverlust+ verlust_t)*zf
                        #HK1_2
                        name = str(hk1_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk1_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2)
                        verlust_hk1_2 = verlust_t+ druckverlust_2_1 + verlust_K12
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk1_2, regeldifferenz]
                    #HK2_2
                    if len(strang2_data) == 2:
                        name = str(hk2_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk2_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_2 = verlust_t_2+ druckverlust_2_1 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk2_2, regeldifferenz]
                    elif len(strang2_data) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 2" in hvac:
                                strang2_2 = hvac
                        for property_set in strang2_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_2_2 = (druckverlust+ verlust_t)*zf
                        #HK2_2
                        name = str(hk2_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk2_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_2 = verlust_t_2+ druckverlust_2_1 + druckverlust_2_2 + verlust_K12
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk2_2, regeldifferenz]
                    #HK3_2
                    if len(strang2_data) == 3:
                        name = str(hk3_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk3_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_2 = verlust_t_3+ druckverlust_2_1 + druckverlust_2_2 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk3_2, regeldifferenz]
                    elif len(strang2_data) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 3" in hvac:
                                strang2_3 = hvac
                        for property_set in strang2_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_2_3 = (druckverlust+ verlust_t)*zf
                        #HK3_2
                        name = str(hk3_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk3_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_2 = verlust_t_2+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + verlust_K12
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk3_2, regeldifferenz]
                    #HK4_2
                    if len(strang2_data) == 4:
                        name = str(hk4_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk4_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_1 = verlust_t_4+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk4_2, regeldifferenz]
                    elif len(strang2_data) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang2 - 4" in hvac:
                                strang2_4 = hvac
                        for property_set in strang2_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang2_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_2_4 = (druckverlust+ verlust_t)*zf
                        #HK4_2
                        name = str(hk4_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk4_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_2 = verlust_t_2+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + druckverlust_2_4 + verlust_K12
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk4_2, regeldifferenz]               
                    if len(strang2_data) == 5:
                        #Hk5_2
                        name = str(hk5_2.Name).split(' ')[0]
                        heizkoerper_data = strang2_data[hk5_2.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme2[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_2 = verlust_t_5+ druckverlust_2_1 + druckverlust_2_2 + druckverlust_2_3 + druckverlust_2_4 + verlust_K12
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[name], verlust_hk5_2, regeldifferenz] 
                #Strang3
                ##HK1-3
                    if len(strang3_data) == 1: 
                        heizkoerper_data = strang3_data[hk1_3.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_3)
                        regeldifferenz = 1.0
                        name = str(hk1_3.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_bis1, regeldifferenz]
                    elif len(strang3_data) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang3 - 1" in hvac:
                                strang3_1 = hvac
                        for property_set in strang3_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_3)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang3_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_3_1 = (druckverlust+ verlust_t)*zf
                        #HK1_3
                        name = str(hk1_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk1_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_hk1_3 = verlust_t+ druckverlust_3_1 + verlust_K34
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk1_3, regeldifferenz]
                    #HK2_3
                    if len(strang3_data) == 2:
                        name = str(hk2_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk2_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_3 = verlust_t_2+ druckverlust_3_1 + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk2_3, regeldifferenz]
                    elif len(strang3_data) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang3 - 2" in hvac:
                                strang3_2 = hvac
                        for property_set in strang3_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang3_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_3_2 = (druckverlust+ verlust_t)*zf
                        #HK2_3
                        name = str(hk2_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk2_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_3 = verlust_t_2+ druckverlust_3_1 + druckverlust_3_2 + verlust_K34
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk2_3, regeldifferenz]
                    #HK3_3
                    if len(strang3_data) == 3:
                        name = str(hk3_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk3_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_3 = verlust_t_3+ druckverlust_3_1 + druckverlust_3_2 + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk3_3, regeldifferenz]
                    elif len(strang3_data) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang3 - 3" in hvac:
                                strang3_3 = hvac
                        for property_set in strang3_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang3_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_3_3 = (druckverlust+ verlust_t)*zf
                        #HK3_3
                        name = str(hk3_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk3_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_3 = verlust_t_2+ druckverlust_3_1 + druckverlust_3_2 + druckverlust_3_3 + verlust_K34
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk3_3, regeldifferenz]
                    #HK4_3
                    if len(strang3_data) == 4:
                        name = str(hk4_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk4_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_3 = verlust_t_4+ druckverlust_3_1 + druckverlust_3_2 + druckverlust_3_3 + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk4_3, regeldifferenz]
                    elif len(strang3_data) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang3 - 4" in hvac:
                                strang3_4 = hvac
                        for property_set in strang3_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang3_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_3_4 = (druckverlust+ verlust_t)*zf
                        #HK4_3
                        name = str(hk4_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk4_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_3 = verlust_t_2+ druckverlust_3_1 + druckverlust_3_2 + druckverlust_3_3 + druckverlust_3_4 + verlust_K34
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk4_3, regeldifferenz]               
                    if len(strang3_data) == 5:
                        name = str(hk5_3.Name).split(' ')[0]
                        heizkoerper_data = strang3_data[hk5_3.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme3[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_3 = verlust_t_5+ druckverlust_3_1 + druckverlust_3_2 + druckverlust_3_3 + druckverlust_3_4 + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[name], verlust_hk5_3, regeldifferenz]
                #Strang4
                ##HK1-4
                    if len(strang4_data) == 1: 
                        heizkoerper_data = strang4_data[hk1_4.Name.split(' ')[0]]
                        volumenstrom = sum(volumenstroeme_4)
                        regeldifferenz = 1.0
                        name = str(hk1_4.Name).split(' ')[0]
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_z = (druckverlust+ verlust_t)*zf
                        verlust_bis1 = druckverlust_z + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[name], verlust_bis1, regeldifferenz]
                    elif len(strang4_data) > 1:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang4 - 1" in hvac:
                                strang4_1 = hvac
                        for property_set in strang4_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1
                        strang_volumenstrom = sum(volumenstroeme_4)
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (strang_volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang4_1.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_4_1 = (druckverlust+ verlust_t)*zf
                        #HK1_4
                        name = str(hk1_4.Name).split(' ')[0]
                        heizkoerper_data = strang4_data[hk1_4.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme4[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_hk1_4 = verlust_t+ druckverlust_4_1 + verlust_K34
                        volumenstrom_neu = strang_volumenstrom - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[name], verlust_hk1_4, regeldifferenz]
                    #HK2_4
                    if len(strang4_data) == 2:
                        name = str(hk2_4.Name).split(' ')[0]
                        heizkoerper_data = strang4_data[hk2_4.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme4[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_4 = verlust_t_2+ druckverlust_4_1 + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[name], verlust_hk2_4, regeldifferenz]
                    elif len(strang4_data) > 2:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang4 - 2" in hvac:
                                strang4_2 = hvac
                        for property_set in strang4_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T1 bis T2
                        volumenstrom = volumenstrom_neu
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang4_2.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_4_2 = (druckverlust+ verlust_t)*zf
                        #HK2_3
                        name = str(hk2_4.Name).split(' ')[0]
                        heizkoerper_data = strang4_data[hk2_4.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme4[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_2 = (druckverlust+ verlust_t)*zf
                        verlust_hk2_4 = verlust_t_2+ druckverlust_4_1 + druckverlust_4_2 + verlust_K34
                        volumenstrom_neu2 = volumenstrom_neu - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[name], verlust_hk2_4, regeldifferenz]
                    #HK3_4
                    if len(strang4_data) == 3:
                        name = str(hk3_4.Name).split(' ')[0]
                        heizkoerper_data = strang4_data[hk3_4.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme4[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_4 = verlust_t_3+ druckverlust_4_1 + druckverlust_4_2 + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[name], verlust_hk3_4, regeldifferenz]
                    elif len(strang4_data) > 3:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang4 - 3" in hvac:
                                strang4_3 = hvac
                        for property_set in strang4_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T2 bis T3
                        volumenstrom = volumenstrom_neu2
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang4_3.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_4_3 = (druckverlust+ verlust_t)*zf
                        #HK3_4
                        name = str(hk3_4.Name).split(' ')[0]
                        heizkoerper_data = strang4_data[hk3_4.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme4[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_3 = (druckverlust+ verlust_t)*zf
                        verlust_hk3_4 = verlust_t_2+ druckverlust_4_1 + druckverlust_4_2 + druckverlust_4_3 + verlust_K34
                        volumenstrom_neu3 = volumenstrom_neu2 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[name], verlust_hk3_4, regeldifferenz]
                    #HK4_4
                    if len(strang4_data) == 4:
                        name = str(hk4_4.Name).split(' ')[0]
                        heizkoerper_data = strang4_data[hk4_4.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme4[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_4 = verlust_t_4+ druckverlust_4_1 + druckverlust_4_2 + druckverlust_4_3 + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[name], verlust_hk4_4, regeldifferenz]
                    elif len(strang4_data) > 4:
                        for hvac in hvac_components:
                            if "Rohr - Vorlauf Strang4 - 4" in hvac:
                                strang4_4 = hvac
                        for property_set in strang4_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        #verluste bis T3 bis T4
                        volumenstrom = volumenstrom_neu3
                        regeldifferenz = 1.0
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        for property_set in strang4_4.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue= geschwindigkeit_rohr
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        druckverlust_4_4 = (druckverlust+ verlust_t)*zf
                        #HK4_4
                        name = str(hk4_4.Name).split(' ')[0]
                        heizkoerper_data = strang4_data[hk4_4.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme4[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_4 = (druckverlust+ verlust_t)*zf
                        verlust_hk4_4 = verlust_t_2+ druckverlust_4_1 + druckverlust_4_2 + druckverlust_4_3 + druckverlust_4_4 + verlust_K34
                        volumenstrom_neu4 = volumenstrom_neu3 - volumenstrom
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[name], verlust_hk4_4, regeldifferenz]               
                    if len(strang4_data) == 5:
                        name = str(hk5_4.Name).split(' ')[0]
                        heizkoerper_data = strang4_data[hk5_4.Name.split(' ')[0]]
                        volumenstrom = volumenstroeme4[name]
                        regeldifferenz = 1.0
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnenabmessung'])
                        rohrlaenge = float(heizkoerper_data['Rohrlaenge'])/1000
                        rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                        geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                        reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                        if reynoldzahl <= 2320:
                            reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                            rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                            druckverlust = rohrreibungswiderstand*rohrlaenge*2
                        else:
                            f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                            druckverlust = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                        zf = 1.0
                        zf_b = 1.0
                        verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                        verlust_t_5 = (druckverlust+ verlust_t)*zf
                        verlust_hk5_4 = verlust_t_5+ druckverlust_4_1 + druckverlust_4_2 + druckverlust_4_3 + druckverlust_4_4 + verlust_K34
                        heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[name], verlust_hk5_4, regeldifferenz]    
                    #ungünstigster heizkörper
                    verluste = []
                    for heizkoerper in heizungsradiatoren:
                        for heizung in heizungen:
                            verluste.append(heizungen[heizung][5])
                    for heizkoerper in heizungsradiatoren:
                        name = heizkoerper.Name.split(' ')[0]
                        if heizungen[name][5] == max(verluste):
                            vorlauftemperatur = float(heizungs_daten[name]['Vorlauf_T'])
                            ruecklauftemperatur = float(heizungs_daten[name]['Ruecklauf_T'])
                            betriebsleistung = float(heizungs_daten[name]['Betriebsleistung'])
                            daten = heizungen[name]
                            strang = int(heizkoerper.Description.split('_').pop())
                            av = 0.3
                            pnetz = round(daten[5], 5)
                            pv100 = round((av/(1-av))*pnetz, 5)
                            pges = pnetz + pv100
                            ventilautoritaet = round(pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv}
                            neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': round(daten[4],3), 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': round(ventilautoritaet,2), 
                                                       'KVs_Wert [m³/h]': round(kv,3), 'Strang': strang}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper.Name.split(' ')[0])
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = daten[6]   
                    for heizkoerper in heizungsradiatoren:
                        heizkoerper_data = heizungs_daten[heizkoerper.Name.split(' ')[0]]  
                        if str(heizkoerper.Name.split(' ')[0]) in heizkoerper_liste:
                            pass
                        else:
                            name = heizkoerper.Name.split(' ')[0]
                            vorlauftemperatur = float(heizungs_daten[name]['Vorlauf_T'])
                            ruecklauftemperatur = float(heizungs_daten[name]['Ruecklauf_T'])
                            betriebsleistung = float(heizungs_daten[name]['Betriebsleistung'])
                            daten = heizungen[heizkoerper.Name.split(' ')[0]]
                            strang = int(heizkoerper.Description.split('_').pop())
                            pnetz = round(daten[5], 5)
                            pges = strang_u['pges']
                            pv100 = pges-pnetz
                            ventilautoritaet = round( pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': round(daten[4],3), 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': round(ventilautoritaet,2), 
                                                       'KVs_Wert [m³/h]': round(kv,3), 'Strang': strang}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper.Name.split(' ')[0])
                            for property_set in heizkoerper.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = daten[6] 
                    #Pumpenauslegung
                    foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
                    foerderstrom = sum(volumenstroeme_1) + sum(volumenstroeme_2) + sum(volumenstroeme_3) + sum(volumenstroeme_4)  #m³/h
                    pumpen = ifc_system.by_type('IfcPump')
                    for pumpe in pumpen:
                        if 'zum Verteiler' in pumpe.Name:
                            for property_set in pumpe.IsDefinedBy:
                                if property_set.RelatingPropertyDefinition.Name == "Pset_FlowMovingDevicePump":
                                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = foerderhoehe
                                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = foerderstrom
                    # Spalten, die als int dargestellt werden sollen
                    int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
                    # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
                    df[int_spalten] = df[int_spalten].astype(int)
                    df.to_csv('Abgleich.csv')
                    pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
                    df_p = pd.DataFrame(pumpe)
                    pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
                    df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
                    df_p.to_csv('Pumpe.csv')
                    dfi.export(df_p, 'Pumpe.png')
                    dfi.export(df, 'Abgleich.png')
                    ifc_system.write('System_verbunden.ifc') 
                self.app.root.add_widget(Abgleich_Anlage3(name="Abgleich_Anlage3"))
                self.app.root.current = 'Abgleich_Anlage3'
                self.app.root.transition.direction = "left"
        
        elif button.text == "Hydraulischer Abgleich der erfassten Anlage (vereinfacht)":
            ifc_techno = ifcopenshell.open("System.ifc")
            techno = ifc_techno.by_type("IfcBuilding")[0]
            if 'FBH' in techno.Description:
                print('no')
            else:
                self.app.root.add_widget(Abgleich_vereinfacht_HK(name="Abgleich_vereinfacht_HK"))
                self.app.root.current = 'Abgleich_vereinfacht_HK'
                self.app.root.transition.direction = "left"
        elif button.text == "zurück zur Auswahl des hydraulischen Abgleichs":
            self.app.root.current = 'Auto_Abgleich'
            self.app.root.transition.direction = "right"
        
        elif button.text == "Berechnung des vereinfachten hydraulischen Abgleichs":
            ifc_system = ifcopenshell.open('System_verbunden.ifc')
            hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
            building = ifc_system.by_type('IfcBuilding')[0]
            heizungsradiatoren = ifc_system.by_type('IfcSpaceHeater')
            druck_l = float(self.druck_anzeige.text.split(' ')[0])
            druck_v = float(self.druck1_anzeige.text.split(' ')[0])
            abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],'Volumenstrom [m³/h]': [], 'P [W]': [],
                         'KVs_Wert [m³/h]': []})
            df = pd.DataFrame(abgleich)
            dichte_w = 995 #kg/m³
            k = 0.03
            waermekapazitaet_wasser = 1.16 #Wh/kg*K
            volumenstroeme = []
            #Volumenströme berechnen
            heizungs_daten = {}
            for heizkoerper in heizungsradiatoren:
                for property_set in heizkoerper.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                        betriebsleistung    = float(property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue)
                        vorlauftemperatur   = float(property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue)
                        ruecklauftemperatur = float(property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue)
                name = str(heizkoerper.Name).split(' ')[0]
                spreizung          = vorlauftemperatur - ruecklauftemperatur
                notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w), 3)  #m³/h
                for property_set in heizkoerper.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                        property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue = notwendiger_volumenstrom
                        
                volumenstroeme.append(notwendiger_volumenstrom)  
                #KVs-Wert
                kv = notwendiger_volumenstrom*math.sqrt(1/(druck_v/1000))   #m³/h    
                heizungs_daten[name] = {'Betriebsleistung': betriebsleistung, 'Vorlauf_T': vorlauftemperatur, 'Ruecklauf_T': ruecklauftemperatur, 
                                        'KVs_Wert [m³/h]': round(kv,3), 'Name':name}
                neue_reihe = pd.DataFrame({'Name':heizkoerper.Name.split(' ')[0],
                                           'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': round(notwendiger_volumenstrom, 4), 
                                                       'P [W]': int(round(betriebsleistung)), 'KVs_Wert [m³/h]': round(kv,3)}, index = [0])
                df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
            #Pumpe
            foerderhoehe = round((druck_l+druck_v)*0.00010197442889221*100, 5)  #mWs
            foerderstrom = sum(volumenstroeme) #m³/h
            pumpen = ifc_system.by_type('IfcPump')
            for pumpe in pumpen:
                if 'zum Verteiler' in pumpe.Name:
                    for property_set in pumpe.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Pset_FlowMovingDevicePump":
                            property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = foerderhoehe
                            property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = foerderstrom
            # Spalten, die als int dargestellt werden sollen
            int_spalten = ['P [W]']
            # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
            df[int_spalten] = df[int_spalten].astype(int)
            df.to_csv('Abgleich_vereinfacht.csv')
            pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
            df_p = pd.DataFrame(pumpe)
            pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
            df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
            df_p.to_csv('Pumpe_vereinfacht.csv')
            dfi.export(df_p, 'Pumpe_vereinfacht.png')
            dfi.export(df, 'Abgleich_vereinfacht.png')
            ifc_system.write('System_verbunden.ifc')  
            self.app.root.add_widget(Abgleich_vereinfacht_HK2(name="Abgleich_vereinfacht_HK2"))
            self.app.root.current = 'Abgleich_vereinfacht_HK2'
            self.app.root.transition.direction = "left"  
            
            
        elif button.text == "Temperaturen festlegen und Berechnung durchführen":       #Automatischer hydraulischer Abgleich mit erfasster Anlage > nächste Folie
            ifc_system_neu = ifcopenshell.open('System.ifc')        
            temperaturen = {}    
            for txt, txt1, imp, in self.imps:
                temperaturen[txt.text] = [txt1.text, imp.text]
            if temperaturen['Vorlauftemperatur'][1] == '':
                vorlauftemperatur = float(temperaturen['Vorlauftemperatur'][0])
            else:
                vorlauftemperatur = float(temperaturen['Vorlauftemperatur'][1])
            if temperaturen['Rücklauftemperatur'][1] == '':
                ruecklauftemperatur = float(temperaturen['Rücklauftemperatur'][0])
            else:
                ruecklauftemperatur = float(temperaturen['Rücklauftemperatur'][1])
            for element in ifc_system_neu.by_type('IfcSpaceHeater'):
                if 'Fussbodenheizung' in element.Name:
                    for property_set in element.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                            property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = vorlauftemperatur
                            property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = ruecklauftemperatur
                else:
                    pass
            system_neu = ifc_system_neu.by_type("IfcBuilding")[0]
            for property_set in system_neu.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = vorlauftemperatur
                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = ruecklauftemperatur
                elif property_set.RelatingPropertyDefinition.Name == "Pset_System":
                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = vorlauftemperatur
                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = ruecklauftemperatur
            ifc_system_neu.write("System.ifc")
            ifc_system = ifcopenshell.open('System.ifc')
            abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [], 'Volumenstrom [m³/h]': [], 'P [W]': [], 'L [m]': [],
                'd [mm]': [], 'R-Wert [Pa/m]': [], 'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                'Ventilautorität [-]': []})
            df = pd.DataFrame(abgleich)
            strangverluste = {}
            strangverluste_liste = []
            strangverluste_n = {}
            heizkoerper_liste = []
            volumenstroeme = []
            volumenstroeme_liste = {}
            for heizflaeche in ifc_system_neu.by_type('IfcSpaceHeater'):
                if 'Fussbodenheizung' in heizflaeche.Name:
                    art = 'Fußbodenheizung'
                    name = heizflaeche.Name
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    rohr = heizflaeche.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                    for property_set in rohr.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                            rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue
                            rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                    for property_set in heizflaeche.IsDefinedBy:
                        if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                            betriebsleistung = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
                            vorlauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                            ruecklauftemperatur =property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                    spreizung = vorlauftemperatur - ruecklauftemperatur
                    notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                    volumenstroeme.append(notwendiger_volumenstrom)
                    volumenstroeme_liste[name] = notwendiger_volumenstrom
                    rohrquerschnitt = math.pi*(rohrinnenabmessung/2/1000)**2     #m²
                    geschwindigkeit_rohr = (notwendiger_volumenstrom/3600)/rohrquerschnitt   #m/s
                    reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                        druckverlust_leitung1 = rohrreibungswiderstand*rohrlaenge*2
                    else:
                        f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                        druckverlust_leitung1 = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                    zf = 1.0
                    druckverlust_leitung = druckverlust_leitung1*zf
                    for property_set in rohr.IsDefinedBy:                        
                        if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                            property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue = geschwindigkeit_rohr 
                            property_set.RelatingPropertyDefinition.HasProperties[16].NominalValue.wrappedValue = rohrreibungswiderstand
                            property_set.RelatingPropertyDefinition.HasProperties[17].NominalValue.wrappedValue = druckverlust_leitung
                    strangverluste[druckverlust_leitung] = name
                    strangverluste_n[name] = druckverlust_leitung
                    strangverluste_liste.append(druckverlust_leitung)
            #ungünstigsten strang berechnen
            volumenstroeme = []
            for heizflaeche in ifc_system_neu.by_type('IfcSpaceHeater'):
                if strangverluste[max(strangverluste_liste)] == heizflaeche.Name:
                    av = 0.3
                    pnetz = round(max(strangverluste_liste), 5)
                    pv100 = round((av/(1-av))*pnetz, 5)
                    pges = pnetz + pv100
                    ventilautoritaet = round(pv100/pges, 5)
                    if 'Fussbodenheizung' in heizflaeche.Name:
                        art = 'Fussbodenheizung'
                        volumenstrom = volumenstroeme_liste[heizflaeche.Name] 
                        rohr = heizflaeche.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        for property_set in heizflaeche.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                betriebsleistung    = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
                                vorlauftemperatur   = property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                                ruecklauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                                property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue = volumenstrom 
                        volumenstroeme.append(volumenstrom)
                        kv = notwendiger_volumenstrom*math.sqrt((1/(pv100/100000)*(995/1000)))
                        for property_set in heizflaeche.IsDefinedBy:
                            if  property_set.RelatingPropertyDefinition.Name == "Pset_DistributionChamberElementTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                auslegungsproportionalbereich = property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
                        for property_set in rohr.IsDefinedBy:
                            if  property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                geschwindigkeit        = property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue
                                rohrreibungswiderstand = property_set.RelatingPropertyDefinition.HasProperties[16].NominalValue.wrappedValue
                                druckverlust_leitung   = property_set.RelatingPropertyDefinition.HasProperties[17].NominalValue.wrappedValue
                            elif property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        heizkoerper_liste.append(heizflaeche.Name)
                    elif 'Heizkoerper' or 'Heizkörper' in heizflaeche.Name:
                        art = 'Heizkoerper'
                        rohr = heizflaeche.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        for property_set in heizflaeche.IsDefinedBy:
                            if  property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                betriebsleistung    = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                                vorlauftemperatur   = property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
                                ruecklauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue
                                volumenstrom        = property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue
                        volumenstroeme.append(volumenstrom)
                        kv = volumenstrom*math.sqrt((1/(pv100/100000)*(995/1000)))  #m³/h
                        for property_set in heizflaeche.IsDefinedBy:
                            if  property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                        for property_set in rohr.IsDefinedBy:
                            if  property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                geschwindigkeit        = property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue
                                rohrreibungswiderstand = property_set.RelatingPropertyDefinition.HasProperties[16].NominalValue.wrappedValue
                                druckverlust_leitung   = property_set.RelatingPropertyDefinition.HasProperties[17].NominalValue.wrappedValue
                            elif property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                        heizkoerper_liste.append(heizflaeche.Name)
                    strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv, 'v': volumenstrom}
                    neue_reihe = pd.DataFrame({'Name':heizflaeche.Name.split(' ')[0]+' '+heizflaeche.Name.split(' ')[1], 'Art': art,
                                  'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': volumenstrom, 
                                  'P [W]': int(round(betriebsleistung)), 'L [m]': rohrlaenge, 'd [mm]': rohrinnenabmessung, 
                                  'v [m/s]': geschwindigkeit, 'R-Wert [Pa/m]': rohrreibungswiderstand,
                                  'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(pges)), 
                                  'Druckv. Ventil [Pa]': int(round(pv100)),
                                  'Ventilautorität [-]': ventilautoritaet, 'KVs_Wert [m³/h]': kv}, index = [0])
                    df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
            for heizkoerper in ifc_system_neu.by_type('IfcSpaceHeater'):
                if heizkoerper.Name in heizkoerper_liste:
                    pass
                else:
                    name = heizkoerper.Name
                    auslegungsproportionalbereich = 1.0
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    if 'Fussbodenheizung' in heizkoerper.Name:
                        art = 'Fussbodenheizung'
                        rohr = heizkoerper.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                betriebsleistung    = property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue
                                vorlauftemperatur   = property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                                ruecklauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                        for property_set in rohr.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                                rohrlaenge = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue
                                rohrinnenabmessung = property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                    if 'Fussbodenheizung' in heizkoerper.Name:
                        rohr = heizkoerper.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                        for property_set in heizkoerper.IsDefinedBy:
                            if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = notwendiger_volumenstrom
                            elif  property_set.RelatingPropertyDefinition.Name == "Pset_DistributionChamberElementTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = pv100
                                property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = pges
                                property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = ventilautoritaet
                                property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = kv
                                property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = auslegungsproportionalbereich
                        for property_set in rohr.IsDefinedBy:
                            if  property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                                property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue = geschwindigkeit_rohr
                                property_set.RelatingPropertyDefinition.HasProperties[16].NominalValue.wrappedValue = rohrreibungswiderstand
                                property_set.RelatingPropertyDefinition.HasProperties[17].NominalValue.wrappedValue = pstrang
                        heizkoerper_liste.append(heizkoerper.Name)
            foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
            foerderstrom = sum(volumenstroeme)                 #m³/h
            for pumpe in ifc_system.by_type('IfcPump'):
                if 'Pumpe - Puffer zum Verteiler' in pumpe.Name:
                    for property_set in pumpe.IsDefinedBy:
                        if  property_set.RelatingPropertyDefinition.Name == "Pset_FlowMovingDevicePump":
                            property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = foerderhoehe
                            property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = foerderstrom
            # Spalten, die als int dargestellt werden sollen
            int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
            # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
            df[int_spalten] = df[int_spalten].astype(int)
            df.to_csv('Abgleich.csv')
            pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
            df_p = pd.DataFrame(pumpe)
            pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
            df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
            df_p.to_csv('Pumpe.csv')
            dfi.export(df_p, 'Pumpe.png')
            dfi.export(df, 'Abgleich.png')
            ifc_system.write("System.ifc")
            self.app.root.add_widget(Abgleich_Anlage3(name="Abgleich_Anlage3"))
            self.app.root.current = 'Abgleich_Anlage3'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zu den Temperaturen":                         #Automatischer hydraulischer Abgleich mit erfasster Anlage > Folie zurück zur Rohrlängenbestimmung
            self.app.root.add_widget(Abgleich_Anlage2(name="Abgleich_Anlage2"))
            self.app.root.current = 'Abgleich_Anlage2'
            self.app.root.transition.direction = "right"    
        elif button.text == "Fertig mit dem hydraulischen Abgleich":                #Automatischer hydraulischer Abgleich mit erfasster Anlage > nächste Folie
            self.app.root.current = 'Main'
            self.app.root.transition.direction = "right"
    
        elif button.text == "Hydraulischer Abgleich einer nicht in IFC erfassten Anlage durch Eingaben":             #Hydraulischer Abgleich nicht erfasste Anlage > Folien öffnen
            self.app.root.add_widget(Nicht_erfasst(name="Nicht_erfasst"))
            self.app.root.current = 'Nicht_erfasst'
            self.app.root.transition.direction = "left"
            
        elif button.text == "Hydraulischer Abgleich Fußbodenheizungssystem":
                self.app.root.add_widget(Heizkoerper_eingeben_fb(name="Heizkoerper_eingeben_fb"))
                self.app.root.current = 'Heizkoerper_eingeben_fb'
                self.app.root.transition.direction = "left"
        elif button.text == "Hydraulischer Abgleich Heizkörpersystem":
            self.app.root.add_widget(Heizkreise_eingeben(name="Heizkreise_eingeben"))
            self.app.root.current = 'Heizkreise_eingeben'
            self.app.root.transition.direction = "left"
        elif button.text == "Zurück zur Auswahl des Systems":                
            self.app.root.current = 'Nicht_erfasst'
            self.app.root.transition.direction = "right"
            
        elif button.text == "Hydraulischen Abgleich berechnen - FBH":
            abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],
                'Volumenstrom [m³/h]': [], 'P [W]': [], 'L [m]': [],
                'd [mm]': [], 'v [m/s]': [], 'R-Wert [Pa/m]': [],
                'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                'Ventilautorität [-]': [], 'KVs_Wert [m³/h]': []})
            df = pd.DataFrame(abgleich)
            volumenstroeme = []
            strangverluste = {}
            strangverluste_liste = []
            strangverluste_n = {}
            heizkoerper_liste = []
            for heizkoerper in self.app.eingaben['Heizkoerper']:
                heizkoerper_data = self.app.eingaben['Heizkoerper'][heizkoerper]   
                name = heizkoerper_data['Heizkörpername']
                dichte_w = 995 #kg/m³
                k = 0.03
                kinematische_zaehigkeit = 0.724  #mm²/s
                waermekapazitaet_wasser = 1.16 #Wh/kg*K
                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser'])
                rohrlaenge = float(heizkoerper_data['Rohrlänge bis zum Heizkörper'])
                vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                spreizung = vorlauftemperatur - ruecklauftemperatur
                notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                volumenstroeme.append(notwendiger_volumenstrom)
                volumenstroeme_liste = {}
                volumenstroeme_liste[name] = notwendiger_volumenstrom
                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                geschwindigkeit_rohr = (notwendiger_volumenstrom/3600)/rohrquerschnitt   #m/s
                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                if reynoldzahl <= 2320:
                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                    druckverlust_leitung1 = rohrreibungswiderstand*rohrlaenge*2
                else:
                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                    druckverlust_leitung1 = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                zf = 1.0
                druckverlust_leitung = druckverlust_leitung1*zf
                strangverluste[druckverlust_leitung] = name
                strangverluste_n[name] = druckverlust_leitung
                strangverluste_liste.append(druckverlust_leitung)
                #ungünstigster strang
            for heizkoerper in self.app.eingaben['Heizkoerper']:
                heizkoerper_data = self.app.eingaben['Heizkoerper'][heizkoerper]
                if strangverluste[max(strangverluste_liste)] == heizkoerper_data['Heizkörpername']:  
                    name = heizkoerper_data['Heizkörpername']
                    if heizkoerper_data['Auslegungsproportionalbereich'] == '':
                        auslegungsproportionalbereich = 1.0
                    else:
                        auslegungsproportionalbereich = float(heizkoerper_data['Auslegungsproportionalbereich'])
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser'])
                    rohrlaenge = float(heizkoerper_data['Rohrlänge bis zum Heizkörper'])
                    vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                    ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                    betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                    spreizung = vorlauftemperatur - ruecklauftemperatur
                    notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                    rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                    geschwindigkeit_rohr = (notwendiger_volumenstrom/3600)/rohrquerschnitt   #m/s
                    reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                        druckverlust_leitung1 = rohrreibungswiderstand*rohrlaenge*2
                    else:
                        f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                        druckverlust_leitung1 = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                    av = 0.3
                    pnetz = round(max(strangverluste_liste), 5)
                    pv100 = round((av/(1-av))*pnetz, 5)
                    pges = pnetz + pv100
                    ventilautoritaet = round(pv100/pges, 5)
                    kv = notwendiger_volumenstrom*math.sqrt((1/(pv100/100000)*(995/1000)))  #m³/h
                    strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv, 'v': notwendiger_volumenstrom}
                    neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                          'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': notwendiger_volumenstrom, 
                          'P [W]': int(round(betriebsleistung)), 'L [m]': rohrlaenge, 'd [mm]': rohrinnenabmessung, 
                          'v [m/s]': geschwindigkeit_rohr, 'R-Wert [Pa/m]': rohrreibungswiderstand,
                          'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                          'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                          'KVs_Wert [m³/h]': kv}, index = [0])
                    df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                    heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
            for strang in strangverluste_n:
                for heizkoerper in self.app.eingaben['Heizkoerper']:
                    heizkoerper_data = self.app.eingaben['Heizkoerper'][heizkoerper]
                    if str(strang) == heizkoerper_data['Heizkörpername']:
                        if str(heizkoerper_data['Heizkörpername']) in heizkoerper_liste:
                            pass
                        else:  
                            name = heizkoerper_data['Heizkörpername']
                            if heizkoerper_data['Auslegungsproportionalbereich'] == '':
                                auslegungsproportionalbereich = 1.0
                            else:
                                auslegungsproportionalbereich = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            dichte_w = 995 #kg/m³
                            k = 0.03
                            kinematische_zaehigkeit = 0.724  #mm²/s
                            waermekapazitaet_wasser = 1.16 #Wh/kg*K
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge bis zum Heizkörper'])
                            vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                            ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                            betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                            spreizung = vorlauftemperatur - ruecklauftemperatur
                            notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (notwendiger_volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust_leitung1 = rohrreibungswiderstand*rohrlaenge*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust_leitung1 = darcy_weisbach(rohrlaenge*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            pstrang = round(druckverlust_leitung1*zf, 5)
                            pv100 = strang_u['pges']-pstrang
                            ventilautoritaet = round( pv100/strang_u['pges'], 5)
                            kv = notwendiger_volumenstrom*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                              'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': notwendiger_volumenstrom, 
                              'P [W]': int(round(betriebsleistung)), 'L [m]': rohrlaenge, 'd [mm]': rohrinnenabmessung, 
                              'v [m/s]': geschwindigkeit_rohr, 'R-Wert [Pa/m]': rohrreibungswiderstand,
                              'Druckv. L. [Pa]': int(round(pstrang)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                              'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                              'KVs_Wert [m³/h]': kv}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
            foerderhoehe = round(strang_u['pges']*0.00010197442889221*100, 5)  #mWs
            foerderstrom = sum(volumenstroeme)                 #m³/h
            # Spalten, die als int dargestellt werden sollen
            int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
            # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
            df[int_spalten] = df[int_spalten].astype(int)
            df.to_csv('Abgleich.csv')
            pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
            df_p = pd.DataFrame(pumpe)
            pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
            df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
            df_p.to_csv('Pumpe.csv')
            dfi.export(df_p, 'Pumpe.png')
            dfi.export(df, 'Abgleich.png')
            self.app.root.add_widget(Ergebnisse_Manu(name="Ergebnisse_Manu"))
            self.app.root.current = 'Ergebnisse_Manu'
            self.app.root.transition.direction = "left"
            
        
        elif button.text == "Längen der Stränge festlegen und Heizkörper hinzufügen":
            self.app.defined_heizkreise = sorted(self.app.eingaben['Heizkreis'].keys())
            for heizkreis in self.app.eingaben['Heizkreis']:
                if int(self.app.eingaben['Heizkreis'][heizkreis]['Wie ist der Heizkreis aufgebaut?']) == 1:
                    if ms.has_screen("Heizkoerper_eingeben") == False:
                        self.app.root.add_widget(Heizkoerper_eingeben(name="Heizkoerper_eingeben"))
                    self.app.root.current = 'Heizkoerper_eingeben'
                    self.app.root.transition.direction = "left"
                else:
                    if ms.has_screen("Rohrnetzstruktur") == False:
                        self.app.root.add_widget(Rohrnetzstruktur(name="Rohrnetzstruktur"))
                    self.app.root.current = 'Rohrnetzstruktur'
                    self.app.root.transition.direction = "left"           
        elif button.text == "zurück zum Heizkreis":
            self.app.root.current = 'Heizkreise_eingeben'
            self.app.root.transition.direction = "right"
        elif button.text == 'Heizkoerper hinzufügen':                                          #Heizkorper > Button um Heizkoerper hinzuzufügen
            self.L_KOERPER.clear_widgets()
            self.L_KOERPER.add_widget(self.our_layouts['Heizkoerper hinzufügen'])
        elif button.text in self.app.eingaben.get('Heizkoerper', []):                         ###diese Funktion wird von Heizkoerper hinzufügen verwendet
            heizkoerper_data = self.app.eingaben['Heizkoerper'][button.text]
            self.L_KOERPER.clear_widgets()
            self.L_KOERPER.add_widget(self.our_layouts['Modify Heizkoerper'])
            for txt, txt2, imp, imp2 in self.imps:
                imp2.text = str(heizkoerper_data[txt.text])
            self.our_layouts['Modify Heizkoerper'].children[-1].children[-2].text=button.text
        elif button.text == 'Heizkreis hinzufügen':                                          #Heizkreise > Button um Heizkreise hinzuzufügen
                self.L_KOERPER.clear_widgets()
                self.L_KOERPER.add_widget(self.our_layouts['Heizkreis hinzufügen'])
        elif button.text in self.app.eingaben.get('Heizkreis', []):                         ###diese Funktion wird von Heizkoerper hinzufügen verwendet
                heizkreis_data = self.app.eingaben['Heizkreis'][button.text]
                self.L_KOERPER.clear_widgets()
                self.L_KOERPER.add_widget(self.our_layouts['Modify Heizkreis'])
                for txt, txt2, imp, imp2 in self.imps:
                    imp2.text = str(heizkreis_data[txt.text])
                self.our_layouts['Modify Heizkreis'].children[-1].children[-2].text=button.text
        elif button.text == "Längen des Rohrnetzes festlegen und Heizkörper hinzufügen":         #Heizkreise > Eingaben abschließen und die Räume erzeugen und dann zur Folie für die Wände
            for txt, imp in self.imps:
                self.app.heizkreis_dimension[txt.text] = imp.text
            if ms.has_screen("Heizkoerper_eingeben") == False:
                self.app.root.add_widget(Heizkoerper_eingeben(name="Heizkoerper_eingeben"))
            self.app.root.current = 'Heizkoerper_eingeben'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zur Dimensionierung des Heizkreises":
            self.app.root.current = 'Rohrnetzstruktur'
            self.app.root.transition.direction = "right"
        elif button.text == "Hydraulischen Abgleich berechnen":         #Abgleich > Eingaben abschließen und den Abgleich rechnen
            for heizkreis in self.app.eingaben['Heizkreis']:
                if int(self.app.eingaben['Heizkreis'][heizkreis]['Wie ist der Heizkreis aufgebaut?']) == 1:
                    abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],
                        'Volumenstrom [m³/h]': [], 'P [W]': [], 'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                        'Ventilautorität [-]': [], 'KVs_Wert [m³/h]': [], 'Strang': []})
                    df = pd.DataFrame(abgleich)
                    heizkoerper_liste = []
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    laengen_1 = {}
                    volumenstroeme_1 = []
                    laengen = []
                    volumenstroeme = {}
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper]
                        laengen_1[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_1.append(notwendiger_volumenstrom)
                        volumenstroeme[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom
                    verlust_bis = 0
                    heizungen = {}
                    laengen.sort()
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper] 
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen[0]:
                            volumenstrom = sum(volumenstroeme_1)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust = rohrreibungswiderstand*min(laengen)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen) > 1:
                        for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                            heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper] 
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen[1]-laengen[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen[1]-laengen[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen) > 2:
                        for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                            heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper] 
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen[2]-laengen[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen[2]-laengen[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen) > 3:
                        for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                            heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper] 
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen[3]-laengen[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen[3]-laengen[2])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper] 
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == max(laengen):
                            vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                            ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                            betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                            daten = heizungen[heizkoerper_data['Heizkörpername']]
                            av = 0.3
                            pnetz = round(daten[5], 5)
                            pv100 = round((av/(1-av))*pnetz, 5)
                            pges = pnetz + pv100
                            ventilautoritaet = round(pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv}
                            neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': daten[4], 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                                                       'KVs_Wert [m³/h]': kv, 'Strang': heizkoerper_data['Strangnummer']}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper] 
                        if str(heizkoerper_data['Heizkörpername']) in heizkoerper_liste:
                            pass
                        else:
                            vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                            ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                            betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                            daten = heizungen[heizkoerper_data['Heizkörpername']]
                            pnetz = round(daten[5], 5)
                            pges = strang_u['pges']
                            pv100 = pges-pnetz
                            ventilautoritaet = round( pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': daten[4], 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(pges)), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                                                       'KVs_Wert [m³/h]': kv, 'Strang': heizkoerper_data['Strangnummer']}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
                    
                    foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
                    foerderstrom = sum(volumenstroeme_1)                 #m³/h
                    # Spalten, die als int dargestellt werden sollen
                    int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
                    # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
                    df[int_spalten] = df[int_spalten].astype(int)
                    df.to_csv('Abgleich.csv')
                    pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
                    df_p = pd.DataFrame(pumpe)
                    pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
                    df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
                    df_p.to_csv('Pumpe.csv')
                    dfi.export(df_p, 'Pumpe.png')
                    dfi.export(df, 'Abgleich.png')
    
                elif int(self.app.eingaben['Heizkreis'][heizkreis]['Wie ist der Heizkreis aufgebaut?']) == 2:
                    strang1_data = {}
                    strang2_data = {}
                    d_knoten = float(self.app.heizkreis_dimension['Rohrinnendurchmesser bis zum Knotenpunkt'])
                    l_knoten = float(self.app.heizkreis_dimension['Rohrlänge bis zum Knotenpunkt'])
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper]
                        if int(heizkoerper_data['Strangnummer']) == 1:
                            strang1_data[heizkoerper_data['Heizkörpername']] = heizkoerper_data 
                        elif int(heizkoerper_data['Strangnummer']) == 2:
                            strang2_data[heizkoerper_data['Heizkörpername']] = heizkoerper_data
                    abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],
                'Volumenstrom [m³/h]': [], 'P [W]': [], 'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                'Ventilautorität [-]': [], 'KVs_Wert [m³/h]': [], 'Strang': []})
                    df = pd.DataFrame(abgleich)
            #strang1
                    heizkoerper_liste = []
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    laengen_1 = {}
                    laengen_2 = {}
                    volumenstroeme_1 = []
                    volumenstroeme_2 = []
                    laengen1 = []
                    volumenstroeme1 = {}
                    laengen2 = []
                    volumenstroeme2 = {}
            
            #strang1
                    for heizkoerper in strang1_data:
                        heizkoerper_data = strang1_data[heizkoerper]
                        laengen_1[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen1.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_1.append(notwendiger_volumenstrom)
                        volumenstroeme1[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom
            #strang2
                    for heizkoerper in strang2_data:
                        heizkoerper_data = strang2_data[heizkoerper]
                        laengen_2[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen2.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_2.append(notwendiger_volumenstrom)
                        volumenstroeme2[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom
      
            #verluste zu den strängen - strang1 und strang2
                    volumenstrom_knoten = sum(volumenstroeme_1) + sum(volumenstroeme_2)
                    rohrquerschnitt_knoten = math.pi*((d_knoten/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten = (volumenstrom_knoten/3600)/rohrquerschnitt_knoten   #m/s
                    reynoldzahl = (geschwindigkeit_rohr_knoten*(d_knoten/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten**2))/(d_knoten/1000*2)    #Pa/m
                        druckverlust_knoten = rohrreibungswiderstand*l_knoten*2
                    else:
                        f = colebrook_prandtl(k, d_knoten/1000, reynoldzahl)
                        druckverlust_knoten = darcy_weisbach(l_knoten*2, dichte_w, geschwindigkeit_rohr_knoten, d_knoten/1000, f)
                    zf = 1.0
                    druckverlust_zu = druckverlust_knoten*zf
                    verlust_bis = druckverlust_zu
                    heizungen = {}
                    #strang1 - daten
                    laengen1.sort()
                    for heizkoerper in strang1_data:
                        heizkoerper_data = strang1_data[heizkoerper]
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[0]:
                            volumenstrom = sum(volumenstroeme_1)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust = rohrreibungswiderstand*min(laengen1)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen1)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme1[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen1) > 1:
                        for heizkoerper in strang1_data:
                            heizkoerper_data = strang1_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen1[1]-laengen1[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen1[1]-laengen1[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme1[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen1) > 2:
                        for heizkoerper in strang1_data:
                            heizkoerper_data = strang1_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen[2]-laengen[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen[2]-laengen[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme1[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen1) > 3:
                        for heizkoerper in strang1_data:
                            heizkoerper_data = strang1_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen[3]-laengen[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen[3]-laengen[2])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]

            #strang 2 daten zu den heizkoerpern
                    laengen2.sort()
                    for heizkoerper in strang2_data:
                        heizkoerper_data = strang2_data[heizkoerper]
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[0]:
                            volumenstrom = sum(volumenstroeme_2)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust = rohrreibungswiderstand*min(laengen2)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen2)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme2[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen2) > 1:
                        for heizkoerper in strang2_data:
                            heizkoerper_data = strang2_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen2[1]-laengen2[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen2[1]-laengen2[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme2[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen2) > 2:
                        for heizkoerper in strang2_data:
                            heizkoerper_data = strang2_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen2[2]-laengen2[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen2[2]-laengen2[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme2[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen2) > 3:
                        for heizkoerper in strang2_data:
                            heizkoerper_data = strang2_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen2[3]-laengen2[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen2[3]-laengen2[2])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    verluste = []
                    for heizung in heizungen:
                        verluste.append(heizungen[heizung][5])
                    for heizung in heizungen:
                        if heizungen[heizung][5] == max(verluste):
                            heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizung] 
                            vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                            ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                            betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                            daten = heizungen[heizkoerper_data['Heizkörpername']]
                            av = 0.3
                            pnetz = round(daten[5], 5)
                            pv100 = round((av/(1-av))*pnetz, 5)
                            pges = pnetz + pv100
                            ventilautoritaet = round(pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv}
                            neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': daten[4], 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                                                       'KVs_Wert [m³/h]': kv, 'Strang': heizkoerper_data['Strangnummer']}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper] 
                        if str(heizkoerper_data['Heizkörpername']) in heizkoerper_liste:
                            pass
                        else:
                            vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                            ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                            betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                            daten = heizungen[heizkoerper_data['Heizkörpername']]
                            pnetz = round(daten[5], 5)
                            pges = strang_u['pges']
                            pv100 = pges-pnetz
                            ventilautoritaet = round( pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': daten[4], 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(pges)), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                                                       'KVs_Wert [m³/h]': kv, 'Strang': heizkoerper_data['Strangnummer']}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
                    
                    foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
                    foerderstrom = sum(volumenstroeme_1)+  sum(volumenstroeme_2)             #m³/h
                    # Spalten, die als int dargestellt werden sollen
                    int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
                    # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
                    df[int_spalten] = df[int_spalten].astype(int)
                    df.to_csv('Abgleich.csv')
                    pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
                    df_p = pd.DataFrame(pumpe)
                    pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
                    df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
                    df_p.to_csv('Pumpe.csv')
                    dfi.export(df_p, 'Pumpe.png')
                    dfi.export(df, 'Abgleich.png')
       
                elif int(self.app.eingaben['Heizkreis'][heizkreis]['Wie ist der Heizkreis aufgebaut?']) == 3:
                    strang1_data = {}
                    strang2_data = {}
                    strang3_data = {}
                    d_knoten1 = float(self.app.heizkreis_dimension['Rohrinnendurchmesser bis zum ersten Knotenpunkt'])
                    l_knoten1 = float(self.app.heizkreis_dimension['Rohrlänge bis zum ersten Knotenpunkt'])
                    d_knoten12 = float(self.app.heizkreis_dimension["Rohrinnendurchmesser vom 1ten bis zum 2ten Knotenpunkt"])
                    l_knoten12 = float(self.app.heizkreis_dimension['Rohrlänge vom 1ten bis zum 2ten Knotenpunkt'])                  
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper]
                        if int(heizkoerper_data['Strangnummer']) == 1:
                            strang1_data[heizkoerper_data['Heizkörpername']] = heizkoerper_data 
                        elif int(heizkoerper_data['Strangnummer']) == 2:
                            strang2_data[heizkoerper_data['Heizkörpername']] = heizkoerper_data
                        elif int(heizkoerper_data['Strangnummer']) == 3:
                            strang3_data[heizkoerper_data['Heizkörpername']] = heizkoerper_data
                            
                    abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],
                'Volumenstrom [m³/h]': [], 'P [W]': [], 'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                'Ventilautorität [-]': [], 'KVs_Wert [m³/h]': [], 'Strang': []})
                    df = pd.DataFrame(abgleich)
            #strang1, strang2, strang3
                    heizkoerper_liste = []
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    laengen_1 = {}
                    laengen_2 = {}
                    laengen_3 = {}
                    volumenstroeme_1 = []
                    volumenstroeme_2 = []
                    volumenstroeme_3 = []
                    volumenstroeme1 = {}
                    volumenstroeme2 = {}
                    volumenstroeme3 = {}
                    laengen1 = []
                    laengen2 = []
                    laengen3 = []
            #strang1
                    for heizkoerper in strang1_data:
                        heizkoerper_data = strang1_data[heizkoerper]
                        laengen_1[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen1.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_1.append(notwendiger_volumenstrom)
                        volumenstroeme1[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom
            #strang2
                    for heizkoerper in strang2_data:
                        heizkoerper_data = strang2_data[heizkoerper]
                        laengen_2[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen2.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_2.append(notwendiger_volumenstrom)
                        volumenstroeme2[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom
            #strang3
                    for heizkoerper in strang3_data:
                        heizkoerper_data = strang3_data[heizkoerper]
                        laengen_3[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen3.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_3.append(notwendiger_volumenstrom)
                        volumenstroeme3[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom 
     
            #verluste zu den knoten - strang1, strang2, strang3
                    volumenstrom_knoten1 = sum(volumenstroeme_1) + sum(volumenstroeme_2) + sum(volumenstroeme_3)
                    rohrquerschnitt_knoten1 = math.pi*((d_knoten1/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten1 = (volumenstrom_knoten1/3600)/rohrquerschnitt_knoten1   #m/s
                    reynoldzahl = (geschwindigkeit_rohr_knoten1*(d_knoten1/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten1**2))/(d_knoten1/1000*2)    #Pa/m
                        druckverlust_knoten1 = rohrreibungswiderstand*l_knoten1*2
                    else:
                        f = colebrook_prandtl(k, d_knoten1/1000, reynoldzahl)
                        druckverlust_knoten1 = darcy_weisbach(l_knoten1*2, dichte_w, geschwindigkeit_rohr_knoten1, d_knoten1/1000, f)
                    zf = 1.0
                    druckverlust_zu123 = druckverlust_knoten1*zf
                    verlust_bis123 = druckverlust_zu123
                    
             #verluste zu den knoten - strang1, strang2
                    volumenstrom_knoten12 = sum(volumenstroeme_1) + sum(volumenstroeme_2)
                    rohrquerschnitt_knoten12 = math.pi*((d_knoten12/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten12 = (volumenstrom_knoten12/3600)/rohrquerschnitt_knoten12   #m/s
                    reynoldzahl = (geschwindigkeit_rohr_knoten12*(d_knoten12/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten12**2))/(d_knoten12/1000*2)    #Pa/m
                        druckverlust_knoten12 = rohrreibungswiderstand*l_knoten12*2
                    else:
                        f = colebrook_prandtl(k, d_knoten12/1000, reynoldzahl)
                        druckverlust_knoten12 = darcy_weisbach(l_knoten1*2, dichte_w, geschwindigkeit_rohr_knoten12, d_knoten12/1000, f)
                    zf = 1.0
                    druckverlust_zu12 = druckverlust_knoten12*zf
                    verlust_bis12 = verlust_bis123 + druckverlust_zu12                  
                    heizungen = {}
                    #strang1 - daten
                    laengen1.sort()
                    for heizkoerper in strang1_data:
                        heizkoerper_data = strang1_data[heizkoerper]
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[0]:
                            volumenstrom = sum(volumenstroeme_1)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust = rohrreibungswiderstand*min(laengen1)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen1)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis12 + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme1[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen1) > 1:
                        for heizkoerper in strang1_data:
                            heizkoerper_data = strang1_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen1[1]-laengen1[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen1[1]-laengen1[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme1[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen1) > 2:
                        for heizkoerper in strang1_data:
                            heizkoerper_data = strang1_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen[2]-laengen[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen[2]-laengen[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme1[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen1) > 3:
                        for heizkoerper in strang1_data:
                            heizkoerper_data = strang1_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen[3]-laengen[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen[3]-laengen[2])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]

            #strang 2 daten zu den heizkoerpern
                    laengen2.sort()
                    for heizkoerper in strang2_data:
                        heizkoerper_data = strang2_data[heizkoerper]
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[0]:
                            volumenstrom = sum(volumenstroeme_2)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*min(laengen2)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen2)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis12 + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme2[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen2) > 1:
                        for heizkoerper in strang2_data:
                            heizkoerper_data = strang2_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen2[1]-laengen2[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen2[1]-laengen2[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme2[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen2) > 2:
                        for heizkoerper in strang2_data:
                            heizkoerper_data = strang2_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen2[2]-laengen2[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen2[2]-laengen2[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme2[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen2) > 3:
                        for heizkoerper in strang2_data:
                            heizkoerper_data = strang2_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen2[3]-laengen2[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen2[3]-laengen2[2])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    #strang 3 daten zu den heizkoerpern           
                    laengen3.sort()
                    for heizkoerper in strang3_data:
                        heizkoerper_data = strang3_data[heizkoerper]
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen3[0]:
                            volumenstrom = sum(volumenstroeme_3)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust = rohrreibungswiderstand*min(laengen3)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen3)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis123 + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme3[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen3) > 1:
                        for heizkoerper in strang3_data:
                            heizkoerper_data = strang3_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen3[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen3[1]-laengen3[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen3[1]-laengen3[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme3[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen3) > 2:
                        for heizkoerper in strang3_data:
                            heizkoerper_data = strang3_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen3[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen3[2]-laengen3[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen3[2]-laengen3[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme3[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen3) > 3:
                        for heizkoerper in strang3_data:
                            heizkoerper_data = strang3_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen3[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen3[3]-laengen3[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen3[3]-laengen3[2])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]                           
                    #ungünstigster Heizkörper         
                    verluste = []
                    for heizung in heizungen:
                        verluste.append(heizungen[heizung][5])
                    for heizung in heizungen:
                        if heizungen[heizung][5] == max(verluste):
                            heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizung] 
                            vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                            ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                            betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                            daten = heizungen[heizkoerper_data['Heizkörpername']]
                            av = 0.3
                            pnetz = round(daten[5], 5)
                            pv100 = round((av/(1-av))*pnetz, 5)
                            pges = pnetz + pv100
                            ventilautoritaet = round(pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv}
                            neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': daten[4], 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                                                       'KVs_Wert [m³/h]': kv, 'Strang': heizkoerper_data['Strangnummer']}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper] 
                        if str(heizkoerper_data['Heizkörpername']) in heizkoerper_liste:
                            pass
                        else:
                            vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                            ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                            betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                            daten = heizungen[heizkoerper_data['Heizkörpername']]
                            pnetz = round(daten[5], 5)
                            pges = strang_u['pges']
                            pv100 = pges-pnetz
                            ventilautoritaet = round( pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))  #m³/h
                            neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': daten[4], 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(pges)), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                                                       'KVs_Wert [m³/h]': kv, 'Strang': heizkoerper_data['Strangnummer']}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
                    
                    foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
                    foerderstrom = sum(volumenstroeme_1)+  sum(volumenstroeme_2) + sum(volumenstroeme_2)          #m³/h
                    # Spalten, die als int dargestellt werden sollen
                    int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
                    # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
                    df[int_spalten] = df[int_spalten].astype(int)
                    df.to_csv('Abgleich.csv')
                    pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
                    df_p = pd.DataFrame(pumpe)
                    pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
                    df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
                    df_p.to_csv('Pumpe.csv')
                    dfi.export(df_p, 'Pumpe.png')
                    dfi.export(df, 'Abgleich.png')               

                elif int(self.app.eingaben['Heizkreis'][heizkreis]['Wie ist der Heizkreis aufgebaut?']) == 4:
                    strang1_data = {}
                    strang2_data = {}
                    strang3_data = {}
                    strang4_data = {}
                    d_knoten1234 = float(self.app.heizkreis_dimension['Rohrinnendurchmesser bis zum ersten Knotenpunkt'])
                    l_knoten1234 = float(self.app.heizkreis_dimension['Rohrlänge bis zum ersten Knotenpunkt'])
                    d_knoten12 = float(self.app.heizkreis_dimension["Rohrinnendurchmesser vom 1ten bis zum Knotenpunkt (Strang1/2)"])
                    l_knoten12 = float(self.app.heizkreis_dimension["Rohrlänge vom 1ten bis zum Knotenpunkt (Strang1/2)"])
                    d_knoten34 = float(self.app.heizkreis_dimension["Rohrinnendurchmesser vom 1ten bis zum Knotenpunkt (Strang3/4)"])
                    l_knoten34 = float(self.app.heizkreis_dimension["Rohrlänge vom 1ten bis zum Knotenpunkt (Strang3/4)"])
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper]
                        if int(heizkoerper_data['Strangnummer']) == 1:
                            strang1_data[heizkoerper_data['Heizkörpername']] = heizkoerper_data 
                        elif int(heizkoerper_data['Strangnummer']) == 2:
                            strang2_data[heizkoerper_data['Heizkörpername']] = heizkoerper_data
                        elif int(heizkoerper_data['Strangnummer']) == 3:
                            strang3_data[heizkoerper_data['Heizkörpername']] = heizkoerper_data
                        elif int(heizkoerper_data['Strangnummer']) == 4:
                            strang4_data[heizkoerper_data['Heizkörpername']] = heizkoerper_data
                            
                    abgleich = ({'Name':[], 'T_Vl [°C]': [], 'T_Rl [°C]': [],
                'Volumenstrom [m³/h]': [], 'P [W]': [], 'Druckv. L. [Pa]': [], 'Gesamtdruckv. [Pa]': [], 'Druckv. Ventil [Pa]': [],
                'Ventilautorität [-]': [], 'KVs_Wert [m³/h]': [], 'Strang': []})
                    df = pd.DataFrame(abgleich)
            #strang1, strang2, strang3, strang4
                    heizkoerper_liste = []
                    dichte_w = 995 #kg/m³
                    k = 0.03
                    kinematische_zaehigkeit = 0.724  #mm²/s
                    waermekapazitaet_wasser = 1.16 #Wh/kg*K
                    laengen_1 = {}
                    laengen_2 = {}
                    laengen_3 = {}
                    laengen_4 = {}
                    volumenstroeme_1 = []
                    volumenstroeme_2 = []
                    volumenstroeme_3 = []
                    volumenstroeme_4 = []
                    volumenstroeme1 = {}
                    volumenstroeme2 = {}
                    volumenstroeme3 = {}
                    volumenstroeme4 = {}
                    laengen1 = []
                    laengen2 = []
                    laengen3 = []
                    laengen4 = []
            #strang1
                    for heizkoerper in strang1_data:
                        heizkoerper_data = strang1_data[heizkoerper]
                        laengen_1[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen1.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_1.append(notwendiger_volumenstrom)
                        volumenstroeme1[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom
            #strang2
                    for heizkoerper in strang2_data:
                        heizkoerper_data = strang2_data[heizkoerper]
                        laengen_2[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen2.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_2.append(notwendiger_volumenstrom)
                        volumenstroeme2[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom
            #strang3
                    for heizkoerper in strang3_data:
                        heizkoerper_data = strang3_data[heizkoerper]
                        laengen_3[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen3.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_3.append(notwendiger_volumenstrom)
                        volumenstroeme3[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom 
     
            #strang4
                    for heizkoerper in strang4_data:
                        heizkoerper_data = strang4_data[heizkoerper]
                        laengen_4[heizkoerper_data['Heizkörpername']] = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        laengen4.append(float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])) 
                        name = heizkoerper_data['Heizkörpername']
                        rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                        rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                        vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                        ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                        betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                        spreizung = vorlauftemperatur - ruecklauftemperatur
                        notwendiger_volumenstrom = round(betriebsleistung/(spreizung*waermekapazitaet_wasser*dichte_w),3)  #m³/h
                        volumenstroeme_4.append(notwendiger_volumenstrom)
                        volumenstroeme4[heizkoerper_data['Heizkörpername']] = notwendiger_volumenstrom 
                        
            #verluste zu den knoten - strang1, strang2, strang3, strang4
                    volumenstrom_knoten1234 = sum(volumenstroeme_1) + sum(volumenstroeme_2) + sum(volumenstroeme_3) + sum(volumenstroeme_4)
                    rohrquerschnitt_knoten1234 = math.pi*((d_knoten1234/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten1234 = (volumenstrom_knoten1234/3600)/rohrquerschnitt_knoten1234   #m/s
                    reynoldzahl = (geschwindigkeit_rohr_knoten1234*(d_knoten1234/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten1234**2))/(d_knoten1234/1000*2)    #Pa/m
                        druckverlust_knoten1234 = rohrreibungswiderstand*l_knoten1234*2
                    else:
                        f = colebrook_prandtl(k, d_knoten1234/1000, reynoldzahl)
                        druckverlust_knoten1234 = darcy_weisbach(l_knoten1234*2, dichte_w, geschwindigkeit_rohr_knoten1234, d_knoten1234/1000, f)
                    zf = 1.0
                    druckverlust_zu1234 = druckverlust_knoten1234*zf
                    verlust_bis1234 = druckverlust_zu1234
                    
             #verluste zu den knoten - strang1, strang2
                    volumenstrom_knoten12 = sum(volumenstroeme_1) + sum(volumenstroeme_2)
                    rohrquerschnitt_knoten12 = math.pi*((d_knoten12/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten12 = (volumenstrom_knoten12/3600)/rohrquerschnitt_knoten12   #m/s
                    reynoldzahl = (geschwindigkeit_rohr_knoten12*(d_knoten12/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten12**2))/(d_knoten12/1000*2)    #Pa/m
                        druckverlust_knoten12 = rohrreibungswiderstand*l_knoten12*2
                    else:
                        f = colebrook_prandtl(k, d_knoten12/1000, reynoldzahl)
                        druckverlust_knoten12 = darcy_weisbach(l_knoten12*2, dichte_w, geschwindigkeit_rohr_knoten12, d_knoten12/1000, f)
                    zf = 1.0
                    druckverlust_zu12 = druckverlust_knoten12*zf
                    verlust_bis12 = verlust_bis1234 + druckverlust_zu12                  
                    
               #verluste zu den knoten - strang3, strang4
                    volumenstrom_knoten34 = sum(volumenstroeme_3) + sum(volumenstroeme_4)
                    rohrquerschnitt_knoten34 = math.pi*((d_knoten34/2)/1000)**2     #m²
                    geschwindigkeit_rohr_knoten34 = (volumenstrom_knoten34/3600)/rohrquerschnitt_knoten34   #m/s
                    reynoldzahl = (geschwindigkeit_rohr_knoten34*(d_knoten34/1000))/(kinematische_zaehigkeit/100000)
                    if reynoldzahl <= 2320:
                        reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                        rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr_knoten34**2))/(d_knoten34/1000*2)    #Pa/m
                        druckverlust_knoten34 = rohrreibungswiderstand*l_knoten34*2
                    else:
                        f = colebrook_prandtl(k, d_knoten34/1000, reynoldzahl)
                        druckverlust_knoten34 = darcy_weisbach(l_knoten34*2, dichte_w, geschwindigkeit_rohr_knoten34, d_knoten34/1000, f)
                    zf = 1.0
                    druckverlust_zu34 = druckverlust_knoten34*zf
                    verlust_bis34 = verlust_bis1234 + druckverlust_zu34                   
                    
                    heizungen = {}
                    #strang1 - daten
                    laengen1.sort()
                    for heizkoerper in strang1_data:
                        heizkoerper_data = strang1_data[heizkoerper]
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[0]:
                            volumenstrom = sum(volumenstroeme_1)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust = rohrreibungswiderstand*min(laengen1)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen1)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis12 + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme1[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen1) > 1:
                        for heizkoerper in strang1_data:
                            heizkoerper_data = strang1_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen1[1]-laengen1[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen1[1]-laengen1[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme1[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen1) > 2:
                        for heizkoerper in strang1_data:
                            heizkoerper_data = strang1_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen[2]-laengen[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen[2]-laengen[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme1[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen1) > 3:
                        for heizkoerper in strang1_data:
                            heizkoerper_data = strang1_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen1[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen[3]-laengen[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen[3]-laengen[2])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme1[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]

            #strang 2 daten zu den heizkoerpern
                    laengen2.sort()
                    for heizkoerper in strang2_data:
                        heizkoerper_data = strang2_data[heizkoerper]
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[0]:
                            volumenstrom = sum(volumenstroeme_2)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust = rohrreibungswiderstand*min(laengen2)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen2)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis12 + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme2[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen2) > 1:
                        for heizkoerper in strang2_data:
                            heizkoerper_data = strang2_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen2[1]-laengen2[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen2[1]-laengen2[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme2[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen2) > 2:
                        for heizkoerper in strang2_data:
                            heizkoerper_data = strang2_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen2[2]-laengen2[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen2[2]-laengen2[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme2[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen2) > 3:
                        for heizkoerper in strang2_data:
                            heizkoerper_data = strang2_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen2[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen2[3]-laengen2[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen2[2]-laengen2[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme2[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    #strang 3 daten zu den heizkoerpern           
                    laengen3.sort()
                    for heizkoerper in strang3_data:
                        heizkoerper_data = strang3_data[heizkoerper]
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen3[0]:
                            volumenstrom = sum(volumenstroeme_3)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust = rohrreibungswiderstand*min(laengen3)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen3)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis34 + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme3[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen3) > 1:
                        for heizkoerper in strang3_data:
                            heizkoerper_data = strang3_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen3[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen3[1]-laengen3[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen3[1]-laengen3[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme3[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen3) > 2:
                        for heizkoerper in strang3_data:
                            heizkoerper_data = strang3_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen3[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen3[2]-laengen3[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen3[2]-laengen3[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme3[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen3) > 3:
                        for heizkoerper in strang3_data:
                            heizkoerper_data = strang3_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen3[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen3[3]-laengen3[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen3[3]-laengen3[2])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme3[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]  
                                
                    #strang 4 daten zu den heizkoerpern           
                    laengen4.sort()
                    for heizkoerper in strang4_data:
                        heizkoerper_data = strang4_data[heizkoerper]
                        if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen4[0]:
                            volumenstrom = sum(volumenstroeme_4)
                            regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                            name = heizkoerper_data['Heizkörpername']
                            rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                            rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                            rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                            geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                            reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                            if reynoldzahl <= 2320:
                                reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                druckverlust = rohrreibungswiderstand*min(laengen4)*2
                            else:
                                f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                druckverlust = darcy_weisbach(min(laengen4)*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                            zf = 1.0
                            zf_b = 1.0
                            verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                            druckverlust_z = (druckverlust+ verlust_t)*zf
                            verlust_bis1 = verlust_bis34 + druckverlust_z
                            max_verlust = verlust_bis1
                            volumenstrom_neu = volumenstrom - volumenstroeme4[heizkoerper_data['Heizkörpername']]
                            heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[heizkoerper_data['Heizkörpername']], verlust_bis1, regeldifferenz]
                    if len(laengen4) > 1:
                        for heizkoerper in strang4_data:
                            heizkoerper_data = strang4_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen4[1]:
                                volumenstrom = volumenstrom_neu
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen4[1]-laengen4[0])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen4[1]-laengen4[0])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis2 = verlust_bis1 + druckverlust_z
                                max_verlust = verlust_bis2
                                volumenstrom_neu1 = volumenstrom_neu - volumenstroeme4[heizkoerper_data['Heizkörpername']]
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[heizkoerper_data['Heizkörpername']], verlust_bis2, regeldifferenz]
                    if len(laengen4) > 2:
                        for heizkoerper in strang3_data:
                            heizkoerper_data = strang3_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen4[2]:
                                volumenstrom = volumenstrom_neu1
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen4[2]-laengen4[1])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen4[2]-laengen4[1])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis3 = verlust_bis2 + druckverlust_z
                                max_verlust = verlust_bis3
                                volumenstrom_neu2 = volumenstrom_neu1 - volumenstroeme4[heizkoerper_data['Heizkörpername']]
                                heizungen[name]= [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]
                    if len(laengen4) > 3:
                        for heizkoerper in strang4_data:
                            heizkoerper_data = strang4_data[heizkoerper]
                            if float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper']) == laengen4[3]:
                                volumenstrom = volumenstrom_neu2
                                regeldifferenz = float(heizkoerper_data['Auslegungsproportionalbereich'])
                                name = heizkoerper_data['Heizkörpername']
                                rohrinnenabmessung = float(heizkoerper_data['Rohrinnendurchmesser Strang'])
                                rohrlaenge = float(heizkoerper_data['Rohrlänge vom Strangbeginn bis zum Heizkörper'])
                                rohrquerschnitt = math.pi*((rohrinnenabmessung/2)/1000)**2     #m²
                                geschwindigkeit_rohr = (volumenstrom/3600)/rohrquerschnitt   #m/s
                                reynoldzahl = (geschwindigkeit_rohr*(rohrinnenabmessung/1000))/(kinematische_zaehigkeit/100000)
                                if reynoldzahl <= 2320:
                                    reibungszahl = 64/reynoldzahl     #bei Reynoldzahl < 2320
                                    rohrreibungswiderstand = (reibungszahl*dichte_w*(geschwindigkeit_rohr**2))/(rohrinnenabmessung/1000*2)    #Pa/m
                                    druckverlust = rohrreibungswiderstand*(laengen4[3]-laengen4[2])*2
                                else:
                                    f = colebrook_prandtl(k, rohrinnenabmessung/1000, reynoldzahl)
                                    druckverlust = darcy_weisbach((laengen4[3]-laengen4[2])*2, dichte_w, geschwindigkeit_rohr, rohrinnenabmessung/1000, f)
                                zf = 1.0
                                zf_b = 1.0
                                verlust_t = 2*zeta_t*(dichte_w/2)*geschwindigkeit_rohr**2 + 4*(zf_b*(dichte_w/2)*geschwindigkeit_rohr**2) 
                                druckverlust_z = (druckverlust+ verlust_t)*zf
                                verlust_bis4 = verlust_bis3 + druckverlust_z
                                max_verlust = verlust_bis4
                                heizungen[name] = [rohrquerschnitt, rohrinnenabmessung, rohrlaenge, geschwindigkeit_rohr, volumenstroeme4[heizkoerper_data['Heizkörpername']], verlust_bis3, regeldifferenz]                                   
                    #ungünstigster Heizkörper         
                    verluste = []
                    for heizung in heizungen:
                        verluste.append(heizungen[heizung][5])
                    for heizung in heizungen:
                        if heizungen[heizung][5] == max(verluste):
                            heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizung] 
                            vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                            ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                            betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                            daten = heizungen[heizkoerper_data['Heizkörpername']]
                            av = 0.3
                            pnetz = round(daten[5], 5)
                            pv100 = round((av/(1-av))*pnetz, 5)
                            pges = pnetz + pv100
                            ventilautoritaet = round(pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))  #m³/h
                            strang_u = {'pv100':pv100, 'av':ventilautoritaet, 'pnetz': pnetz, 'pges': pges, 'kv': kv}
                            neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': daten[4], 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(strang_u['pges'])), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                                                       'KVs_Wert [m³/h]': kv, 'Strang': heizkoerper_data['Strangnummer']}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
                    for heizkoerper in self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper']:
                        heizkoerper_data = self.app.eingaben['Heizkreis'][heizkreis]['Heizkoerper'][heizkoerper] 
                        if str(heizkoerper_data['Heizkörpername']) in heizkoerper_liste:
                            pass
                        else:
                            vorlauftemperatur = float(heizkoerper_data['Vorlauftemperatur'])
                            ruecklauftemperatur = float(heizkoerper_data['Rücklauftemperatur'])
                            betriebsleistung = float(heizkoerper_data['Notwendige Leistung'])
                            daten = heizungen[heizkoerper_data['Heizkörpername']]
                            pnetz = round(daten[5], 5)
                            pges = strang_u['pges']
                            pv100 = pges-pnetz
                            ventilautoritaet = round( pv100/pges, 5)
                            kv = daten[4]*math.sqrt((1/(pv100/100000)*(995/1000)))   #m³/h
                            neue_reihe = pd.DataFrame({'Name':heizkoerper_data['Heizkörpername'],
                                                       'T_Vl [°C]':vorlauftemperatur, 'T_Rl [°C]':ruecklauftemperatur, 'Volumenstrom [m³/h]': daten[4], 
                                                       'P [W]': int(round(betriebsleistung)), 'Druckv. L. [Pa]': int(round(pnetz)), 'Gesamtdruckv. [Pa]': int(round(pges)), 
                                                       'Druckv. Ventil [Pa]': int(round(pv100)), 'Ventilautorität [-]': ventilautoritaet, 
                                                       'KVs_Wert [m³/h]': kv, 'Strang': heizkoerper_data['Strangnummer']}, index = [0])
                            df = pd.concat([neue_reihe, df.loc[:]], ignore_index=True, axis=0, join='outer')
                            heizkoerper_liste.append(heizkoerper_data['Heizkörpername'])
                    
                    foerderhoehe = round(strang_u['pges']*0.00010197442889221, 5)  #mWs
                    foerderstrom = sum(volumenstroeme_1)+  sum(volumenstroeme_2) + sum(volumenstroeme_2)          #m³/h
                    # Spalten, die als int dargestellt werden sollen
                    int_spalten = ['P [W]', 'Druckv. L. [Pa]', 'Gesamtdruckv. [Pa]', 'Druckv. Ventil [Pa]']
                    # In Integer umwandeln (nur gültig, wenn keine NaN in den Spalten!)
                    df[int_spalten] = df[int_spalten].astype(int)
                    df.to_csv('Abgleich.csv')
                    pumpe = ({'Förderhöhe [mWs]':[], 'Förderstrom [m³/h]':[]})
                    df_p = pd.DataFrame(pumpe)
                    pumpe_erg = pd.DataFrame({'Förderhöhe [mWs]': foerderhoehe, 'Förderstrom [m³/h]':foerderstrom}, index = [0])
                    df_p = pd.concat([pumpe_erg, df_p.loc[:]], ignore_index=True, axis=0, join='outer')
                    df_p.to_csv('Pumpe.csv')
                    dfi.export(df_p, 'Pumpe.png')
                    dfi.export(df, 'Abgleich.png')
            self.app.root.add_widget(Ergebnisse_Manu(name="Ergebnisse_Manu"))
            self.app.root.current = 'Ergebnisse_Manu'
            self.app.root.transition.direction = "left"
       
       
        
       
        #zurück zum Menü exisitiert schon
        #Bei Ausarbeitung hier einfügen

        #Analyse
        elif button.text =="Datenabruf und -anpassung":                                                  #Analyse > Button um zum Datenabruf zu gelangen
            if ms.has_screen("Datenabruf") == False:
                self.app.root.add_widget(Datenabruf(name="Datenabruf"))
            self.app.root.current = 'Datenabruf'
            self.app.root.transition.direction = "left"
        elif button.text =="Ergebnisse":                                                  #Analyse > Button um zu den Ergebnissen der Berechnungen zu gelangen
            if ms.has_screen("Ergebnisse") == False:
                self.app.root.add_widget(Ergebnisse(name="Ergebnisse"))
            self.app.root.current = 'Ergebnisse'
            self.app.root.transition.direction = "left"
        
        #Analyse > Datenabruf
        elif button.text =="Gebäude- und Raumdaten":                                      #Datenabruf > Button um zu den Gebäude- und Raumdaten zu gelangen
            if ms.has_screen("Datenabruf_Gebaeude") == False:
                self.app.root.add_widget(Datenabruf_Gebaeude(name="Datenabruf_Gebaeude"))
            self.app.root.current = 'Datenabruf_Gebaeude'
            self.app.root.transition.direction = "left"
        elif button.text =="Daten der Heizungsanlage":                                    #Datenabruf > Button um zu den Daten der Heizungsanlage zu gelangen
            if ms.has_screen("Heizungsanlage_Struktur") == False:
                self.app.root.add_widget(Heizungsanlage_Struktur(name="Heizungsanlage_Struktur"))
            self.app.root.current = 'Heizungsanlage_Struktur'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zur Analyseübersicht":                                #Datenabruf, Ergebnisse > Button um zurück zur Übersicht der Analyse zu gelangen
            self.app.root.current = 'Analyse'
            self.app.root.transition.direction = "right"
        
        #Datenabruf > Gebäude- und Raumdaten
        elif button.text == "Gebäudedaten":                                               #Gebäude- und Raumdaten > Button um zu den Gebäudedaten zu gelangen
            if ms.has_screen("Gebaeudedaten") == False:
                self.app.root.add_widget(Gebaeudedaten(name="Gebaeudedaten"))
            self.app.root.current = 'Gebaeudedaten'
            self.app.root.transition.direction = "left"
        elif button.text == "Raumdaten":                                                  #Gebäude- und Raumdaten > Button um zu den Raumdaten zu gelangen
            if ms.has_screen("Raumdaten") == False:
                self.app.root.add_widget(Raumdaten(name="Raumdaten"))
            self.app.root.current = 'Raumdaten'
            self.app.root.transition.direction = "left"
        elif button.text == "zurück zur Übersicht":                                       #Gebäude- und Raumdaten, Daten der Heizungsanalage > Button um zurück zur Übersicht des Datenabrufs zu gelangen
            self.app.root.current = 'Datenabruf'
            self.app.root.transition.direction = "right"
        
        #Gebäude- und Raumdaten > Gebäudedaten
        elif button.text == "zurück zur Datenauswahl":                                   #Gebäudedaten > zurück zur Auswahl zwischen Gebäude- und Raumdaten
            self.app.root.current = 'Datenabruf_Gebaeude'
            self.app.root.transition.direction = "right" 
        
        #Gebäude- und Raumdaten > Raumdaten
        #Buttons werden automatisch erzeugt (je nach Räumen in der IFC) > Funktion auch
        elif button.text == "zurück zur Raumwahl":
            self.app.root.current = 'Raumdaten'
            self.app.root.transition.direction = "right"
        #zu den Raumelementen in extr Funktion
        
        #Raumelemente >>>> fehlt noch
        
        #Datenabruf > Daten der Heizungsanlage
        elif button.text == "Schema":                                             #Erstellen und aufrufen des Schemas aus der IFC
            schema2()
            if ms.has_screen("Schema") == False:
                self.app.root.add_widget(Schema(name="Schema"))  
            self.app.root.current = 'Schema'
            self.app.root.transition.direction = "left"
        elif button.text == "Heizkreis":                                          #Erstellen und aufrufen des Heizkreises aus der IFC
            ifc_techno = ifcopenshell.open("System.ifc")
            techno = ifc_techno.by_type("IfcBuilding")[0]
            if 'FBH' in techno.Description:
                schema3_fb()
            else:
                if int(techno.Description.split('_').pop()) == 1:
                    schema5()
                elif int(techno.Description.split('_').pop()) == 2:
                    schema3()
                elif int(techno.Description.split('_').pop()) == 3:
                    schema4()
                elif int(techno.Description.split('_').pop()) == 4:
                    schema5()
            if ms.has_screen("Heizkreis") == False:
                self.app.root.add_widget(Heizkreis(name="Heizkreis"))  
            self.app.root.current = 'Heizkreis'
            self.app.root.transition.direction = "left"           
        elif button.text == "Systeminformationen":                                #Die Systeminformationen der Anlage abrufen
            if ms.has_screen("Systeminformationen") == False:
                self.app.root.add_widget(Systeminformationen(name="Systeminformationen"))
            self.app.root.current = 'Systeminformationen'
            self.app.root.transition.direction = "left"
        elif button.text == "Informationen der Bauteile":                         #Zur Übersicht der Bauteile gehen, um spezifische Informationen abrufen zu können
            if ms.has_screen("Bauteile") == False:
                self.app.root.add_widget(Bauteile(name="Bauteile"))
            self.app.root.current = 'Bauteile'
            self.app.root.transition.direction = "left"
        #zurück wurde schon unter Gebäude- und Raumdaten definiert
        
        #Schema, Heizkreis und Systeminformationen
        elif button.text == "zurück zur Auswahl":                                 #Zurück zur Übersicht der Heizungsanalgen Informationen und Daten
            self.app.root.current = 'Heizungsanlage_Struktur'
            self.app.root.transition.direction = "right"      
        elif button.text == "Daten ändern":                                 #Zurück zur Übersicht der Heizungsanalgen Informationen und Daten
            self.app.root.add_widget(Systeminformationen_anpassen(name="Systeminformationen_anpassen"))
            self.app.root.current = 'Systeminformationen_anpassen'
            self.app.root.transition.direction = "left"
        elif button.text == "Systeminformationen ändern":                                 #Zurück zu den Systeminfomrationen
            if len(self.imps) == 6:
                if self.imps[0][2].text == '':
                    system1 = self.imps[0][1].text
                else:
                    system1 = self.imps[0][2].text
                if self.imps[1][2].text == '':
                    hf = self.imps[1][1].text
                else:
                    hf = self.imps[1][2].text
                if self.imps[2][2].text == '':
                    leistung = self.imps[2][1].text.split(' ')[0]
                else:
                    leistung = self.imps[2][2].text
                if self.imps[3][2].text == '':
                    speicher = self.imps[3][1].text.split(' ')[0]
                else:
                    speicher = self.imps[3][2].text
                if self.imps[4][2].text == '':
                    vl = self.imps[4][1].text.split(' ')[0]
                else:
                    vl = self.imps[4][2].text
                if self.imps[5][2].text == '':
                    rl = self.imps[5][1].text.split(' ')[0]
                else:
                    rl = self.imps[5][2].text
            else:
                if self.imps[0][2].text == '':
                    system1 = self.imps[0][1].text
                else:
                    system1 = self.imps[0][2].text
                if self.imps[1][2].text == '':
                    hf = self.imps[1][1].text
                else:
                    hf = self.imps[1][2].text
                if self.imps[2][2].text == '':
                    leistung = self.imps[2][1].text
                else:
                    leistung = self.imps[2][2].text
                if self.imps[3][2].text == '':
                    vl = self.imps[3][1].text
                else:
                    vl = self.imps[3][2].text
                if self.imps[4][2].text == '':
                    rl = self.imps[4][1].text
                else:
                    rl = self.imps[4][2].text
            ifc_system_abruf = ifcopenshell.open('System_verbunden.ifc')
            system = ifc_system_abruf.by_type("IfcBuilding")[0]
            for property_set in system.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = system1
                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = int(hf)
                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = float(leistung)
                    property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue = float(speicher)
                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = float(vl)
                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = float(rl)
                elif property_set.RelatingPropertyDefinition.Name == "Pset_System":
                    property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue = system1
                    property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue = int(hf)
                    property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue = float(leistung)
                    property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue = float(vl)
                    property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue = float(rl)
            ifc_system_abruf.write('System_verbunden.ifc')
            self.app.root.add_widget(Systeminformationen(name="Systeminformationen_neu"))
            self.app.root.current = 'Systeminformationen_neu'
            self.app.root.transition.direction = "right"
        #Informationen der Bauteile'''###
        elif button.text == "Wärmeerzeuger":                                      #Folie mit den Informationen des Wärmerzeugers öffnen
            if ms.has_screen("Erzeuger") == False:
                self.app.root.add_widget(Erzeuger(name="Erzeuger"))
            self.app.root.current = 'Erzeuger'
            self.app.root.transition.direction = "left"
        elif button.text == "Umwälzpumpe":                                             #Folie mit den Informationen der Pumpen öffnen
            if ms.has_screen("Pumpen") == False:
                self.app.root.add_widget(Pumpen(name="Pumpen"))
            self.app.root.current = 'Pumpen'
            self.app.root.transition.direction = "left"
        elif button.text == "Rohre Heizkreis":                                              #Folie mit den Informationen der Rohre öffnen
            if ms.has_screen("Rohre") == False:
                self.app.root.add_widget(Rohre(name="Rohre"))
            self.app.root.current = 'Rohre'
            self.app.root.transition.direction = "left"      
        elif button.text == "Heizflächen":                                        #Folie mit den Informationen der Heizflächen öffnen
            if ms.has_screen("Heizflaechen") == False:
                self.app.root.add_widget(Heizflaechen(name="Heizflaechen"))
            self.app.root.current = 'Heizflaechen'
            self.app.root.transition.direction = "left"
        elif button.text == "Verteiler":                                         #Folie mit den Informationen der Verteilung öffnen
            if ms.has_screen("Verteiler") == False:
                self.app.root.add_widget(Verteiler(name="Verteiler"))
            self.app.root.current = 'Verteiler'
            self.app.root.transition.direction = "left"
        elif button.text == "Pufferspeicher":                                      #Folie mit den Informationen des Pufferspeichers öffnen
            if ms.has_screen("Pufferspeicher") == False:
                self.app.root.add_widget(Pufferspeicher(name="Pufferspeicher"))
            self.app.root.current = 'Pufferspeicher'
            self.app.root.transition.direction = "left" 
        elif button.text == "TWW-Speicher oder Frischwasserstation":              #Folie mit den Informationen des TWW-Speichers oder Frischwasserstation öffnen
            if ms.has_screen("Frischwasserstation") == False:
                self.app.root.add_widget(Frischwasserstation(name="Frischwasserstation"))
            self.app.root.current = 'Frischwasserstation'
            self.app.root.transition.direction = "left" 
        
        #Alle Bauteile
        elif button.text == "zurück zu den Bauteilen":                           #um zurück zur Übersicht der Bauteile zu gelangen
            self.app.root.current = 'Bauteile'
            self.app.root.transition.direction = "right"

         #Analyse > Ergebnisse
        elif button.text == "Ergebnisse hydraulischer Abgleich":                 #zu den Ergebnissen des hydraulischen Abgleichs kommen
            if ms.has_screen("Ergeb_Abgleich") == False:
                self.app.root.add_widget(Ergeb_Abgleich(name="Ergeb_Abgleich"))
            self.app.root.current = 'Ergeb_Abgleich'
            self.app.root.transition.direction = "left"
        elif button.text == "Ergebnisse der Lastberechnungen":                   #zu den Ergebnissen der Lastberechnungen kommen
            if ms.has_screen("Ergeb_Last") == False:
                self.app.root.add_widget(Ergeb_Last(name="Ergeb_Last"))
            self.app.root.current = 'Ergeb_Last'
            self.app.root.transition.direction = "left"
        #zurück zur Analyseübersicht gibt es schon
        
        #Abgleich und Lastberechnung
        elif button.text == "zurück zur Ergebnissübersicht":                     #zur Ergbnisauswahl zurückkehren
            self.app.root.current = 'Ergebnisse'
            self.app.root.transition.direction = "right"
        
        #Qualitätssicherung
        elif button.text == "Dimensionierung":                                      #zu den QS-Maßnahmen der Dimensionierung
            if ms.has_screen("Dimensionierung") == False:
                self.app.root.add_widget(Dimensionierung(name="Dimensionierung"))
            self.app.root.current = 'Dimensionierung'
            self.app.root.transition.direction = "left"
        elif button.text == "Eignung für Wärmepumpe":                                      #zu den QS-Maßnahmen der Dimensionierung
            if ms.has_screen("Eignung für Wärmepumpe") == False:
                self.app.root.add_widget(Eignung_WP(name="Eignung für Wärmepumpe"))
            self.app.root.current = "Eignung für Wärmepumpe"
            self.app.root.transition.direction = "left"
        elif button.text == "Eignung der vorhandenen Heizflächen":                                      #zu den QS-Maßnahmen der Dimensionierung
            if ms.has_screen("Eignung der vorhandenen Heizflächen") == False:
                self.app.root.add_widget(Eignung_Heizflaechen(name="Eignung der vorhandenen Heizflächen"))
            self.app.root.current = "Eignung der vorhandenen Heizflächen"
            self.app.root.transition.direction = "left"
            
        elif button.text == "Eignung der Heizflächen überprüfen":                                      #zu den QS-Maßnahmen der Dimensionierung
            for heizkoerper in self.heizungen:    
                self.app.qs_heizkoerper[heizkoerper] = [self.leistungen[str(self.heizungen[heizkoerper])].text.split(' ')[0], self.raumnamen[heizkoerper], self.lasten[self.raumnamen[heizkoerper]]]
            if ms.has_screen("Eignung der Heizflächen überprüfen") == False:
                self.app.root.add_widget(Eignung_Heizflaechen2(name="Eignung der Heizflächen überprüfen"))
            self.app.root.current = "Eignung der Heizflächen überprüfen"
            self.app.root.transition.direction = "left" 
            
        elif button.text == "Hydraulischer Abgleich":                          #zu den QS-Maßnahmen des hydraulischen Abgleichs
            if ms.has_screen("Hydraulischer_Abgleich") == False:
                self.app.root.add_widget(Hydraulischer_Abgleich(name="Hydraulischer_Abgleich"))
            self.app.root.current = 'Hydraulischer_Abgleich'
            self.app.root.transition.direction = "left"
        
        #Dimensionierung, Abgleich
        elif button.text == "zurück zum Qualitätssicherungsmenü":              #zurück zur Auswahl der Qualitätssicherung
            self.app.root.current = 'Qualitaetssicherung'
            self.app.root.transition.direction = "right"
    def heizkoerper_setting(self, button):
            #if button.text in self.app.eingaben['Heizkreis'][self.current_heizkreis].get('Heizkoerper', []): ###diese Funktion wird von Wände hinzufügen verwendet
        heizkoerper_data = self.app.eingaben['Heizkreis'][self.current_heizkreis]['Heizkoerper'][button.text]
        self.current_heizkoerper = button.text
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Modify Heizkoerper'])
        for txt, txt2, imp, imp2 in self.imps:
            imp2.text = str(heizkoerper_data[txt.text])
        self.our_layouts['Modify Heizkoerper'].children[-1].children[-2].text=button.text
        self.current_layout=button.text

    def room_setting(self,button):
            #if button.text in self.app.eingaben['Räume'][self.current_room].get('Wände', []): ###diese Funktion wird von Wände hinzufügen verwendet
        room_data = self.app.eingaben['Räume'][button.text]
        self.current_room1 = button.text
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Modify Room'])
        for txt, txt2, imp, imp2 in self.imps:
            imp2.text = str(room_data[txt.text])
        self.anfangswert_mod.text = room_data['Raumhoehe']
        self.anfangswert_flaeche_mod.text = room_data['Raumflaeche']
        self.anfangswert_tsoll_mod.text = room_data['Tsoll']
        self.our_layouts['Modify Room'].children[-1].children[-2].text=button.text
        self.current_layout=button.text

    def wand_setting(self,button):
            #if button.text in self.app.eingaben['Räume'][self.current_room].get('Wände', []): ###diese Funktion wird von Wände hinzufügen verwendet
        wand_data = self.app.eingaben['Räume'][self.current_room]['Wände'][button.text]
        self.current_wall = button.text
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Modify Wall'])
        for txt, txt2, imp, imp2 in self.imps:
            imp2.text = str(wand_data[txt.text])
        self.anfangswert_mod.text = wand_data['U-Wert']
        self.anfangswert_laenge_mod.text = wand_data['Länge [m]']
        self.anfangswert_dicke_mod.text = wand_data['Dicke [cm]']
        self.anfangswert_hoehe_mod.text = wand_data['Höhe [m]']
        self.anfangswert_tangrenzung_mod.text = wand_data['angrenzende Temperatur [°C]']
        if wand_data['Angrenzung'] == 'e':
            self.angrenzungs_anzeige_mod.text = 'außen'
        elif wand_data['Angrenzung'] == 'b':
            self.angrenzungs_anzeige_mod.text = 'beheizt'
        else:
            self.angrenzungs_anzeige_mod.text = 'unbeheizt'
        self.our_layouts['Modify Wall'].children[-1].children[-2].text=button.text
        self.current_layout=button.text
    def fenster_setting(self,button):
        fenster_data = self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Fenster'][button.text]
        self.current_window = button.text
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Modify Window'])
        for txt, txt2, imp, imp2 in self.imps:
            imp2.text = str(fenster_data[txt.text])
        self.anfangswert_mod.text = fenster_data['U-Wert']
        self.anfangswert_breite_mod.text = fenster_data['Breite [m]']
        self.anfangswert_hoehe_mod.text = fenster_data['Höhe [m]']
        self.anfangswert_tangrenzung_mod.text = fenster_data['angrenzende Temperatur [°C]']  
        if fenster_data['Angrenzung'] == 'e':
            self.angrenzungs_anzeige_mod.text = 'außen'
        elif fenster_data['Angrenzung'] == 'b':
            self.angrenzungs_anzeige_mod.text = 'beheizt'
        else:
            self.angrenzungs_anzeige_mod.text = 'unbeheizt'
        self.anfangswert_mod.text = self.anfangswert.text
        self.our_layouts['Modify Window'].children[-1].children[-2].text=button.text
        self.current_layout=button.text
    def tuer_setting(self,button):
        tueren_data = self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Tür'][button.text]
        self.current_door = button.text
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Modify Door'])
        for txt, txt2, imp, imp2 in self.imps:
            imp2.text = str(tueren_data[txt.text]) 
        self.anfangswert_mod.text = tueren_data['U-Wert']
        self.anfangswert_breite_mod.text = tueren_data['Breite [m]']
        self.anfangswert_hoehe_mod.text = tueren_data['Höhe [m]']
        self.anfangswert_tangrenzung_mod.text = tueren_data['angrenzende Temperatur [°C]'] 
        if tueren_data['Angrenzung'] == 'e':
            self.angrenzungs_anzeige_mod.text = 'außen'
        elif tueren_data['Angrenzung'] == 'b':
            self.angrenzungs_anzeige_mod.text = 'beheizt'
        else:
            self.angrenzungs_anzeige_mod.text = 'unbeheizt'
        self.anfangswert_mod.text = self.anfangswert.text
        self.our_layouts['Modify Door'].children[-1].children[-2].text=button.text
        self.current_layout=button.text
    def decke_boden_setting(self,button):
        decke_data = self.app.eingaben['Räume'][self.current_room]['Decke'][button.text]
        boden_data = self.app.eingaben['Räume'][self.current_room]['Boden'][button.text]
        self.current_decke = button.text
        self.current_boden = button.text
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Modify Decke und Boden'])
        for txt, txt2, imp, imp2, imp3, imp4 in self.imps:
            imp2.text = str(decke_data[txt.text])
            imp4.text = str(boden_data[txt.text])  
        self.anfangswert_mod_d.text = decke_data['U-Wert']
        self.anfangswert_dicke_d_mod.text = decke_data['Dicke [cm]']
        self.anfangswert_flaeche_d_mod.text = decke_data['Fläche [m²]']
        self.anfangswert_tangrenzung_d_mod.text = decke_data['angrenzende Temperatur [°C]']  
        if decke_data['Angrenzung'] == 'e':
            self.angrenzungs_anzeige_mod_d.text = 'außen'
        elif decke_data['Angrenzung'] == 'b':
            self.angrenzungs_anzeige_mod_d.text = 'beheizt'
        elif decke_data['Angrenzung'] == 'g':
            self.angrenzungs_anzeige_mod_d.text = 'Erdreich'
        else:
            self.angrenzungs_anzeige_mod_d.text = 'unbeheizt'
        self.anfangswert_mod_b.text = boden_data['U-Wert']
        self.anfangswert_dicke_b_mod.text = boden_data['Dicke [cm]']
        self.anfangswert_flaeche_b_mod.text = boden_data['Fläche [m²]']
        self.anfangswert_tangrenzung_b_mod.text = boden_data['angrenzende Temperatur [°C]'] 
        if boden_data['Angrenzung'] == 'e':
            self.angrenzungs_anzeige_mod_b.text = 'außen'
        elif boden_data['Angrenzung'] == 'b':
            self.angrenzungs_anzeige_mod_b.text = 'beheizt'
        elif boden_data['Angrenzung'] == 'g':
            self.angrenzungs_anzeige_mod_b.text = 'Erdreich'
        else:
            self.angrenzungs_anzeige_mod_b.text = 'unbeheizt'           
        self.our_layouts['Modify Decke und Boden'].children[-1].children[-2].text=button.text
        self.current_layout=button.text
    def __init__(self, *args, **kwargs):
        super(Mixed_class, self).__init__(*args, **kwargs)
        self.app            = App.get_running_app()
        self.raumbutton = ''
        self.our_layouts    = {}
        self.current_layout = None

#Hauptmenü
class Main(Mixed_class):    
    def __init__(self, *args, **kwargs):
        super(Main, self).__init__(*args, **kwargs)
        self.our_layouts['Main'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Main']);self.current_layout='Main'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Main'].add_widget(grid_add)
        button_daten = Button(text="Datenerfassung und Berechnungen", font_size = 32, on_release=self.switch_layout)
        button_analyse = Button(text="Analyse und Datenanpassung", font_size = 32, on_release=self.switch_layout)
        button_qs = Button(text="Qualitätssicherung", font_size = 32, on_release=self.switch_layout)
        button_beenden = Button(text="Beenden", font_size = 24, size_hint=[1.0, 0.30], background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_daten); grid_add.add_widget(button_analyse);
        grid_add.add_widget(button_qs); grid_add.add_widget(button_beenden)

#Datenerfassung und Berechnungen
class Datenerfassung(Mixed_class):    
    def __init__(self, *args, **kwargs):
        super(Datenerfassung, self).__init__(*args, **kwargs)
        self.our_layouts['Datenerfassung'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Datenerfassung']);self.current_layout='Datenerfassung'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Datenerfassung'].add_widget(grid_add)
        button_heizlast         = Button(text="Heizlast nach DIN EN 12831", font_size = 24, on_release=self.switch_layout)
        button_warmwasser       = Button(text="Trinkwarmwasserlast auf Basis DIN EN 15450", font_size = 24, on_release=self.switch_layout)
        button_anlagenerfassung = Button(text="Anlagenerfassung", font_size = 24, on_release=self.switch_layout)
        button_parametrisierung = Button(text="Anlagenparametrisierung", font_size = 24, on_release=self.switch_layout)
        button_abgleich         = Button(text="Automatischer hydraulischer Abgleich", font_size = 24, on_release=self.switch_layout)
        button_zurück           = Button(text="zurück zum Hauptmenü", font_size = 20, background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_heizlast); grid_add.add_widget(button_warmwasser);
        grid_add.add_widget(button_anlagenerfassung); grid_add.add_widget(button_parametrisierung)
        grid_add.add_widget(button_abgleich); grid_add.add_widget(button_zurück)



#Analyse
class Analyse(Mixed_class):    
    def __init__(self, *args, **kwargs):
        super(Analyse, self).__init__(*args, **kwargs)
        self.our_layouts['Analyse'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Analyse']);self.current_layout='Analyse'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Analyse'].add_widget(grid_add)
        button_daten       = Button(text="Datenabruf und -anpassung", font_size = 24, on_release=self.switch_layout)
        button_ergebnisse  = Button(text="Ergebnisse", font_size = 24, on_release=self.switch_layout)
        button_zurück      = Button(text="zurück zum Hauptmenü", font_size = 20, background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_daten); grid_add.add_widget(button_ergebnisse);
        grid_add.add_widget(button_zurück);


#Qualitätssicherung
class Qualitaetssicherung(Mixed_class):    
    def __init__(self, *args, **kwargs):
        super(Qualitaetssicherung, self).__init__(*args, **kwargs)
        self.our_layouts['Qualitaetssicherung'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Qualitaetssicherung']);self.current_layout='Qualitaetssicherung'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Qualitaetssicherung'].add_widget(grid_add)
        button_dimensionierung  = Button(text="Dimensionierung", font_size = 24, on_release=self.switch_layout)
        button_eignung_wp       = Button(text="Eignung für Wärmepumpe", font_size = 24, on_release=self.switch_layout)
        button_eignung_heizflaechen = Button(text="Eignung der vorhandenen Heizflächen", font_size = 24, on_release=self.switch_layout)
        button_abgleich = Button(text="Hydraulischer Abgleich", font_size = 24, on_release=self.switch_layout)
        button_zurück   = Button(text="zurück zum Hauptmenü", font_size = 20, background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_dimensionierung); grid_add.add_widget(button_eignung_wp)
        grid_add.add_widget(button_eignung_heizflaechen); grid_add.add_widget(button_abgleich)
        grid_add.add_widget(button_zurück);

#Heizlastberechnung
class Heizlast(Mixed_class): 
    def __init__(self, *args, **kwargs):
        super(Heizlast, self).__init__(*args, **kwargs)
        self.our_layouts['Heizlast'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Heizlast']);self.current_layout='Heizlast'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Heizlast'].add_widget(grid_titel)
        titel = Label(text="Heizlast nach DIN EN 12831", font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(cols=1)
        self.our_layouts['Heizlast'].add_widget(grid_add)
        button_start  = Button(text="Eingaben zur Heizlastberechnung starten", on_release=self.switch_layout)
        button_zurueck  = Button(text= "zurück zum Menü der Datenerfassung", on_release=self.switch_layout)
        grid_add.add_widget(button_start); grid_add.add_widget(button_zurueck)

class Gebaeude(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Gebaeude, self).__init__(*args, **kwargs)
        self.building = ifc_file.by_type("IfcBuilding")
        self.our_layouts['Gebaeude'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Gebaeude']);self.current_layout='Gebaeude'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Gebaeude'].add_widget(grid_titel)
        titel = Label(text='Gebäudedaten', font_size=32)
        grid_titel.add_widget(titel)
        #outline_width=2, outline_color=[0.2]*4, # Glow/Schatten # Label
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['Gebaeude'].add_widget(grid_add)
        lst = ["Beschreibung", "PLZ"]
        lst2 = ["Text", "fünfstellige Zahl"]
        self.imps = []
        i = 0
        for txt in lst:
            txt = Label(text=txt, font_size=28) 
            inp = TextInput(hint_text= lst2[i])
            self.imps.append( (txt, inp) )
            grid_add.add_widget(txt) # Titles
            grid_add.add_widget(inp) # Inputs
            i = i +1
        
        df = pd.read_excel('Klimadaten.xlsx')
        e = 0
        self.klima = {}
        for plz in df['PLZ']:
            self.klima.update({plz:[df['Ort'][e], df['Auslegungsaußentemperatur'][e], df['Jahresmittlere Außentemperatur'][e], df['Höhe'][e]]})
            e = e+1
        button_zurueck = Button(text= "zurück zum Beginn", background_color= (0.8,0.1,0,1), 
                                font_size=18, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button= Button(text="Räume hinzufügen (Gebäudedaten sind dann abgeschlossen)", font_size=18, background_color= (0.1,0.8,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck); grid_add.add_widget(button);

class Raeume_eingeben(Mixed_class):
    def room_append(self, button): self.__room_append()# add a room to the stack
    def __room_append(self, update=False):   # update or add a room to the stack
        room_data = {}
        for txt, txt2, imp, imp2 in self.imps:
            if update: imp = imp2 # use the updating stuff ...
            if txt.text == 'Raumname':
                room_name=imp.text
                if imp.text == 'Heutenicht' or imp.text == 'HSV11':
                    self.nmin[imp.text] = 1.0
                else: 
                    self.nmin[imp.text] = 0.5
            room_data[txt.text] = imp.text
            room_data['Raumhoehe'] = self.anfangswert.text
            room_data['Raumflaeche'] = self.anfangswert_flaeche.text
            room_data['Tsoll'] = self.anfangswert_tsoll.text
            imp.text=''
        self.app.eingaben['Räume'][room_name] = room_data
        if update: return
        # we add a tab button and we keep it stored with us
        self.app.eingaben['Räume'][room_name]["TabButton"] = Button(text=room_name,
            on_release=self.room_setting, size_hint_x=None, font_size=12)
        self.L_REITER.add_widget(self.app.eingaben['Räume'][room_name]["TabButton"])
        
    def room_cancel(self, button=None):
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Raum hinzufügen'])
        self.current_layout = 'Raum hinzufügen'
        #for txt, txt2, imp, imp2 in self.imps: imp.text = ""
    def room_delete(self, button):  ### remove a room from the stack
        self.L_REITER.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room1]["TabButton"])
        del self.app.eingaben['Räume'][self.current_room1]# remove the data set
        self.room_cancel()# get us to the startscreen
    def room_update(self, button):  ### update a room
        # we want to reuse the button (hopefully keeping its position)
        self.L_REITER.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room1]["TabButton"])
        tab_button = self.app.eingaben['Räume'][self.current_room1]["TabButton"]
        for txt, txt2, imp, imp2 in self.imps:
            if txt.text == 'Raumname':
                room_name=imp2.text; break
        #self.room_delete(None)# room_delete doesn't need a button
        del self.app.eingaben['Räume'][self.current_room1]
        self.room_cancel()# get us to the startscreen
        self.anfangswert.text = self.anfangswert_mod.text
        self.anfangswert_flache.text = self.anfangswert_flaeche_mod.text
        self.anfangswert_tsoll.text = self.anfangswert_tsoll_mod.text
        self.__room_append(True)
        self.app.eingaben['Räume'][self.current_room1]["TabButton"] = tab_button
        tab_button.text = room_name
        #self.L_REITER.add_widget(self.eingaben['Räume'][room_name]["TabButton"])

    def on_raumhoehe(self, instance, raumhoehe):
        self.anfangswert.text =  str(round(raumhoehe, 2))    
    def on_raumhoehe_mod(self, instance, raumhoehe_mod):
        self.anfangswert_mod.text =  str(round(raumhoehe_mod, 2))
    def on_raumflaeche(self, instance, raumflaeche):
        self.anfangswert_flaeche.text =  str(round(raumflaeche, 2))    
    def on_raumflaeche_mod(self, instance, raumflaeche_mod):
        self.anfangswert_flaeche_mod.text =  str(round(raumflaeche_mod, 2))
    def on_tsoll(self, instance, tsoll):
        self.anfangswert_tsoll.text =  str(round(tsoll, 2))    
    def on_tsoll_mod(self, instance, tsoll_mod):
        self.anfangswert_tsoll_mod.text =  str(round(tsoll_mod, 2))        

    def __init__(self, *args, **kwargs):
        super(Raeume_eingeben, self).__init__(*args, **kwargs)
        self.app.eingaben['Räume'] = {} # eingaben des raums
        self.nmin = {}
        #
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        #self.L_BASIS, self.spacing, self.orientation = self, 10, 'vertical'
        #
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_REITER = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_BASIS.add_widget(self.L_REITER); self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_REITER.add_widget(Button(text='Raum hinzufügen', size_hint_x=None, font_size=12,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)

        self.our_layouts[   'Raum hinzufügen'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.our_layouts['Modify Room'] = BoxLayout(spacing=10, orientation='vertical')# Layout 2

        self.L_KOERPER.add_widget(self.our_layouts['Raum hinzufügen']);self.current_layout='Raum hinzufügen'
        head_mod = BoxLayout(orientation='horizontal', height=15, size_hint_y=None)
        self.our_layouts['Modify Room'].add_widget( head_mod)
        head_mod.add_widget(Label(text="Angepasst wird"))
        head_mod.add_widget(Label(text="Dummy-Raum"))
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts[   'Raum hinzufügen'].add_widget(grid_titel)
        titel = Label(text='Räume', font_size=30)
        grid_titel.add_widget(titel)
        lst = ["Raumname"] #nmin raus
        lst2 = ["Text"] #- raus
        grid_add = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.2])
        self.our_layouts[   'Raum hinzufügen'].add_widget(grid_add)
        grid_mod = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.2])#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Room'].add_widget(grid_mod)
        #
        self.imps = []
        ### Add labels and input-fields
        i = 0
        for txt in lst:
            txt, txt2 = Label(text=txt, font_size=24), Label(text=txt, font_size=24)
            inp, inp2 = TextInput(hint_text= lst2[i]), TextInput(hint_text=lst2[i])
            self.imps.append( (txt, txt2, inp, inp2) )
            grid_add.add_widget(txt); grid_mod.add_widget(txt2) # Titles
            grid_add.add_widget(inp); grid_mod.add_widget(inp2) # Inputs
            i = i +1
        #Höhe
        grid_add1 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.6])
        self.our_layouts['Raum hinzufügen'].add_widget(grid_add1)
        raumhoehe = Slider(min = 1.8, max = 4.5, step = 0.05, value = 2.5)
        grid_add1.add_widget(Label(text = 'Raumhöhe [m]', font_size=24))
        grid_add1.add_widget(raumhoehe)
        self.anfangswert = Label(text = '2.5', font_size=24)
        grid_add1.add_widget(self.anfangswert)
        raumhoehe.bind(value = self.on_raumhoehe)
        #Fläche
        raumflaeche = Slider(min = 4.0, max = 35.0, step = 0.01, value = 15.0)
        grid_add1.add_widget(Label(text = 'Raumfläche [m²]', font_size=24))
        grid_add1.add_widget(raumflaeche)
        self.anfangswert_flaeche = Label(text = '15.0', font_size=24)
        grid_add1.add_widget(self.anfangswert_flaeche)
        raumflaeche.bind(value = self.on_raumflaeche) 
        #Solltemperatur - Tinnen
        tsoll = Slider(min = 15.0, max = 25.0, step = 0.5, value = 20.0)
        grid_add1.add_widget(Label(text = 'Solltemperatur [°C]', font_size=24))
        grid_add1.add_widget(tsoll)
        self.anfangswert_tsoll = Label(text = '20.0', font_size=24)
        grid_add1.add_widget(self.anfangswert_tsoll)
        tsoll.bind(value = self.on_tsoll)        
        
        grid_mod1 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.6])
        self.our_layouts['Modify Room'].add_widget(grid_mod1)
        self.raumhoehe_mod = Slider(min = 1.8, max = 4.50, step = 0.05, value = 2.5)    #Höhe
        grid_mod1.add_widget(Label(text = 'Raumhöhe [m]', font_size=24))
        grid_mod1.add_widget(self.raumhoehe_mod)
        self.anfangswert_mod = Label(text = '2.5', font_size=24)
        grid_mod1.add_widget(self.anfangswert_mod)
        self.raumhoehe_mod.bind(value = self.on_raumhoehe_mod)                          
        self.raumflaeche_mod = Slider(min = 4.0, max = 35.0, step = 0.01, value = 15.0)     #Fläche
        grid_mod1.add_widget(Label(text = 'Raumfläche [m²]', font_size=24))
        grid_mod1.add_widget(self.raumflaeche_mod)
        self.anfangswert_flaeche_mod = Label(text = '2.5', font_size=24)
        grid_mod1.add_widget(self.anfangswert_flaeche_mod)
        self.raumflaeche_mod.bind(value = self.on_raumflaeche_mod)
        self.tsoll_mod = Slider(min = 15.0, max = 25.0, step = 0.5, value = 20.0)     #Tsoll
        grid_mod1.add_widget(Label(text = 'Solltemperatur [°C]', font_size=24))
        grid_mod1.add_widget(self.tsoll_mod)
        self.anfangswert_tsoll_mod = Label(text = '2.5', font_size=24)
        grid_mod1.add_widget(self.anfangswert_tsoll_mod)
        self.tsoll_mod.bind(value = self.on_tsoll_mod)

        btn_add = Button(text='Raum hinzufügen', size_hint=(0.5,0.2),
            on_press=self.room_append)
        self.our_layouts['Raum hinzufügen'].add_widget(btn_add)
        grid_add2 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts[   'Raum hinzufügen'].add_widget(grid_add2)
        button_zurueck = Button(text= "zurück zu den Gebäudedaten", background_color= (0.8,0.1,0,1), 
                                font_size=18, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_waende= Button(text="Wände hinzufügen (Räume sind dann abgeschlossen)", background_color= (0.1,0.8,0,1),
                                font_size=18, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add2.add_widget(button_zurueck); grid_add2.add_widget(button_waende)
        grid_mod2 = GridLayout(spacing=10, cols=3, size_hint=(1.0, 0.15))#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Room'].add_widget(grid_mod2)
        grid_mod2.add_widget( Button(text="Delete", on_release=self.room_delete))
        grid_mod2.add_widget( Button(text="Update", on_release=self.room_update))
        grid_mod2.add_widget( Button(text="Cancel", on_release=self.room_cancel))

class Waende(Mixed_class):
    #def _store(self, btn): pass
    def waende_append(self, button): self.__waende_append()# add a room to the stack
    def __waende_append(self, update=False):   # update or add a room to the stack
        wand_data = {}
        angrenzungen = {'außen': 'e', 'unbeheizt': 'u', 'Erdreich': 'g', 'beheizt': 'b'}
        for txt, txt2, imp, imp2 in self.imps:
            if update: imp = imp2
            if txt.text == 'Beschreibung': Beschreibung= imp.text
            wand_data[txt.text]= imp.text
            wand_data['Länge [m]'] = self.anfangswert_laenge.text
            wand_data['Dicke [cm]'] = self.anfangswert_dicke.text
            wand_data['Höhe [m]'] = self.anfangswert_hoehe.text
            wand_data['angrenzende Temperatur [°C]'] = self.anfangswert_tangrenzung.text
            wand_data['U-Wert']= self.anfangswert.text
            wand_data['Angrenzung'] = angrenzungen[self.angrenzungs_anzeige.text]
            imp.text = ''
        wand_data['Name'] = self.current_room + '-' + Beschreibung    
        wand_data['Raumname'] = self.current_room
        self.wandliste.append(wand_data)
        if "Wände" not in self.app.eingaben['Räume'][self.current_room]:
            self.app.eingaben['Räume'][self.current_room]["Wände"] = {}
        self.app.eingaben['Räume'][self.current_room]["Wände"][Beschreibung] = wand_data
        for name in self.app.eingaben['Räume'][self.current_room]['Wände']:
            self.app.waende_eingegeben[name] = self.current_room
        # we add a tab button and we keep it stored with us
        self.app.eingaben['Räume'][self.current_room]['Wände'][Beschreibung]["TabButton"] = Button(text=Beschreibung,
            on_release=self.wand_setting, size_hint_x=None, font_size=12, height=75, size_hint_y=None)
        self.L_Leiste.add_widget(self.app.eingaben['Räume'][self.current_room]['Wände'][Beschreibung]["TabButton"])
    def wall_cancel(self, button=None):
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Wände hinzufügen'])
        self.current_layout = 'Wände hinzufügen'
        #for txt, txt2, imp, imp2 in self.imps: imp.text = ""
    def wall_delete(self, button):  ### remove a room from the stack    
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]["TabButton"])
        del self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]["TabButton"]# remove the data set
        self.wall_cancel()# get us to the startscreen
    def wall_update(self, button):  ### update a wall
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]["TabButton"])
        tab_button = self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]["TabButton"]
        for txt, txt2, imp, imp2 in self.imps:
            if txt.text == 'Beschreibung':
                Beschreibung=imp2.text; break
        del self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]
        self.wall_cancel()# get us to the startscreen
        self.anfangswert.text = self.anfangswert_mod.text
        self.anfangswert_laenge.text = self.anfangswert_laenge_mod.text
        self.anfangswert_dicke.text = self.anfangswert_dicke_mod.text
        self.anfangswert_hoehe.text = self.anfangswert_hoehe_mod.text
        self.angrenzungs_anzeige.text = self.angrenzungs_anzeige_mod.text
        self.anfangswert_tangrenzung.text = self.anfangswert_tangrenzung_mod.text
        self.__waende_append(True)
        self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]["TabButton"] = tab_button
        tab_button.text = Beschreibung
#        self.L_REITER.add_widget(self.eingaben['Räume'][room_name]["TabButton"])
    def set_room(self, button):
        #self.__waende_append(self.current_room)
        self.L_Leiste.clear_widgets()
        self.L_Leiste.add_widget(Button(text='Wände hinzufügen', size_hint_x=None, font_size=12,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.current_room = button.text
        waende = self.app.eingaben['Räume'][button.text].get('Wände', {})
        for wand in waende:
            wand_data = waende[wand]
            self.L_Leiste.add_widget(wand_data["TabButton"])
            for txt, txt2, imp, imp2 in self.imps:
                imp.text = ''
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Wände hinzufügen']);self.current_layout='Wände hinzufügen'
    def on_wert_u(self, instance, u_wert):
        self.anfangswert.text =  str(round(u_wert, 2))
    def on_laenge_wand(self, instance, laenge):
        self.anfangswert_laenge.text =  str(round(laenge, 2))
    def on_dicke_wand(self, instance, dicke):
        self.anfangswert_dicke.text =  str(round(dicke, 2))
    def on_hoehe_wand(self, instance, hoehe):
        self.anfangswert_hoehe.text =  str(round(hoehe, 2))
    def on_push_angrenzung(self, button):
        self.angrenzungs_anzeige.text =  button.text
    def on_tangrenzung_wand(self, instance, t):
        self.anfangswert_tangrenzung.text =  str(round(t, 2))
    def on_wert_u_mod(self, instance, u_wert):
        self.anfangswert_mod.text =  str(round(u_wert, 2))
    def on_laenge_wand_mod(self, instance, laenge_mod):
         self.anfangswert_laenge_mod.text =  str(round(laenge_mod, 2))
    def on_dicke_wand_mod(self, instance, dicke_mod):
        self.anfangswert_dicke_mod.text =  str(round(dicke_mod, 2))
    def on_hoehe_wand_mod(self, instance, hoehe_mod):
        self.anfangswert_hoehe_mod.text =  str(round(hoehe_mod, 2))        
    def on_push_angrenzung_mod(self, button):
        self.angrenzungs_anzeige_mod.text =  button.text
    def on_tangrenzung_wand_mod(self, instance, t_mod):
        self.anfangswert_tangrenzung_mod.text =  str(round(t_mod, 2))
    def __init__(self, *args, **kwargs):
        super(Waende, self).__init__(*args, **kwargs)
        self.eingaben   = {} # hier heben wir die eingaben auf.
        self.wandliste = [] #kommen die Wände rein
        self.current_room = self.app.defined_rooms[0]
        #
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_BOX= BoxLayout(spacing=2, orientation='horizontal')
        self.L_Leiste= BoxLayout(spacing=2, orientation='vertical', width = 150, size_hint_x=None)
        #
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BOX.add_widget(self.L_KOERPER)
        self.L_BOX.add_widget(self.L_Leiste)
        self.L_REITER = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_BASIS.add_widget(self.L_REITER); self.L_BASIS.add_widget(self.L_BOX)
        ## Immer der erste Reiter fest
        for room_name in self.app.defined_rooms:
            self.L_REITER.add_widget(Button(text=room_name, on_release=self.set_room))
        self.L_Leiste.add_widget(Button(text='Wände hinzufügen', size_hint_x=None, font_size=12, height=75, size_hint_y=None,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.our_layouts['Wände hinzufügen'] = BoxLayout(spacing=10, orientation='vertical')
        self.our_layouts['Modify Wall'] = BoxLayout(spacing=10, orientation='vertical')
        # gleich aufsetzen:
        self.L_KOERPER.add_widget(self.our_layouts['Wände hinzufügen']);self.current_layout='Wände hinzufügen'
        head_mod = BoxLayout(orientation='horizontal', height=15, size_hint_y=None)
        self.our_layouts['Modify Wall'].add_widget( head_mod)
        head_mod.add_widget(Label(text="Angepasst wird"))
        head_mod.add_widget(Label(text="Dummy-Raum"))
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Wände hinzufügen'].add_widget(grid_titel)
        titel = Label(text='Wände', font_size=30)
        grid_titel.add_widget(titel)

        lst = ["Beschreibung"]
        lst2 = ["Text"]
        #outline_width=2, outline_color=[0.2]*4, # Glow/Schatten # Label
        grid_add = GridLayout(spacing=10, cols=2, size_hint=(1.0 ,0.2))
        self.our_layouts['Wände hinzufügen'].add_widget(grid_add)
        grid_mod = GridLayout(spacing=10, cols=2, size_hint=(1.0,0.2))#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Wall'].add_widget(grid_mod)
        #
        self.imps = []
        ### Add labels and input-fields
        i = 0
        for txt in lst:
            txt, txt2 = Label(text=txt, font_size=24), Label(text=txt, font_size=24)
            inp, inp2 = TextInput(hint_text=lst2[i]), TextInput(hint_text=lst2[i])
            self.imps.append( (txt, txt2, inp, inp2) )
            grid_add.add_widget(txt); grid_mod.add_widget(txt2) # Titles
            grid_add.add_widget(inp); grid_mod.add_widget(inp2) # Inputs
            i = i +1
               
        grid_add1 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.6])
        self.our_layouts['Wände hinzufügen'].add_widget(grid_add1)
        laenge_wand = Slider(min = 1.5, max = 8.0, step = 0.01, value = 4.0)     #Länge
        grid_add1.add_widget(Label(text = 'Länge [m]', font_size=24))
        grid_add1.add_widget(laenge_wand)
        self.anfangswert_laenge = Label(text = '4.0', font_size=24)
        grid_add1.add_widget(self.anfangswert_laenge)
        laenge_wand.bind(value = self.on_laenge_wand)
        dicke_wand = Slider(min = 5.0, max = 50.0, step = 1, value = 30.0)     #Wanddicke
        grid_add1.add_widget(Label(text = 'Dicke [cm]', font_size=24))
        grid_add1.add_widget(dicke_wand)
        self.anfangswert_dicke = Label(text = '30.0', font_size=24)
        grid_add1.add_widget(self.anfangswert_dicke)
        dicke_wand.bind(value = self.on_dicke_wand)
        hoehe_wand = Slider(min = 1.30, max = 4.50, step = 0.05, value = 2.50)     #Wandhoehe
        grid_add1.add_widget(Label(text = 'Höhe [m]', font_size=24))
        grid_add1.add_widget(hoehe_wand)
        self.anfangswert_hoehe = Label(text = '2.50', font_size=24)
        grid_add1.add_widget(self.anfangswert_hoehe)
        hoehe_wand.bind(value = self.on_hoehe_wand)        
        grid_add1.add_widget(Label(text = 'Angrenzung', font_size=24))          #Angrenzung
        buttons_box_angrenzung = BoxLayout (spacing=10)
        grid_add1.add_widget(buttons_box_angrenzung)
        buttons_box_angrenzung.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung))
        buttons_box_angrenzung.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung))
        buttons_box_angrenzung.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung))
        self.angrenzungs_anzeige = Label(text = 'außen', font_size=24)
        grid_add1.add_widget(self.angrenzungs_anzeige)
        tangrenzung_wand = Slider(min = -15.0, max = 26.0, step = 0.1, value = 20.0)     #Benachbarte Temperatur
        grid_add1.add_widget(Label(text = 'angrenzende Temperatur [°C]', font_size=24))
        grid_add1.add_widget(tangrenzung_wand)
        self.anfangswert_tangrenzung = Label(text = '20.0', font_size=24)
        grid_add1.add_widget(self.anfangswert_tangrenzung)
        tangrenzung_wand.bind(value = self.on_tangrenzung_wand)  
        u_wert_control = Slider(min = 0.05, max = 2.50, step = 0.01, value = 0.5)   #U-Wert
        grid_add1.add_widget(Label(text = 'U-Wert [W/m²K]', font_size=24))
        grid_add1.add_widget(u_wert_control)
        self.anfangswert = Label(text = '0.5', font_size=24)
        grid_add1.add_widget(self.anfangswert)
        u_wert_control.bind(value = self.on_wert_u)
        
        grid_mod1 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.6])
        self.our_layouts['Modify Wall'].add_widget(grid_mod1)
        
        laenge_wand_mod = Slider(min = 1.5, max = 8.0, step = 0.01, value = 4.0)     #Länge
        grid_mod1.add_widget(Label(text = 'Länge [m]', font_size=24))
        grid_mod1.add_widget(laenge_wand_mod)
        self.anfangswert_laenge_mod = Label(text = '4.0', font_size=24)
        grid_mod1.add_widget(self.anfangswert_laenge_mod)
        laenge_wand_mod.bind(value = self.on_laenge_wand_mod)
        dicke_wand_mod = Slider(min = 5.0, max = 50.0, step = 1.0, value = 30.0)     #Wanddicke
        grid_mod1.add_widget(Label(text = 'Dicke [cm]', font_size=24))
        grid_mod1.add_widget(dicke_wand_mod)
        self.anfangswert_dicke_mod = Label(text = '30.0', font_size=24)
        grid_mod1.add_widget(self.anfangswert_dicke_mod)
        dicke_wand_mod.bind(value = self.on_dicke_wand_mod)
        hoehe_wand_mod = Slider(min = 1.30, max = 4.50, step = 0.05, value = 2.50)     #Wandhoehe
        grid_mod1.add_widget(Label(text = 'Höhe [m]', font_size=24))
        grid_mod1.add_widget(hoehe_wand_mod)
        self.anfangswert_hoehe_mod = Label(text = '2.50', font_size=24)
        grid_mod1.add_widget(self.anfangswert_hoehe_mod)
        hoehe_wand.bind(value = self.on_hoehe_wand_mod)
        grid_mod1.add_widget(Label(text = 'Angrenzung', font_size=24))        #Angrenzung
        buttons_box_mod = BoxLayout (spacing=10)
        grid_mod1.add_widget(buttons_box_mod)
        buttons_box_mod.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung_mod))
        buttons_box_mod.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung_mod))
        buttons_box_mod.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung_mod))
        self.angrenzungs_anzeige_mod = Label(text = 'außen', font_size=24)
        grid_mod1.add_widget(self.angrenzungs_anzeige_mod)
        tangrenzung_wand_mod = Slider(min = -15.0, max = 26.0, step = 0.1, value = 20.0)     #Benachbarte Temperatur
        grid_mod1.add_widget(Label(text = 'angrenzende Temperatur [°C]', font_size=24))
        grid_mod1.add_widget(tangrenzung_wand_mod)
        self.anfangswert_tangrenzung_mod = Label(text = '20.0', font_size=24)
        grid_mod1.add_widget(self.anfangswert_tangrenzung_mod)
        tangrenzung_wand_mod.bind(value = self.on_tangrenzung_wand_mod) 
        self.u_wert_control_mod = Slider(min = 0.05, max = 2.50, step = 0.01, value = 0.5)   #U-Wert
        grid_mod1.add_widget(Label(text = 'U-Wert [W/m²K]', font_size=24))
        grid_mod1.add_widget(self.u_wert_control_mod)
        self.anfangswert_mod = Label(text = '0.5', font_size=24)
        grid_mod1.add_widget(self.anfangswert_mod)
        self.u_wert_control_mod.bind(value = self.on_wert_u_mod)
        
        btn_add = Button(text='Wände hinzufügen', size_hint=(0.5,0.2),
            on_press=self.waende_append)
        self.our_layouts['Wände hinzufügen'].add_widget(btn_add)
        grid_add2 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Wände hinzufügen'].add_widget(grid_add2)
        button_zurueck = Button(text= "zurück zu den Räumen", background_color= (0.8,0.1,0,1), 
                                font_size=18, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_waende= Button(text="Fenster hinzufügen (Wände sind dann abgeschlossen)", background_color= (0.1,0.8,0,1),
                                font_size=18, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add2.add_widget(button_zurueck); grid_add2.add_widget(button_waende)
        grid_mod2 = GridLayout(spacing=10, cols=3, size_hint=(1.0, 0.15))#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Wall'].add_widget(grid_mod2)
        grid_mod2.add_widget( Button(text="Delete", on_release=self.wall_delete))
        grid_mod2.add_widget( Button(text="Update", on_release=self.wall_update))
        grid_mod2.add_widget( Button(text="Cancel", on_release=self.wall_cancel))

class Fenster(Mixed_class):
    def fenster_append(self, button): self.__fenster_append()# add a room to the stack
    def __fenster_append(self, update=False):   # update or add a room to the stack
        fenster_data = {}
        angrenzungen = {'außen': 'e', 'unbeheizt': 'u', 'beheizt': 'b'}
        for txt, txt2, imp, imp2 in self.imps:
            if update: imp = imp2
            if txt.text == 'Beschreibung': Beschreibung=imp.text
            fenster_data[txt.text] = imp.text
            fenster_data['U-Wert']= self.anfangswert.text
            fenster_data['Breite [m]']= self.anfangswert_breite.text
            fenster_data['Höhe [m]']= self.anfangswert_hoehe.text 
            fenster_data['angrenzende Temperatur [°C]']= self.anfangswert_tangrenzung.text             
            fenster_data['Angrenzung'] = angrenzungen[self.angrenzungs_anzeige.text]
            imp.text = ''
        fenster_data['Name'] = self.current_wall + '_' + Beschreibung
        fenster_data['Raumname'] = self.current_room
        self.fensterliste.append(fenster_data)
        if "Fenster" not in self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]:
            self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Fenster'] = {}
        self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Fenster'][Beschreibung] = fenster_data
        for name in self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Fenster']:
            self.app.fenster_eingegeben[name] = self.current_wall
        # we add a tab button and we keep it stored with us
        self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Fenster'][Beschreibung]["TabButton"] = Button(text=Beschreibung,
            on_release=self.fenster_setting, size_hint_x=None, font_size=12, height=75, size_hint_y=None)
        self.L_Leiste.add_widget(self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Fenster'][Beschreibung]["TabButton"]) 
    def fenster_cancel(self, button=None):
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Fenster hinzufügen'])
        self.current_layout = 'Fenster hinzufügen'
    def fenster_delete(self, button):  ### remove a room from the stack    
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Fenster'][self.current_window]["TabButton"])
        del self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Fenster'][self.current_window]["TabButton"]# remove the data set
        self.fenster_cancel()# get us to the startscreen
    def fenster_update(self, button):  ### update a wall
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Fenster'][self.current_window]["TabButton"])
        tab_button = self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Fenster'][self.current_window]["TabButton"]
        for txt, txt2, imp, imp2 in self.imps:
            if txt.text == 'Beschreibung':
                Beschreibung=imp2.text; break
        del self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Fenster'][self.current_window]
        self.fenster_cancel()# get us to the startscreen
        self.anfangswert.text = self.anfangswert_mod.text
        self.anfangswert_breite.text = self.anfangswert_breite_mod.text
        self.anfangswert_hoehe.text = self.anfangswert_hoehe_mod.text
        self.anfangswert_tangrenzung.text = self.anfangswert_tangrenzung_mod.text
        self.angrenzungs_anzeige.text = self.angrenzungs_anzeige_mod.text
        self.__fenster_append(True)
        self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Fenster'][self.current_window]["TabButton"] = tab_button
        tab_button.text = Beschreibung
    def set_wall(self, button):
        #self.__waende_append(self.current_room)
        self.L_Leiste.clear_widgets()
        self.L_Leiste.add_widget(Button(text='Fenster hinzufügen', size_hint_x=None, font_size=12,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.current_wall = button.text
        fenster_liste = self.app.eingaben['Räume'][self.current_room]['Wände'][button.text].get('Fenster', {})
        for fenster in fenster_liste:
            fenster_data = fenster_liste[fenster]
            self.L_Leiste.add_widget(fenster_data["TabButton"])
            for txt, txt2, imp, imp2 in self.imps:
                imp.text = ''
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Fenster hinzufügen']);self.current_layout='Fenster hinzufügen'
    def set_room(self, button):
        self.current_room = button.text
        self.L_REITER2.clear_widgets()
        for wall in self.app.eingaben['Räume'][self.current_room]['Wände']:
            self.L_REITER2.add_widget(Button(text=wall, on_release=self.set_wall))
    def on_wert_u(self, instance, u_wert):
        self.anfangswert.text =  str(round(u_wert, 2))
    def on_breite_fenster(self, instance, breite):
        self.anfangswert_breite.text =  str(round(breite, 2))
    def on_hoehe_fenster(self, instance, hoehe):
        self.anfangswert_hoehe.text =  str(round(hoehe, 2))
    def on_tangrenzung_fenster(self, instance, t):
        self.anfangswert_tangrenzung.text =  str(round(t, 2))
    def on_push_angrenzung(self, button):
        self.angrenzungs_anzeige.text =  button.text
    def on_wert_u_mod(self, instance, u_wert):
        self.anfangswert_mod.text =  str(round(u_wert, 2))
    def on_breite_fenster_mod(self, instance, breite_mod):
         self.anfangswert_breite_mod.text =  str(round(breite_mod, 2))
    def on_hoehe_fenster_mod(self, instance, hoehe_mod):
        self.anfangswert_hoehe_mod.text =  str(round(hoehe_mod, 2))
    def on_tangrenzung_fenster_mod(self, instance, t_mod):
        self.anfangswert_tangrenzung_mod.text =  str(round(t_mod, 2))
    def on_push_angrenzung_mod(self, button):
        self.angrenzungs_anzeige_mod.text =  button.text
    def __init__(self, *args, **kwargs):
        super(Fenster, self).__init__(*args, **kwargs)
        self.eingaben   = {} # hier heben wir die eingaben auf.
        self.fensterliste = []
        self.current_room = self.app.defined_rooms[0]
        self.current_wall = sorted(self.app.defined_walls)[0]
        #
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_BOX= BoxLayout(spacing=2, orientation='horizontal')
        self.L_Leiste= BoxLayout(spacing=2, orientation='vertical', width = 150, size_hint_x=None)
        #
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BOX.add_widget(self.L_KOERPER)
        self.L_BOX.add_widget(self.L_Leiste)
        self.L_REITER = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_REITER2 = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_BASIS.add_widget(self.L_REITER); self.L_BASIS.add_widget(self.L_REITER2); self.L_BASIS.add_widget(self.L_BOX)
        for room in self.app.defined_rooms:
            self.L_REITER.add_widget(Button(text=room, on_release=self.set_room))
        self.current_room = self.app.defined_rooms[0]
        for wall in self.app.eingaben['Räume'][self.current_room]['Wände']:
            self.L_REITER2.add_widget(Button(text=wall, on_release=self.set_wall))
        self.L_Leiste.add_widget(Button(text='Fenster hinzufügen', size_hint_x=None, font_size=12, height=75, size_hint_y=None,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.our_layouts['Fenster hinzufügen'] = BoxLayout(spacing=10, orientation='vertical')
        self.our_layouts['Modify Window'] = BoxLayout(spacing=10, orientation='vertical')
        # gleich aufsetzen:
        self.L_KOERPER.add_widget(self.our_layouts['Fenster hinzufügen']);self.current_layout='Fenster hinzufügen'
        head_mod = BoxLayout(orientation='horizontal', height=15, size_hint_y=None)
        self.our_layouts['Modify Window'].add_widget( head_mod)
        head_mod.add_widget(Label(text="Angepasst wird"))
        head_mod.add_widget(Label(text="Dummy-Raum"))
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Fenster hinzufügen'].add_widget(grid_titel)
        titel = Label(text='Fenster', font_size=30)
        grid_titel.add_widget(titel)
        
        lst = ["Beschreibung"] 
        lst2 = ["Text"]
        grid_add = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.2])
        self.our_layouts['Fenster hinzufügen'].add_widget(grid_add)
        grid_mod = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.2])#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Window'].add_widget(grid_mod)
        #
        self.imps = []       
        ### Add labels and input-fields
        i = 0
        for txt in lst:
            txt, txt2 = Label(text=txt, font_size=24), Label(text=txt, font_size=24)
            inp, inp2 = TextInput(hint_text=lst2[i]), TextInput(hint_text=lst2[i])
            self.imps.append( (txt, txt2, inp, inp2) )
            grid_add.add_widget(txt); grid_mod.add_widget(txt2) # Titles
            grid_add.add_widget(inp); grid_mod.add_widget(inp2) # Inputs
            i = i +1
        grid_add1 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.6])
        self.our_layouts['Fenster hinzufügen'].add_widget(grid_add1)
        breite_fenster = Slider(min = 0.4, max = 3.0, step = 0.01, value = 1.20)     #Breite
        grid_add1.add_widget(Label(text = 'Breite [m]', font_size=24))
        grid_add1.add_widget(breite_fenster)
        self.anfangswert_breite = Label(text = '1.20', font_size=24)
        grid_add1.add_widget(self.anfangswert_breite)
        breite_fenster.bind(value = self.on_breite_fenster)
        hoehe_fenster = Slider(min = 0.4, max = 3.0, step = 0.01, value = 1.20)     #Höhe
        grid_add1.add_widget(Label(text = 'Höhe [m]', font_size=24))
        grid_add1.add_widget(hoehe_fenster)
        self.anfangswert_hoehe = Label(text = '1.20', font_size=24)
        grid_add1.add_widget(self.anfangswert_hoehe)
        hoehe_fenster.bind(value = self.on_hoehe_fenster)       
        grid_add1.add_widget(Label(text = 'Angrenzung', font_size=24))
        buttons_box = BoxLayout (spacing=10)
        grid_add1.add_widget(buttons_box)
        buttons_box.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung))
        buttons_box.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung))
        buttons_box.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung))
        self.angrenzungs_anzeige = Label(text = 'außen', font_size=24)
        grid_add1.add_widget(self.angrenzungs_anzeige)
        tangrenzung_fenster = Slider(min = -15.0, max = 26.0, step = 0.1, value = 20.0)     #Benachbarte temperatur
        grid_add1.add_widget(Label(text = 'angrenzende Temperatur [°C]', font_size=24))
        grid_add1.add_widget(tangrenzung_fenster)
        self.anfangswert_tangrenzung = Label(text = '20.0', font_size=24)
        grid_add1.add_widget(self.anfangswert_tangrenzung)
        tangrenzung_fenster.bind(value = self.on_tangrenzung_fenster)  
        u_wert_control = Slider(min = 0.05, max = 3.00, step = 0.05, value = 0.5)
        grid_add1.add_widget(Label(text = 'U-Wert [W/m²K]', font_size=24))
        grid_add1.add_widget(u_wert_control)
        self.anfangswert = Label(text = '0.5', font_size=24)
        grid_add1.add_widget(self.anfangswert)
        u_wert_control.bind(value = self.on_wert_u)
        
        grid_mod1 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.6])
        self.our_layouts['Modify Window'].add_widget(grid_mod1)
        breite_fenster_mod = Slider(min = 0.4, max = 3.0, step = 0.01, value = 1.20)     #Breite
        grid_mod1.add_widget(Label(text = 'Breite [m]', font_size=24))
        grid_mod1.add_widget(breite_fenster_mod)
        self.anfangswert_breite_mod = Label(text = '1.20', font_size=24)
        grid_mod1.add_widget(self.anfangswert_breite_mod)
        breite_fenster_mod.bind(value = self.on_breite_fenster_mod)
        hoehe_fenster_mod = Slider(min = 0.4, max = 3.0, step = 0.01, value = 1.20)     #Höhe
        grid_mod1.add_widget(Label(text = 'Höhe [m]', font_size=24))
        grid_mod1.add_widget(hoehe_fenster_mod)
        self.anfangswert_hoehe_mod = Label(text = '1.20', font_size=24)
        grid_mod1.add_widget(self.anfangswert_hoehe_mod)
        hoehe_fenster_mod.bind(value = self.on_hoehe_fenster_mod)
        grid_mod1.add_widget(Label(text = 'Angrenzung', font_size=24))
        buttons_box_mod = BoxLayout (spacing=10)
        grid_mod1.add_widget(buttons_box_mod)
        buttons_box_mod.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung_mod))
        buttons_box_mod.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung_mod))
        buttons_box_mod.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung_mod))
        self.angrenzungs_anzeige_mod = Label(text = 'außen', font_size=24)
        grid_mod1.add_widget(self.angrenzungs_anzeige_mod)
        tangrenzung_fenster_mod = Slider(min = -15.0, max = 26.0, step = 0.1, value = 20.0)     #Benachbarte temperatur
        grid_mod1.add_widget(Label(text = 'angrenzende Temperatur [°C]', font_size=24))
        grid_mod1.add_widget(tangrenzung_fenster_mod)
        self.anfangswert_tangrenzung_mod = Label(text = '20.0', font_size=24)
        grid_mod1.add_widget(self.anfangswert_tangrenzung_mod)
        tangrenzung_fenster_mod.bind(value = self.on_tangrenzung_fenster_mod)  
        self.u_wert_control_mod = Slider(min = 0.05, max = 3.00, step = 0.05, value = 0.5)
        grid_mod1.add_widget(Label(text = 'U-Wert [W/m²K]', font_size=24))
        grid_mod1.add_widget(self.u_wert_control_mod)
        self.anfangswert_mod = Label(text = '0.5', font_size=24)
        grid_mod1.add_widget(self.anfangswert_mod)
        self.u_wert_control_mod.bind(value = self.on_wert_u_mod)
        btn_add = Button(text='Fenster hinzufügen', size_hint=(0.5,0.2),
            on_press=self.fenster_append)
        self.our_layouts['Fenster hinzufügen'].add_widget(btn_add)
        grid_add2 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Fenster hinzufügen'].add_widget(grid_add2)
        button_zurueck = Button(text= "zurück zu den Wänden", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_fenster= Button(text="Türen hinzufügen (Fenster sind dann abgeschlossen)", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add2.add_widget(button_zurueck); grid_add2.add_widget(button_fenster)
        grid_mod2 = GridLayout(spacing=10, cols=3, size_hint=(1.0, 0.15))#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Window'].add_widget(grid_mod2)
        grid_mod2.add_widget( Button(text="Delete", on_release=self.fenster_delete))
        grid_mod2.add_widget( Button(text="Update", on_release=self.fenster_update))
        grid_mod2.add_widget( Button(text="Cancel", on_release=self.fenster_cancel))

class Tueren(Mixed_class):
    def tueren_append(self, button): self.__tueren_append()# add a room to the stack
    def __tueren_append(self, update=False):   # update or add a room to the stack
        tueren_data = {}
        angrenzungen = {'außen': 'e', 'unbeheizt': 'u', 'beheizt': 'b'}
        for txt, txt2, imp, imp2 in self.imps:
            if update: imp = imp2
            if txt.text == 'Beschreibung': Beschreibung=imp.text
            tueren_data[txt.text] = imp.text
            tueren_data['U-Wert']= self.anfangswert.text
            tueren_data['Breite [m]']= self.anfangswert_breite.text
            tueren_data['Höhe [m]']= self.anfangswert_hoehe.text
            tueren_data['angrenzende Temperatur [°C]']= self.anfangswert_tangrenzung.text              
            tueren_data['Angrenzung'] = angrenzungen[self.angrenzungs_anzeige.text]
            imp.text = ''
        tueren_data['Name'] = self.current_wall + '_' + Beschreibung
        tueren_data['Raumname'] = self.current_room
        self.tuerenliste.append(tueren_data)
        if "Tür" not in self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]:
            self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Tür'] = {}
        self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Tür'][Beschreibung] = tueren_data
        for name in self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Tür']:
            self.app.fenster_eingegeben[name] = self.current_wall
        # we add a tab button and we keep it stored with us
        self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Tür'][Beschreibung]["TabButton"] = Button(text=Beschreibung,
            on_release=self.tuer_setting, size_hint_x=None, font_size=12, height=75, size_hint_y=None)
        self.L_Leiste.add_widget(self.app.eingaben['Räume'][self.current_room]['Wände'][self.current_wall]['Tür'][Beschreibung]["TabButton"]) 
    def tueren_cancel(self, button=None):
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Tür hinzufügen'])
        self.current_layout = 'Tür hinzufügen'
    def tueren_delete(self, button):  ### remove a room from the stack    
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Tür'][self.current_door]["TabButton"])
        del self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Tür'][self.current_door]["TabButton"]# remove the data set
        self.fenster_cancel()# get us to the startscreen
    def tueren_update(self, button):  ### update a wall
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Tür'][self.current_door]["TabButton"])
        tab_button = self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Tür'][self.current_door]["TabButton"]
        for txt, txt2, imp, imp2 in self.imps:
            if txt.text == 'Beschreibung':
                Beschreibung=imp2.text; break
        del self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Tür'][self.current_door]
        self.tueren_cancel()# get us to the startscreen
        self.anfangswert.text = self.anfangswert_mod.text
        self.anfangswert_breite.text = self.anfangswert_breite_mod.text
        self.anfangswert_hoehe.text = self.anfangswert_hoehe_mod.text
        self.anfangswert_tangrenzung.text = self.anfangswert_tangrenzung_mod.text
        self.angrenzungs_anzeige.text = self.angrenzungs_anzeige_mod.text
        self.__tueren_append(True)
        self.app.eingaben['Räume'][self.current_room]["Wände"][self.current_wall]['Tür'][self.current_door]["TabButton"] = tab_button
        tab_button.text = Beschreibung
    def set_wall(self, button):
        #self.__waende_append(self.current_room)
        self.L_Leiste.clear_widgets()
        self.L_Leiste.add_widget(Button(text='Tür hinzufügen', size_hint_x=None, font_size=12,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.current_wall = button.text
        tueren_liste = self.app.eingaben['Räume'][self.current_room]['Wände'][button.text].get('Tür', {})
        for tuer in tueren_liste:
            tueren_data = tueren_liste[tuer]
            self.L_Leiste.add_widget(tueren_data["TabButton"])
            for txt, txt2, imp, imp2 in self.imps:
                imp.text = ''
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Tür hinzufügen']);self.current_layout='Tür hinzufügen'
    def set_room(self, button):
        self.current_room = button.text
        self.L_REITER2.clear_widgets()
        for wall in self.app.eingaben['Räume'][self.current_room]['Wände']:
            self.L_REITER2.add_widget(Button(text=wall, on_release=self.set_wall))
    def on_wert_u(self, instance, u_wert):
        self.anfangswert.text =  str(round(u_wert, 2))
    def on_breite_tuer(self, instance, breite):
        self.anfangswert_breite.text =  str(round(breite, 2))
    def on_hoehe_tuer(self, instance, hoehe):
        self.anfangswert_hoehe.text =  str(round(hoehe, 2))
    def on_tangrenzung_tuer(self, instance, t):
        self.anfangswert_tangrenzung.text =  str(round(t, 2))
    def on_push_angrenzung(self, button):
        self.angrenzungs_anzeige.text =  button.text
    def on_wert_u_mod(self, instance, u_wert):
        self.anfangswert_mod.text =  str(round(u_wert, 2))
    def on_breite_tuer_mod(self, instance, breite_mod):
         self.anfangswert_breite_mod.text =  str(round(breite_mod, 2))
    def on_hoehe_tuer_mod(self, instance, hoehe_mod):
        self.anfangswert_hoehe_mod.text =  str(round(hoehe_mod, 2))
    def on_tangrenzung_tuer_mod(self, instance, t_mod):
        self.anfangswert_tangrenzung_mod.text =  str(round(t_mod, 2))
    def on_push_angrenzung_mod(self, button):
        self.angrenzungs_anzeige_mod.text =  button.text
    def __init__(self, *args, **kwargs):
        super(Tueren, self).__init__(*args, **kwargs)
        self.eingaben   = {} # hier heben wir die eingaben auf.
        self.tuerenliste = []
        self.current_room = self.app.defined_rooms[0]
        self.current_wall = sorted(self.app.defined_walls)[0]
        #
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_BOX= BoxLayout(spacing=2, orientation='horizontal')
        self.L_Leiste= BoxLayout(spacing=2, orientation='vertical', width = 150, size_hint_x=None)
        #
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BOX.add_widget(self.L_KOERPER)
        self.L_BOX.add_widget(self.L_Leiste)
        self.L_REITER = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_REITER2 = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_BASIS.add_widget(self.L_REITER); self.L_BASIS.add_widget(self.L_REITER2); self.L_BASIS.add_widget(self.L_BOX)
        for room in self.app.defined_rooms:
            self.L_REITER.add_widget(Button(text=room, on_release=self.set_room))
        self.current_room = self.app.defined_rooms[0]
        for wall in self.app.eingaben['Räume'][self.current_room]['Wände']:
            self.L_REITER2.add_widget(Button(text=wall, on_release=self.set_wall))
        self.L_Leiste.add_widget(Button(text='Tür hinzufügen', size_hint_x=None, font_size=12, height=75, size_hint_y=None,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.our_layouts['Tür hinzufügen'] = BoxLayout(spacing=10, orientation='vertical')
        self.our_layouts['Modify Door'] = BoxLayout(spacing=10, orientation='vertical')
        # gleich aufsetzen:
        self.L_KOERPER.add_widget(self.our_layouts['Tür hinzufügen']);self.current_layout='Tür hinzufügen'
        head_mod = BoxLayout(orientation='horizontal', height=15, size_hint_y=None)
        self.our_layouts['Modify Door'].add_widget( head_mod)
        head_mod.add_widget(Label(text="Angepasst wird"))
        head_mod.add_widget(Label(text="Dummy-Raum"))
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Tür hinzufügen'].add_widget(grid_titel)
        titel = Label(text='Türen', font_size=30)
        grid_titel.add_widget(titel)
        
        lst = ["Beschreibung"] 
        lst2 = ["Text"]
        grid_add = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.2])
        self.our_layouts['Tür hinzufügen'].add_widget(grid_add)
        grid_mod = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.2])#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Door'].add_widget(grid_mod)
        #
        self.imps = []       
        ### Add labels and input-fields
        i = 0
        for txt in lst:
            txt, txt2 = Label(text=txt, font_size=24), Label(text=txt, font_size=24)
            inp, inp2 = TextInput(hint_text=lst2[i]), TextInput(hint_text=lst2[i])
            self.imps.append( (txt, txt2, inp, inp2) )
            grid_add.add_widget(txt); grid_mod.add_widget(txt2) # Titles
            grid_add.add_widget(inp); grid_mod.add_widget(inp2) # Inputs
            i = i +1

        grid_add1 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.6])
        self.our_layouts['Tür hinzufügen'].add_widget(grid_add1)
        breite_tuer = Slider(min = 0.1, max = 4.0, step = 0.1, value = 1.0)     #Breite
        grid_add1.add_widget(Label(text = 'Breite [m]', font_size=24))
        grid_add1.add_widget(breite_tuer)
        self.anfangswert_breite = Label(text = '1.0', font_size=24)
        grid_add1.add_widget(self.anfangswert_breite)
        breite_tuer.bind(value = self.on_breite_tuer)
        hoehe_tuer = Slider(min = 0.1, max = 4.0, step = 0.1, value = 2.0)     #Höhe
        grid_add1.add_widget(Label(text = 'Höhe [m]', font_size=24))
        grid_add1.add_widget(hoehe_tuer)
        self.anfangswert_hoehe = Label(text = '2.0', font_size=24)
        grid_add1.add_widget(self.anfangswert_hoehe)
        hoehe_tuer.bind(value = self.on_hoehe_tuer)       
        grid_add1.add_widget(Label(text = 'Angrenzung', font_size=24))
        buttons_box = BoxLayout (spacing=10)
        grid_add1.add_widget(buttons_box)
        buttons_box.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung))
        buttons_box.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung))
        buttons_box.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung))
        self.angrenzungs_anzeige = Label(text = 'außen', font_size=24)
        grid_add1.add_widget(self.angrenzungs_anzeige)
        tangrenzung_tuer = Slider(min = -15.0, max = 26.0, step = 0.1, value = 20.0)     #Benachbarte temperatur
        grid_add1.add_widget(Label(text = 'angrenzende Temperatur [°C]', font_size=24))
        grid_add1.add_widget(tangrenzung_tuer)
        self.anfangswert_tangrenzung = Label(text = '20.0', font_size=24)
        grid_add1.add_widget(self.anfangswert_tangrenzung)
        tangrenzung_tuer.bind(value = self.on_tangrenzung_tuer)  
        u_wert_control = Slider(min = 0.05, max = 3.00, step = 0.05, value = 0.5)
        grid_add1.add_widget(Label(text = 'U-Wert [W/m²K]', font_size=24))
        grid_add1.add_widget(u_wert_control)
        self.anfangswert = Label(text = '0.5', font_size=24)
        grid_add1.add_widget(self.anfangswert)
        u_wert_control.bind(value = self.on_wert_u)
        
        grid_mod1 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.6])
        self.our_layouts['Modify Door'].add_widget(grid_mod1)
        breite_tuer_mod = Slider(min = 0.1, max = 4.0, step = 0.1, value = 1.0)     #Breite
        grid_mod1.add_widget(Label(text = 'Breite [m]', font_size=24))
        grid_mod1.add_widget(breite_tuer_mod)
        self.anfangswert_breite_mod = Label(text = '1.0', font_size=24)
        grid_mod1.add_widget(self.anfangswert_breite_mod)
        breite_tuer_mod.bind(value = self.on_breite_tuer_mod)
        hoehe_tuer_mod = Slider(min = 0.1, max = 4.0, step = 0.1, value = 2.0)     #Höhe
        grid_mod1.add_widget(Label(text = 'Höhe [m]', font_size=24))
        grid_mod1.add_widget(hoehe_tuer_mod)
        self.anfangswert_hoehe_mod = Label(text = '2.0', font_size=24)
        grid_mod1.add_widget(self.anfangswert_hoehe_mod)
        hoehe_tuer_mod.bind(value = self.on_hoehe_tuer_mod)
        grid_mod1.add_widget(Label(text = 'Angrenzung', font_size=24))
        buttons_box_mod = BoxLayout (spacing=10)
        grid_mod1.add_widget(buttons_box_mod)
        buttons_box_mod.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung_mod))
        buttons_box_mod.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung_mod))
        buttons_box_mod.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung_mod))
        self.angrenzungs_anzeige_mod = Label(text = 'außen', font_size=24)
        grid_mod1.add_widget(self.angrenzungs_anzeige_mod)
        tangrenzung_tuer_mod = Slider(min = -15.0, max = 26.0, step = 0.1, value = 20.0)     #Benachbarte temperatur
        grid_mod1.add_widget(Label(text = 'angrenzende Temperatur [°C]', font_size=24))
        grid_mod1.add_widget(tangrenzung_tuer_mod)
        self.anfangswert_tangrenzung_mod = Label(text = '20.0', font_size=24)
        grid_mod1.add_widget(self.anfangswert_tangrenzung_mod)
        tangrenzung_tuer_mod.bind(value = self.on_tangrenzung_tuer_mod)  
        self.u_wert_control_mod = Slider(min = 0.05, max = 3.00, step = 0.05, value = 0.5)
        grid_mod1.add_widget(Label(text = 'U-Wert [W/m²K]', font_size=24))
        grid_mod1.add_widget(self.u_wert_control_mod)
        self.anfangswert_mod = Label(text = '0.5', font_size=24)
        grid_mod1.add_widget(self.anfangswert_mod)
        self.u_wert_control_mod.bind(value = self.on_wert_u_mod)
        
        btn_add = Button(text='Tür hinzufügen', size_hint=(0.5,0.2),
            on_press=self.tueren_append)
        self.our_layouts['Tür hinzufügen'].add_widget(btn_add)
        grid_add2 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Tür hinzufügen'].add_widget(grid_add2)
        button_zurueck = Button(text= "zurück zu den Fenstern", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_tuer= Button(text="Böden und Decken hinzufügen (Türen sind dann abgeschlossen)", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add2.add_widget(button_zurueck); grid_add2.add_widget(button_tuer)
        grid_mod2 = GridLayout(spacing=10, cols=3, size_hint=(1.0, 0.15))#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Door'].add_widget(grid_mod2)
        grid_mod2.add_widget( Button(text="Delete", on_release=self.tueren_delete))
        grid_mod2.add_widget( Button(text="Update", on_release=self.tueren_update))
        grid_mod2.add_widget( Button(text="Cancel", on_release=self.tueren_cancel))

class Decke_Boden(Mixed_class):
    def decke_boden_append(self, button): self.__decke_boden_append()# add a room to the stack
    def __decke_boden_append(self, update=False):   # update or add a room to the stack
        decke_data = {}
        angrenzungen = {'außen': 'e', 'unbeheizt': 'u', 'Erdreich': 'g', 'beheizt': 'b'}
        for txt, txt2, imp, imp2, imp3, imp4 in self.imps:
            if update: imp = imp2
            if txt.text == 'Beschreibung': Beschreibung= imp.text
            decke_data[txt.text]= imp.text
            decke_data['Fläche [m²]'] = self.anfangswert_flaeche_d.text
            decke_data['U-Wert']= self.anfangswert_d.text
            decke_data['Dicke [cm]'] = self.anfangswert_dicke_d.text
            decke_data['angrenzende Temperatur [°C]'] = self.anfangswert_tangrenzung_d.text            
            decke_data['Angrenzung'] = angrenzungen[self.angrenzungs_anzeige_d.text]
            imp.text = ''
        decke_data['Name'] = self.current_room + '-' + Beschreibung    
        decke_data['Raumname'] = self.current_room
        self.deckenliste.append(decke_data)
        if "Decke" not in self.app.eingaben['Räume'][self.current_room]:
            self.app.eingaben['Räume'][self.current_room]["Decke"] = {}
        self.app.eingaben['Räume'][self.current_room]["Decke"][Beschreibung] = decke_data
        for name in self.app.eingaben['Räume'][self.current_room]['Decke']:
            self.app.decke_eingegeben[name] = self.current_room
        boden_data = {}
        for txt, txt2, imp, imp2, imp3, imp4 in self.imps:
            if update: imp3 = imp4
            if txt.text == 'Beschreibung': Beschreibung2= imp3.text
            boden_data[txt.text]= imp3.text
            boden_data['Fläche [m²]'] = self.anfangswert_flaeche_b.text
            boden_data['U-Wert']= self.anfangswert_b.text
            boden_data['Dicke [cm]'] = self.anfangswert_dicke_b.text
            boden_data['angrenzende Temperatur [°C]'] = self.anfangswert_tangrenzung_b.text  
            boden_data['Angrenzung'] = angrenzungen[self.angrenzungs_anzeige_b.text]
            imp3.text = ''
        boden_data['Name'] = self.current_room + '-' + Beschreibung2    
        boden_data['Raumname'] = self.current_room
        self.bodenliste.append(decke_data)
        if "Boden" not in self.app.eingaben['Räume'][self.current_room]:
            self.app.eingaben['Räume'][self.current_room]["Boden"] = {}
        self.app.eingaben['Räume'][self.current_room]["Boden"][Beschreibung] = boden_data
        for name in self.app.eingaben['Räume'][self.current_room]['Boden']:
            self.app.boden_eingegeben[name] = self.current_room
        # we add a tab button and we keep it stored with us
        self.app.eingaben['Räume'][self.current_room]['Decke'][Beschreibung]["TabButton"] = Button(text=Beschreibung,
            on_release=self.decke_boden_setting, size_hint_x=None, font_size=12, height=75, size_hint_y=None)
        self.L_Leiste.add_widget(self.app.eingaben['Räume'][self.current_room]['Decke'][Beschreibung]["TabButton"])
    def decke_boden_cancel(self, button=None):
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Decke und Boden hinzufügen'])
        self.current_layout = 'Decke und Boden hinzufügen'
        #for txt, txt2, imp, imp2 in self.imps: imp.text = ""
    def decke_boden_delete(self, button):  ### remove a room from the stack    
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room]["Decke"][self.current_decke]["TabButton"])
        del self.app.eingaben['Räume'][self.current_room]["Decke"][self.current_decke]["TabButton"]# remove the data set
        del self.app.eingaben['Räume'][self.current_room]["Boden"][self.current_boden]["TabButton"]# remove the data set
        self.decke_boden_cancel()# get us to the startscreen 
    def decke_boden_update(self, button):  ### update a wall
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Räume'][self.current_room]["Decke"][self.current_decke]["TabButton"])
        tab_button = self.app.eingaben['Räume'][self.current_room]["Decke"][self.current_decke]["TabButton"]
        for txt, txt2, imp, imp2, imp3, imp4 in self.imps:
            if txt.text == 'Beschreibung':
                Beschreibung=imp2.text; break   
        del self.app.eingaben['Räume'][self.current_room]["Decke"][self.current_decke]
        del self.app.eingaben['Räume'][self.current_room]["Boden"][self.current_boden]
        self.decke_boden_cancel()# get us to the startscreen
        self.anfangswert_d.text = self.anfangswert_mod_d.text
        self.anfangswert_dicke_d.text = self.anfangswert_dicke_d_mod.text
        self.anfangswert_flaeche_d.text = self.anfangswert_flaeche_d_mod.text
        self.anfangswert_tangrenzung_d.text = self.anfangswert_tangrenzung_d_mod.text
        self.angrenzungs_anzeige_d.text = self.angrenzungs_anzeige_mod_d.text
        self.anfangswert_b.text = self.anfangswert_mod_b.text
        self.anfangswert_dicke_b.text = self.anfangswert_dicke_b_mod.text
        self.anfangswert_flaeche_b.text = self.anfangswert_flaeche_b_mod.text
        self.anfangswert_tangrenzung_b.text = self.anfangswert_tangrenzung_b_mod.text
        self.angrenzungs_anzeige_b.text = self.angrenzungs_anzeige_mod_b.text
        self.__decke_boden_append(True)
        self.app.eingaben['Räume'][self.current_room]["Decke"][self.current_decke]["TabButton"] = tab_button
        tab_button.text = Beschreibung
#        self.L_REITER.add_widget(self.eingaben['Räume'][room_name]["TabButton"])
    def set_room(self, button):
        #self.__waende_append(self.current_room)
        self.L_Leiste.clear_widgets()
        self.L_Leiste.add_widget(Button(text='Decke und Boden hinzufügen', size_hint_x=None, font_size=12,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.current_room = button.text
        decken = self.app.eingaben['Räume'][button.text].get('Decke', {})
        for decke in decken:
            decke_data = decken[decke]
            self.L_Leiste.add_widget(decke_data["TabButton"])
            for txt, txt2, imp, imp2, imp3, imp4 in self.imps:
                imp.text = ''
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Decke und Boden hinzufügen']);self.current_layout='Decke und Boden hinzufügen'  
    def on_wert_u(self, instance, u_wert):
        self.anfangswert_d.text =  str(round(u_wert, 2))
    def on_dicke_d(self, instance, dicke):
        self.anfangswert_dicke_d.text =  str(round(dicke, 2))
    def on_flaeche_d(self, instance, flaeche):
        self.anfangswert_flaeche_d.text =  str(round(flaeche, 2))        
    def on_tangrenzung_d(self, instance, t):
        self.anfangswert_tangrenzung_d.text =  str(round(t, 2))
    def on_push_angrenzung(self, button):
        self.angrenzungs_anzeige_d.text =  button.text
    def on_wert_u_mod(self, instance, u_wert):
        self.anfangswert_mod_d.text =  str(round(u_wert, 2))
    def on_dicke_d_mod(self, instance, dicke_mod):
        self.anfangswert_dicke_d_mod.text =  str(round(dicke_mod, 2))
    def on_flaeche_d_mod(self, instance, flaeche_mod):
        self.anfangswert_flaeche_d_mod.text =  str(round(flaeche_mod, 2))
    def on_tangrenzung_d_mod(self, instance, t_mod):
        self.anfangswert_tangrenzung_d_mod.text =  str(round(t_mod, 2))
    def on_push_angrenzung_mod(self, button):
        self.angrenzungs_anzeige_mod_d.text =  button.text
    def on_wert_u_b(self, instance, u_wert):
        self.anfangswert_b.text =  str(round(u_wert, 2))
    def on_dicke_b(self, instance, dicke):
        self.anfangswert_dicke_b.text =  str(round(dicke, 2))
    def on_flaeche_b(self, instance, flaeche):
        self.anfangswert_flaeche_b.text =  str(round(flaeche, 2))
    def on_tangrenzung_b(self, instance, t):
        self.anfangswert_tangrenzung_b.text =  str(round(t, 2))
    def on_push_angrenzung_b(self, button):
        self.angrenzungs_anzeige_b.text =  button.text
    def on_wert_u_mod_b(self, instance, u_wert):
        self.anfangswert_mod_b.text =  str(round(u_wert, 2))
    def on_dicke_b_mod(self, instance, dicke_mod):
        self.anfangswert_dicke_b_mod.text =  str(round(dicke_mod, 2))
    def on_flaeche_b_mod(self, instance, flaeche_mod):
        self.anfangswert_flaeche_b_mod.text =  str(round(flaeche_mod, 2))
    def on_tangrenzung_b_mod(self, instance, t_mod):
        self.anfangswert_tangrenzung_b_mod.text =  str(round(t_mod, 2))
    def on_push_angrenzung_mod_b(self, button):
        self.angrenzungs_anzeige_mod_b.text =  button.text
    def __init__(self, *args, **kwargs):
        super(Decke_Boden, self).__init__(*args, **kwargs)
        self.eingaben   = {} # hier heben wir die eingaben auf.
        self.deckenliste = []
        self.bodenliste = []
        self.current_room = self.app.defined_rooms[0]
        #
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_BOX= BoxLayout(spacing=2, orientation='horizontal')
        self.L_Leiste= BoxLayout(spacing=2, orientation='vertical', width = 150, size_hint_x=None)
        #
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BOX.add_widget(self.L_KOERPER)
        self.L_BOX.add_widget(self.L_Leiste)
        self.L_REITER = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_BASIS.add_widget(self.L_REITER); self.L_BASIS.add_widget(self.L_BOX)
        ## Immer der erste Reiter fest
        for room_name in self.app.defined_rooms:
            self.L_REITER.add_widget(Button(text=room_name, on_release=self.set_room))
        self.L_Leiste.add_widget(Button(text='Decke und Boden hinzufügen', size_hint_x=None, font_size=12, height=75, size_hint_y=None,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.our_layouts['Decke und Boden hinzufügen'] = BoxLayout(spacing=10, orientation='vertical')
        self.our_layouts['Modify Decke und Boden'] = BoxLayout(spacing=10, orientation='vertical')
        # gleich aufsetzen:
        self.L_KOERPER.add_widget(self.our_layouts['Decke und Boden hinzufügen']);self.current_layout='Decke und Boden hinzufügen'
        head_mod = BoxLayout(orientation='horizontal', height=15, size_hint_y=None)
        self.our_layouts['Modify Decke und Boden'].add_widget( head_mod)
        head_mod.add_widget(Label(text="Angepasst wird"))
        head_mod.add_widget(Label(text="Dummy-Raum"))
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Decke und Boden hinzufügen'].add_widget(grid_titel)
        titel = Label(text='Decke und Boden', font_size=30)
        grid_titel.add_widget(titel)

        lst = ["Beschreibung"]
        lst2 = ["Text"]
        #outline_width=2, outline_color=[0.2]*4, # Glow/Schatten # Label
        grid_add = GridLayout(spacing=10, cols=3, size_hint=[1.0, 0.2])
        self.our_layouts['Decke und Boden hinzufügen'].add_widget(grid_add)
        grid_mod = GridLayout(spacing=10, cols=3, size_hint=[1.0, 0.2])#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Decke und Boden'].add_widget(grid_mod)
        #   
        self.imps = []
        ### Add labels and input-fields   
        i = 0
        for txt in lst:
            txt, txt2 = Label(text=txt, font_size=20), Label(text=txt, font_size=20)
            inp, inp2, inp3, inp4 = TextInput(hint_text=lst2[i]), TextInput(hint_text=lst2[i]), TextInput(hint_text=lst2[i]), TextInput(hint_text=lst2[i])
            self.imps.append( (txt, txt2, inp, inp2, inp3, inp4) )
            grid_add.add_widget(txt); grid_mod.add_widget(txt2) # Titles
            grid_add.add_widget(inp); grid_mod.add_widget(inp2) # Inputs
            grid_add.add_widget(inp3); grid_mod.add_widget(inp4) # Inputs
            i = i +1
            
        grid_add2 = GridLayout(spacing=5, cols=5)
        self.our_layouts['Decke und Boden hinzufügen'].add_widget(grid_add2)
        
        grid_add2.add_widget(Label(text = 'Angrenzung', font_size=24))
        buttons_box_d = BoxLayout (orientation = 'vertical')
        grid_add2.add_widget(buttons_box_d)
        buttons_box_d.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung))
        buttons_box_d.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung))
        buttons_box_d.add_widget(Button(text= 'Erdreich', on_release = self.on_push_angrenzung))
        buttons_box_d.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung))
        self.angrenzungs_anzeige_d = Label(text = 'außen', font_size=24)
        grid_add2.add_widget(self.angrenzungs_anzeige_d)
        
        buttons_box_b = BoxLayout (orientation = 'vertical')
        grid_add2.add_widget(buttons_box_b)
        buttons_box_b.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung_b))
        buttons_box_b.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung_b))
        buttons_box_b.add_widget(Button(text= 'Erdreich', on_release = self.on_push_angrenzung_b))
        buttons_box_b.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung_b))
        self.angrenzungs_anzeige_b = Label(text = 'außen', font_size=24)
        grid_add2.add_widget(self.angrenzungs_anzeige_b)
        
        u_wert_control_d = Slider(min = 0.05, max = 2.50, step = 0.05, value = 0.5)
        grid_add2.add_widget(Label(text = 'U-Wert [W/m²K]', font_size=24))
        grid_add2.add_widget(u_wert_control_d)
        self.anfangswert_d = Label(text = '0.5', font_size=24)
        grid_add2.add_widget(self.anfangswert_d)
        u_wert_control_d.bind(value = self.on_wert_u)
        u_wert_control_b = Slider(min = 0.05, max = 2.50, step = 0.05, value = 0.5)
        grid_add2.add_widget(u_wert_control_b)
        self.anfangswert_b = Label(text = '0.5', font_size=24)
        grid_add2.add_widget(self.anfangswert_b)
        u_wert_control_b.bind(value = self.on_wert_u_b)
        
        tangrenzung_d = Slider(min = -12.0, max = 24.0, step = 0.1, value = 20.0)    #Benachbarte Temperatur
        grid_add2.add_widget(Label(text = 'angrenzende Temperatur [°C]', font_size=24))
        grid_add2.add_widget(tangrenzung_d)
        self.anfangswert_tangrenzung_d = Label(text = '20.0', font_size=24)
        grid_add2.add_widget(self.anfangswert_tangrenzung_d)
        tangrenzung_d.bind(value = self.on_tangrenzung_d)
        tangrenzung_b = Slider(min = -12.0, max = 24.0, step = 0.1, value = 20.0)
        grid_add2.add_widget(tangrenzung_b)
        self.anfangswert_tangrenzung_b = Label(text = '20.0', font_size=24)
        grid_add2.add_widget(self.anfangswert_tangrenzung_b)
        tangrenzung_b.bind(value = self.on_tangrenzung_b)
        
        dicke_d = Slider(min = 1.0, max = 50.0, step = 1.0, value = 30.0)
        grid_add2.add_widget(Label(text = 'Dicke [cm]', font_size=24))
        grid_add2.add_widget(dicke_d)
        self.anfangswert_dicke_d = Label(text = '30.0', font_size=24)
        grid_add2.add_widget(self.anfangswert_dicke_d)
        dicke_d.bind(value = self.on_dicke_d)
        dicke_b = Slider(min = 1.0, max = 50.0, step = 1.0, value = 30.0)
        grid_add2.add_widget(dicke_b)
        self.anfangswert_dicke_b = Label(text = '30.0', font_size=24)
        grid_add2.add_widget(self.anfangswert_dicke_b)
        dicke_b.bind(value = self.on_dicke_b)
        
        flaeche_d = Slider(min = 6.0, max = 35.0, step = 0.1, value = 15.0)
        grid_add2.add_widget(Label(text = 'Fläche [m²]', font_size=24))
        grid_add2.add_widget(flaeche_d)
        self.anfangswert_flaeche_d = Label(text = '15.0', font_size=24)
        grid_add2.add_widget(self.anfangswert_flaeche_d)
        flaeche_d.bind(value = self.on_flaeche_d)
        flaeche_b = Slider(min = 6.0, max = 35.0, step = 0.1, value = 15.0)
        grid_add2.add_widget(flaeche_b)
        self.anfangswert_flaeche_b = Label(text = '15.0', font_size=24)
        grid_add2.add_widget(self.anfangswert_flaeche_b)
        flaeche_b.bind(value = self.on_flaeche_b)
        
        grid_mod2 = GridLayout(spacing=10, cols=5)
        self.our_layouts['Modify Decke und Boden'].add_widget(grid_mod2)        
        grid_mod2.add_widget(Label(text = 'Angrenzung', font_size=24))
        
        buttons_box_mod_d = BoxLayout (orientation = 'vertical')
        grid_mod2.add_widget(buttons_box_mod_d)
        buttons_box_mod_d.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung_mod))
        buttons_box_mod_d.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung_mod))
        buttons_box_mod_d.add_widget(Button(text= 'Erdreich', on_release = self.on_push_angrenzung_mod))
        buttons_box_mod_d.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung_mod))
        self.angrenzungs_anzeige_mod_d = Label(text = 'außen', font_size=24)
        grid_mod2.add_widget(self.angrenzungs_anzeige_mod_d)
        
        buttons_box_mod_b = BoxLayout (orientation = 'vertical')
        grid_mod2.add_widget(buttons_box_mod_b)
        buttons_box_mod_b.add_widget(Button(text= 'außen', on_release = self.on_push_angrenzung_mod_b))
        buttons_box_mod_b.add_widget(Button(text= 'unbeheizt', on_release = self.on_push_angrenzung_mod_b))
        buttons_box_mod_b.add_widget(Button(text= 'Erdreich', on_release = self.on_push_angrenzung_mod_b))
        buttons_box_mod_b.add_widget(Button(text= 'beheizt', on_release = self.on_push_angrenzung_mod_b))
        self.angrenzungs_anzeige_mod_b = Label(text = 'außen', font_size=24)
        grid_mod2.add_widget(self.angrenzungs_anzeige_mod_b)
        
        self.u_wert_control_mod_d = Slider(min = 0.05, max = 2.50, step = 0.05, value = 0.5)
        grid_mod2.add_widget(Label(text = 'U-Wert [W/m²K]', font_size=24))
        grid_mod2.add_widget(self.u_wert_control_mod_d)
        self.anfangswert_mod_d = Label(text = '0.5', font_size=24)
        grid_mod2.add_widget(self.anfangswert_mod_d)
        self.u_wert_control_mod_d.bind(value = self.on_wert_u_mod)
        
        self.u_wert_control_mod_b = Slider(min = 0.05, max = 2.50, step = 0.05, value = 0.5)
        grid_mod2.add_widget(self.u_wert_control_mod_b)
        self.anfangswert_mod_b = Label(text = '0.5', font_size=24)
        grid_mod2.add_widget(self.anfangswert_mod_b)
        self.u_wert_control_mod_b.bind(value = self.on_wert_u_mod_b)
        
        tangrenzung_d_mod = Slider(min = -12.0, max = 24.0, step = 0.1, value = 20.0)    #Benachbarte Temperatur
        grid_mod2.add_widget(Label(text = 'angrenzende Temperatur [°C]', font_size=24))
        grid_mod2.add_widget(tangrenzung_d_mod)
        self.anfangswert_tangrenzung_d_mod = Label(text = '20.0', font_size=24)
        grid_mod2.add_widget(self.anfangswert_tangrenzung_d_mod)
        tangrenzung_d_mod.bind(value = self.on_tangrenzung_d_mod)
        tangrenzung_b_mod = Slider(min = -12.0, max = 24.0, step = 0.1, value = 20.0)
        grid_mod2.add_widget(tangrenzung_b_mod)
        self.anfangswert_tangrenzung_b_mod = Label(text = '20.0', font_size=24)
        grid_mod2.add_widget(self.anfangswert_tangrenzung_b_mod)
        tangrenzung_b_mod.bind(value = self.on_tangrenzung_b_mod)
        
        dicke_d_mod = Slider(min = 1.0, max = 50.0, step = 1.0, value = 30.0)
        grid_mod2.add_widget(Label(text = 'Dicke [cm]', font_size=24))
        grid_mod2.add_widget(dicke_d_mod)
        self.anfangswert_dicke_d_mod = Label(text = '30.0', font_size=24)
        grid_mod2.add_widget(self.anfangswert_dicke_d_mod)
        dicke_d_mod.bind(value = self.on_dicke_d)
        dicke_b_mod = Slider(min = 1.0, max = 50.0, step = 1.0, value = 30.0)
        grid_mod2.add_widget(dicke_b_mod)
        self.anfangswert_dicke_b_mod = Label(text = '30.0', font_size=24)
        grid_mod2.add_widget(self.anfangswert_dicke_b_mod)
        dicke_b_mod.bind(value = self.on_dicke_b_mod)
        
        flaeche_d_mod = Slider(min = 6.0, max = 35.0, step = 0.1, value = 15.0)
        grid_mod2.add_widget(Label(text = 'Fläche [m²]', font_size=24))
        grid_mod2.add_widget(flaeche_d_mod)
        self.anfangswert_flaeche_d_mod = Label(text = '15.0', font_size=24)
        grid_mod2.add_widget(self.anfangswert_flaeche_d_mod)
        flaeche_d_mod.bind(value = self.on_flaeche_d)
        flaeche_b_mod = Slider(min = 6.0, max = 35.0, step = 0.1, value = 15.0)
        grid_mod2.add_widget(flaeche_b_mod)
        self.anfangswert_flaeche_b_mod = Label(text = '15.0', font_size=24)
        grid_mod2.add_widget(self.anfangswert_flaeche_b_mod)
        flaeche_b_mod.bind(value = self.on_flaeche_b_mod)
        
        btn_add = Button(text='Decke und Boden hinzufügen', size_hint=(0.5,0.2),
            on_press=self.decke_boden_append)
        self.our_layouts['Decke und Boden hinzufügen'].add_widget(btn_add)
        grid_add3 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Decke und Boden hinzufügen'].add_widget(grid_add3)
        button_zurueck = Button(text= "zurück zu den Türen", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_decke= Button(text="Berechnung durchführen (Decken und Böden sind dann abgeschlossen)", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add3.add_widget(button_zurueck); grid_add3.add_widget(button_decke)
        grid_mod3 = GridLayout(spacing=10, cols=3, size_hint=(1.0, 0.15))#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Decke und Boden'].add_widget(grid_mod3)
        grid_mod3.add_widget( Button(text="Delete", on_release=self.decke_boden_delete))
        grid_mod3.add_widget( Button(text="Update", on_release=self.decke_boden_update))
        grid_mod3.add_widget( Button(text="Cancel", on_release=self.decke_boden_cancel))
        
class Ergebnisse_Heizlast(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Ergebnisse_Heizlast, self).__init__(*args, **kwargs)
        self.rooms = ifc_file.by_type("IfcSpace")
        self.our_layouts['Ergebnisse'] = BoxLayout(spacing=10, orientation='vertical')
        # gleich aufsetzen:
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Ergebnisse']);self.current_layout='Ergebnisse'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Ergebnisse'].add_widget(grid_titel)
        titel = Label(text='Ergebnisse', font_size=30)
        grid_titel.add_widget(titel)
        #outline_width=2, outline_color=[0.2]*4, # Glow/Schatten # Label
        grid_add = GridLayout(spacing=10, cols=4)
        self.our_layouts['Ergebnisse'].add_widget(grid_add)
        #
        self.imps1 = []
        ### Add labels and input-fields
        text0 = Label(text="")
        text1 = Label(text="Lftwärme [W]", font_size=20)
        text2 = Label(text="Transwärme [W]", font_size=20)
        text3 = Label(text="Gesamt [W]", font_size=20)
        grid_add.add_widget(text0); grid_add.add_widget(text1); grid_add.add_widget(text2); grid_add.add_widget(text3);# Titles
        for room in self.rooms:
            beschreibung = Label (text=str(room.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue))
            lft    = Label (text=str(int(round(room.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue, 0))), color= (0.8,0.1,0,1))
            trans  = Label (text=str(int(round(room.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue, 0))), color= (0.8,0.1,0,1))
            ges_ergebnis = round(float(lft.text)+float(trans.text),0)
            ges    = Label (text=str(int(ges_ergebnis)), color= (0.8,0.1,0,1))
            grid_add.add_widget(beschreibung); grid_add.add_widget(lft); grid_add.add_widget(trans); grid_add.add_widget(ges);

        button_waende= Button(text="Fertige Heizlastberechnung", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add.add_widget(button_waende)

#Trinkwarmwasser - Speicher und Lastberechnung
class Trinkwarmwasser1(Mixed_class): 
    def __init__(self, *args, **kwargs):
        super(Trinkwarmwasser1, self).__init__(*args, **kwargs)
        self.our_layouts['Trinkwarmwasser1'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Trinkwarmwasser1']);self.current_layout='Trinkwarmwasser1'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Trinkwarmwasser1'].add_widget(grid_titel)
        titel = Label(text="Trinkwarmwasserlast auf Basis DIN EN 15450", font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(cols=1)
        self.our_layouts['Trinkwarmwasser1'].add_widget(grid_add)
        button_start1  = Button(text="Warmwasserlastberechnung für eine neue Anlage", font_size=24, on_release=self.switch_layout)
        button_start2  = Button(text="Warmwasserlastberechnung bei Verwendung eines vorhandenen TWW-Speichers", font_size=24, on_release=self.switch_layout)
        button_zurueck  = Button(text= "zurück zum Menü der Datenerfassung", font_size=20, background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_start1); grid_add.add_widget(button_start2); grid_add.add_widget(button_zurueck)

#Trinkwarmwasser - Neue Anlage > Frischwasserstation
class Trinkwarmwasser_neu(Mixed_class):
    def personen_a(self, instance, a_personen):
        self.personenanzahl.text =  str(a_personen)
    def warmwasser_t(self, instance, a_ww):
        self.ww_t.text =  str(a_ww)
    def __init__(self, *args, **kwargs):
        super(Trinkwarmwasser_neu, self).__init__(*args, **kwargs)
        self.app.eingaben['Trinkwarmwasser_neu'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Trinkwarmwasser_neu'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_KOERPER.add_widget(self.our_layouts['Trinkwarmwasser_neu']);self.current_layout='Trinkwarmwasser_neu'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Trinkwarmwasser_neu'].add_widget(grid_titel)
        titel = Label(text='Trinkwarmwasser auf Basis DIN EN 15450', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['Trinkwarmwasser_neu'].add_widget(grid_add)
        grid_add.add_widget(Label(text = 'Anzahl der Personen im Haushalt', font_size=24))
        box_personen = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_personen)
        a_personen = Slider(min = 1, max = 15, step = 1, value = 1)
        box_personen.add_widget(a_personen)
        self.personenanzahl = Label(text = '1', font_size=24)
        box_personen.add_widget(self.personenanzahl)
        a_personen.bind(value = self.personen_a)
        grid_add.add_widget(Label(text = 'Warmwassertemperatur [°C]', font_size=24))
        box_ww = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_ww)
        a_ww = Slider(min = 35, max = 65, step = 1, value = 50)
        box_ww.add_widget(a_ww)
        self.ww_t = Label(text = '50', font_size=24)
        box_ww.add_widget(self.ww_t)
        a_ww.bind(value = self.warmwasser_t)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Trinkwarmwasser_neu'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zum Anfang", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_weiter= Button(text="Wärmeleistungsberechnung", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_weiter)

class Trinkwarmwasser_neu_Ergebnisse(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Trinkwarmwasser_neu_Ergebnisse, self).__init__(*args, **kwargs)
        ifc_file = ifcopenshell.open('Heizlast_TWW.ifc')
        self.building = ifc_file.by_type("IfcBuilding")[0]
        self.our_layouts['Trinkwarmwasser_neu_Ergebnisse'] = BoxLayout(spacing=10, orientation='vertical')
        # gleich aufsetzen:
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Trinkwarmwasser_neu_Ergebnisse']);self.current_layout='Trinkwarmwasser_neu_Ergebnisse'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Trinkwarmwasser_neu_Ergebnisse'].add_widget(grid_titel)
        titel = Label(text='Trinkwarmwasser Ergebnisse', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(spacing=10, cols=1)
        self.our_layouts['Trinkwarmwasser_neu_Ergebnisse'].add_widget(grid_add)
        #
        self.imps1 = []
        ### Add labels and input-fields
        text1 = Label(text="Zusätzlich notwendige Heizlast [kW]", font_size=24)
        grid_add.add_widget(text1)
        heizlast     = Label (text=str(round((self.building.IsDefinedBy[1].RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue),2)), color= (0.8,0.1,0,1), font_size = 24)
        grid_add.add_widget(heizlast)

        button_waende= Button(text="Fertige Trinkwarmwasserberechnung", background_color= (0.1,0.8,0.1),
                                font_size=16, size_hint=(0.5,0.2), on_release=self.switch_layout)
        grid_add.add_widget(button_waende)

#Trinkwarmwasser > TWW-Speicher schon vorhandene > Sanierung
class Trinkwarmwasser2(Mixed_class):
    def personen_a(self, instance, a_personen):
        self.personenanzahl.text =  str(a_personen)
    def warmwasser_t(self, instance, a_ww):
        self.ww_t.text =  str(a_ww)
    def __init__(self, *args, **kwargs):
        super(Trinkwarmwasser2, self).__init__(*args, **kwargs)
        self.app.eingaben['Trinkwarmwasser'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Trinkwarmwasser'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Trinkwarmwasser']);self.current_layout='Trinkwarmwasser'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Trinkwarmwasser'].add_widget(grid_titel)
        titel = Label(text='Trinkwarmwasser auf Basis DIN EN 15450', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['Trinkwarmwasser'].add_widget(grid_add)
        grid_add.add_widget(Label(text = 'Anzahl der Personen im Haushalt', font_size=24))
        box_personen = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_personen)
        a_personen = Slider(min = 1, max = 15, step = 1, value = 1)
        box_personen.add_widget(a_personen)
        self.personenanzahl = Label(text = '1', font_size=24)
        box_personen.add_widget(self.personenanzahl)
        a_personen.bind(value = self.personen_a)
        grid_add.add_widget(Label(text = "TWW_Speicher_Solltemperatur [°C]", font_size=24))
        box_ww = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_ww)
        a_ww = Slider(min = 35, max = 65, step = 1, value = 50)
        box_ww.add_widget(a_ww)
        self.ww_t = Label(text = '50', font_size=24)
        box_ww.add_widget(self.ww_t)
        a_ww.bind(value = self.warmwasser_t)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Trinkwarmwasser'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zum Anfang", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_waende= Button(text="weiter zur Wärmeleistungsberechnung", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_waende)

class Trinkwarmwasser3(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Trinkwarmwasser3, self).__init__(*args, **kwargs)
        ifc_file = ifcopenshell.open('Heizlast_TWW.ifc')
        self.building = ifc_file.by_type("IfcBuilding")[0]
        self.app.eingaben['Trinkwarmwasser'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Trinkwarmwasser'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Trinkwarmwasser']);self.current_layout='Trinkwarmwasser'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Trinkwarmwasser'].add_widget(grid_titel)
        titel = Label(text='Trinkwarmwasser auf Basis DIN EN 15450', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['Trinkwarmwasser'].add_widget(grid_add)
        label1 = Label(text='Ideale Speichergröße [liter]', font_size = 24)
        label2 = Label(text=str(round((self.building.IsDefinedBy[1].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue*1000),3)), font_size = 24)
        grid_add.add_widget(label1); grid_add.add_widget(label2)
        lst = ["Reale Speichergröße"]
        lst2 = ["Liter; ohne Angabe: ideale Speichergröße"]
        grid_add1 = GridLayout(spacing=10, cols=2)
        self.our_layouts['Trinkwarmwasser'].add_widget(grid_add1)
        self.imps = []
        ### Add labels and input-fields
        i = 0
        for txt in lst:
            txt = Label(text=txt, font_size=24)
            inp = TextInput(hint_text= lst2[i])
            self.imps.append( (txt, inp) )
            grid_add1.add_widget(txt) # Titles
            grid_add1.add_widget(inp) # Inputs
            i = i +1
        grid_add2 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Trinkwarmwasser'].add_widget(grid_add2)
        button_zurueck = Button(text= "zurück zur Speicherberechnung", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_waende= Button(text="Nötige Wärmeleistung berechnen", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add2.add_widget(button_zurueck); grid_add2.add_widget(button_waende)        
        
class Trinkwarmwasser_Ergebnisse(Mixed_class):  
    def __init__(self, *args, **kwargs):
        super(Trinkwarmwasser_Ergebnisse, self).__init__(*args, **kwargs)
        ifc_file = ifcopenshell.open('Heizlast_TWW.ifc')
        self.building = ifc_file.by_type("IfcBuilding")
        self.our_layouts['TWW_Ergebnisse'] = BoxLayout(spacing=10, orientation='vertical')
        # gleich aufsetzen:
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['TWW_Ergebnisse']);self.current_layout='TWW_Ergebnisse'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['TWW_Ergebnisse'].add_widget(grid_titel)
        titel = Label(text='TWW_Ergebnisse', font_size=30)
        grid_titel.add_widget(titel)
        #outline_width=2, outline_color=[0.2]*4, # Glow/Schatten # Label
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['TWW_Ergebnisse'].add_widget(grid_add)
        #
        self.imps1 = []
        ### Add labels and input-fields
        text1 = Label(text="Reale Speichergröße [liter]", font_size=24)
        text2 = Label(text="Zusätzlich notwendige Heizlast [kW]", font_size=24)
        grid_add.add_widget(text1); grid_add.add_widget(text2);# Titles
        for building in self.building:
            speicher     = Label (text=str(round((building.IsDefinedBy[1].RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue*1000),1)), font_size=24, color= (0.8,0.1,0,1))
            heizlast     = Label (text=str(round((building.IsDefinedBy[1].RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue),2)), font_size=24, color= (0.8,0.1,0,1))
            grid_add.add_widget(speicher); grid_add.add_widget(heizlast)

        button_waende= Button(text="Fertige Trinkwarmwasserberechnung", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add.add_widget(button_waende)

#Anlagenerfassung
class Anlagenerfassung_Heizung(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Anlagenerfassung_Heizung, self).__init__(*args, **kwargs)
        self.our_layouts['Erfassung'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Erfassung']);self.current_layout='Erfassung'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Erfassung'].add_widget(grid_add)
        button_neu = Button(text="Komplett neue Heizungsanlage", on_release=self.switch_layout)
        button_bestand = Button(text="Anlagensanierung in einem Bestandsgebäude", on_release=self.switch_layout)
        button_zurueck = Button(text= "zurück zum Menü der Datenerfassung", on_release=self.switch_layout)
        grid_add.add_widget(button_neu); grid_add.add_widget(button_bestand); grid_add.add_widget(button_zurueck)

class Neue_Heizung(Mixed_class):
    def erdsonde(self, button):
        self.angrenzungs_anzeige_erd.text =  button.text
    def grundwasser(self, button):
        self.angrenzungs_anzeige_gr.text =  button.text
    def warmwasser(self, button):
        self.angrenzungs_anzeige_ww.text =  button.text
    def on_gf(self, instance, gf):
        self.anfangswert_gf.text = str(round(gf, 1)) + ' m²'
    def __init__(self, *args, **kwargs):
        super(Neue_Heizung, self).__init__(*args, **kwargs)
        self.app.eingaben['Neue_Heizung'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Neue_Heizung'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Neue_Heizung']);self.current_layout='Neue_Heizung'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Neue_Heizung'].add_widget(grid_titel)
        titel = Label(text='Neue Heizungsanlage', font_size=30)
        grid_titel.add_widget(titel)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.52])
        self.our_layouts['Neue_Heizung'].add_widget(grid_add1)
        
        grid_add1.add_widget(Label(text = "Einsatz von Erdwärmesonden möglich?", font_size=20))
        buttons_box_erd = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_erd)
        buttons_box_erd.add_widget(Button(text= 'ja', on_release = self.erdsonde))
        buttons_box_erd.add_widget(Button(text= 'nein', on_release = self.erdsonde))
        self.angrenzungs_anzeige_erd = Label(text = 'ja')
        buttons_box_erd.add_widget(self.angrenzungs_anzeige_erd)
        
        grid_add1.add_widget(Label(text = "Zugang zu Grundwasserquellen vorhanden?", font_size=20))
        buttons_box_gr = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_gr)
        buttons_box_gr.add_widget(Button(text= 'ja', on_release = self.grundwasser))
        buttons_box_gr.add_widget(Button(text= 'nein', on_release = self.grundwasser))
        self.angrenzungs_anzeige_gr = Label(text = 'ja')
        buttons_box_gr.add_widget(self.angrenzungs_anzeige_gr)       
        
        grid_add1.add_widget(Label(text = "Soll das System auch Warmwasser erzeugen?", font_size=20))
        buttons_box_ww = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_ww)
        buttons_box_ww.add_widget(Button(text= 'ja', on_release = self.warmwasser))
        buttons_box_ww.add_widget(Button(text= 'nein', on_release = self.warmwasser))
        self.angrenzungs_anzeige_ww = Label(text = 'ja')
        buttons_box_ww.add_widget(self.angrenzungs_anzeige_ww)        
        
        grid_add2 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.18])
        self.our_layouts['Neue_Heizung'].add_widget(grid_add2)
        gf = Slider(min = 0, max = 400, step = 5, value = 0)    #Benachbarte Temperatur
        grid_add2.add_widget(Label(text = 'Vorhandene Grundstücksfläche', font_size=24))
        grid_add2.add_widget(gf)
        self.anfangswert_gf = Label(text = '0 m²', font_size=24)
        grid_add2.add_widget(self.anfangswert_gf)
        gf.bind(value = self.on_gf)
        
        grid_add3 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Neue_Heizung'].add_widget(grid_add3)
        button_zurueck = Button(text= "zurück zum Beginn der Anlagenerfassung", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_vorschlagssystem = Button(text="Vorschlagsmodell bestimmen", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add3.add_widget(button_zurueck); grid_add3.add_widget(button_vorschlagssystem)

class Vorschlagsmodell1(Mixed_class):
    #def _store(self, btn): pass
    def __init__(self, *args, **kwargs):
        super(Vorschlagsmodell1, self).__init__(*args, **kwargs)
        self.app.eingaben['Vorschlagsmodell'] = {}
        vorschlagsmodell = self.app.vorschlagsmodell
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Vorschlagsmodell'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Vorschlagsmodell']);self.current_layout='Vorschlagsmodell'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Vorschlagsmodell'].add_widget(grid_titel)
        titel = Label(text='Vorschlagsmodell', font_size=30)
        grid_titel.add_widget(titel)
        modellsystem   = ["WP mit Pufferspeicher und Frischwasserstation und FBH", "WP mit Kombispeicher und FBH", 
                          "WP ohne Pufferspeicher mit TWW-Speicher mit FBH", "WP mit FBH", "WP mit Pufferspeicher und FBH"]
        wp_technologie = ["Luft-Wasser-Wärmepumpe", "Sole-Wasser-Wärmepumpe; Erdkollektor",
                          "Sole-Wasser-Wärmepumpe; Erdsonde", "Wasser-Wasser-Wärmepumpe; Grundwasser"]
        puffer = [150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900]
        
        label1 = Label(text="Vorgeschlagenes System", font_size=18)
        label2 = Label(text=vorschlagsmodell[0], font_size = 18, color = (0.8,0.1,0,1))
        label3 = Label(text="Vorgeschlagene Technologie", font_size=18)
        label4 = Label(text=vorschlagsmodell[1], font_size = 18, color = (0.8,0.1,0,1))
        label5 = Label(text="Ausgewähltes System", font_size = 18)
        label6 = Label(text= label2.text, font_size = 18, color = (0.1,0.8,0,1))
        label7 = Label(text="Ausgewählte Technologie", font_size = 18)
        label8 = Label(text= label4.text, font_size = 18, color = (0.1,0.8,0,1))
        dropdown1 = DropDown()
        dropdown2 = DropDown()
        for modell in modellsystem:
            btn1 = Button(text=modell, size_hint_y=None, height=50)
            btn1.bind(on_release=lambda btn: dropdown1.select(btn.text))
            dropdown1.add_widget(btn1)
        mainbutton1 = Button(text='System manuell auswählen')
        mainbutton1.bind(on_release=dropdown1.open)
        dropdown1.bind(on_select=lambda instance, x: setattr(label6, 'text', x))
        
        for system in wp_technologie:
            btn2 = Button(text=system, size_hint_y=None, height=50)
            btn2.bind(on_release=lambda btn: dropdown2.select(btn.text))
            dropdown2.add_widget(btn2)
        mainbutton2 = Button(text='Technologie manuell auswählen')
        mainbutton2.bind(on_release=dropdown2.open)
        dropdown2.bind(on_select=lambda instance, x: setattr(label8, 'text', x))
        
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['Vorschlagsmodell'].add_widget(grid_add)
        grid_add.add_widget(label1); grid_add.add_widget(label2); grid_add.add_widget(label3);
        grid_add.add_widget(label4); grid_add.add_widget(label5); grid_add.add_widget(label6); 
        grid_add.add_widget(label7); grid_add.add_widget(label8)
        grid_add1 = GridLayout(spacing=10, cols=1, size_hint=[1.0,0.20])
        self.our_layouts['Vorschlagsmodell'].add_widget(grid_add1)
        grid_add1.add_widget(mainbutton1)
        grid_add1.add_widget(mainbutton2)
        grid_add2 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Vorschlagsmodell'].add_widget(grid_add2)
        button_zurueck = Button(text= "zurück zu den Eingaben der Anlagenerfassung", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_vorschlagssystem = Button(text="Fertige Anlagenerfassung", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add2.add_widget(button_zurueck); grid_add2.add_widget(button_vorschlagssystem)

class Ausgewaehltes_System(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Ausgewaehltes_System, self).__init__(*args, **kwargs)
        self.our_layouts['Ausgewaehltes_System'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Ausgewaehltes_System']);self.current_layout='Ausgewaehltes_System'
        grid_add = GridLayout(cols=1, size_hint=[1.0,0.5])
        self.our_layouts['Ausgewaehltes_System'].add_widget(grid_add)
        ifc_last = ifcopenshell.open('Heizlast.ifc')
        raeume = ifc_last.by_type("IfcSpace")
        raum_info = {}
        anzahl_heizflaechen = 0
        for raum in raeume:
            for property_set in raum.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "BaseQuantities":
                    flaeche = property_set.RelatingPropertyDefinition.Quantities[1].AreaValue
                    raum_info[raum.Name] = flaeche
        for raum in raum_info:
            if raum_info[raum] > 32 and flaeche <= 32:
                anzahl_heizflaechen = anzahl_heizflaechen + 2
            elif raum_info[raum] > 32:
                anzahl_heizflaechen = anzahl_heizflaechen + 3
            else:
                anzahl_heizflaechen = anzahl_heizflaechen + 1
        system = self.app.vorschlagsmodell[0]
        self.app.technologie = self.app.vorschlagsmodell[1]
        systemwahl = {"WP mit Pufferspeicher und Frischwasserstation und FBH": "WP_Puffer_FWS_FBH",
                      "WP mit Pufferspeicher und Frischwasserstation und Radiatoren": "WP_Puffer_FWS_HK",
                      "WP mit Pufferspeicher und TWW-Speicher und Radiatoren": "WP_Puffer_TWW_HK",
                      "WP mit Pufferepeicher und TWW-Speicher und FBH": "WP_Puffer_TWW_FBH",
                      "WP mit Kombispeicher und FBH": "WP_Kombi_FBH", 
                      "WP mit Kombispeicher und Radiatoren": "WP_Kombi_HK", 
                      "WP ohne Pufferspeicher mit TWW-Speicher mit FBH": "WP_TWW_FBH",
                      "WP ohne Pufferspeicher mit TWW-Speicher mit Radiatoren": "WP_TWW_HK",
                      "WP mit FBH": "WP_FBH",
                      "WP mit Pufferspeicher und FBH": "WP_Puffer_FBH", 
                      "WP mit Pufferspeicher und Radiatoren": "WP_Puffer_HK"
                      }
        self.app.anlage = systemwahl[system]+ str(anzahl_heizflaechen)+".ifc"
        self.app.anzahlh = anzahl_heizflaechen
        label1 = Label(text="Fertige Systemwahl", font_size=18)
        button = Button(text=system, background_color= (0.1,0.8,0,1), font_size=20)
        grid_add.add_widget(label1); grid_add.add_widget(button)
        grid_add1 = GridLayout(cols=1, size_hint=[1.0,0.25])
        self.our_layouts['Ausgewaehltes_System'].add_widget(grid_add1)
        label3 = Label(text="Nach den Lastberechnungen, kann dieses System nun über den Menüpunkt Datenerfassung und Berechnungen > Automatische Anlagenparametrisierung parametrisiert werden.",
                       font_size = 12)
        label4 = Label(text="Die System- und Anlageninformationen können dann über Analyse > Datenabruf > Daten der Heizungsanalge abgerufen werden.",
                       font_size = 12)
        grid_add1.add_widget(label3); grid_add1.add_widget(label4);
        grid_add2 = GridLayout(cols=1, size_hint=[1.0,0.25])
        self.our_layouts['Ausgewaehltes_System'].add_widget(grid_add2)
        button_zurueck = Button(text= "zurück zum Menü der Datenerfassung", on_release=self.switch_layout)
        grid_add2.add_widget(button_zurueck)

class Bestehendes_Gebaeude(Mixed_class):
    def sys(self, button):
        self.anzeige_sys.text =  button.text
    def puffer(self, button):
        self.anzeige_pf.text =  button.text
    def tww(self, button):
        self.anzeige_tww.text =  button.text
    def kombi(self, button):
        self.anzeige_kombi.text =  button.text
    def hk(self, button):
        self.anzeige_hk.text =  button.text
    def fws(self, button):
        self.anzeige_fws.text =  button.text
    def warmwasser(self, button):
        self.anzeige_ww.text =  button.text
    def __init__(self, *args, **kwargs):
        super(Bestehendes_Gebaeude, self).__init__(*args, **kwargs)
        self.app.eingaben['Bestehendes_Gebaeude'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Bestehendes_Gebaeude'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Bestehendes_Gebaeude']);self.current_layout='Bestehendes_Gebaeude'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Bestehendes_Gebaeude'].add_widget(grid_titel)
        titel = Label(text='Heizungssanierung oder -austausch', font_size=30)
        grid_titel.add_widget(titel)
        grid_add1 = GridLayout(spacing=10, cols=2)
        self.our_layouts['Bestehendes_Gebaeude'].add_widget(grid_add1)
        
        grid_add1.add_widget(Label(text = "System- oder Wärmeerzeugertausch?", font_size=18))
        buttons_box_sys = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_sys)
        buttons_box_sys.add_widget(Button(text= 'Systemtausch', on_release = self.sys))
        buttons_box_sys.add_widget(Button(text= 'Wärmeerzeugertausch', on_release = self.sys))
        self.anzeige_sys = Label(text = 'Wärmeerzeugertausch'); buttons_box_sys.add_widget(self.anzeige_sys)
        
        grid_add1.add_widget(Label(text = "Ist ein Pufferspeicher vorhanden?", font_size=18))
        buttons_box_pf = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_pf)
        buttons_box_pf.add_widget(Button(text= 'ja', on_release = self.puffer))
        buttons_box_pf.add_widget(Button(text= 'nein', on_release = self.puffer))
        self.anzeige_pf = Label(text = 'ja'); buttons_box_pf.add_widget(self.anzeige_pf)       
        
        grid_add1.add_widget(Label(text = "Ist ein TWW-Speicher vorhanden?", font_size=18))
        buttons_box_tww = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_tww)
        buttons_box_tww.add_widget(Button(text= 'ja', on_release = self.tww))
        buttons_box_tww.add_widget(Button(text= 'nein', on_release = self.tww))
        self.anzeige_tww = Label(text = 'ja'); buttons_box_tww.add_widget(self.anzeige_tww) 
        
        grid_add1.add_widget(Label(text = "Ist ein Kombispeicher vorhanden?", font_size=18))
        buttons_box_kombi = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_kombi)
        buttons_box_kombi.add_widget(Button(text= 'ja', on_release = self.kombi))
        buttons_box_kombi.add_widget(Button(text= 'nein', on_release = self.kombi))
        self.anzeige_kombi = Label(text = 'ja'); buttons_box_kombi.add_widget(self.anzeige_kombi) 
        
        grid_add1.add_widget(Label(text = "Sind Heizkörper oder Heizflächen(FBH) vorhanden?", font_size=18))
        buttons_box_hk = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_hk)
        buttons_box_hk.add_widget(Button(text= 'Heizkörper', on_release = self.hk))
        buttons_box_hk.add_widget(Button(text= 'Heizflächen (FBH)', on_release = self.hk))
        self.anzeige_hk = Label(text = 'Heizkörper'); buttons_box_hk.add_widget(self.anzeige_hk)  
        
        grid_add1.add_widget(Label(text = "Ist eine Frischwasserstation vorhanden?", font_size=18))
        buttons_box_fws = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_fws)
        buttons_box_fws.add_widget(Button(text= 'ja', on_release = self.fws))
        buttons_box_fws.add_widget(Button(text= 'nein', on_release = self.fws))
        self.anzeige_fws = Label(text = 'ja'); buttons_box_fws.add_widget(self.anzeige_fws) 
        
        grid_add1.add_widget(Label(text = "Soll das neue System auch Warmwasser erzeugen?", font_size=18))
        buttons_box_ww = BoxLayout (orientation = 'horizontal')
        grid_add1.add_widget(buttons_box_ww)
        buttons_box_ww.add_widget(Button(text= 'ja', on_release = self.warmwasser))
        buttons_box_ww.add_widget(Button(text= 'nein', on_release = self.warmwasser))
        self.anzeige_ww = Label(text = 'ja'); buttons_box_ww.add_widget(self.anzeige_ww)       
        
        grid_add2 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Bestehendes_Gebaeude'].add_widget(grid_add2)
        button_zurueck = Button(text= "zurück zum Beginn der Anlagenerfassung", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_vorschlagssystem = Button(text="Neues Vorschlagsmodell bestimmen", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add2.add_widget(button_zurueck); grid_add2.add_widget(button_vorschlagssystem)

class Vorschlagsmodell_alt(Mixed_class):
    def erdsonde(self, button):
        self.angrenzungs_anzeige_erd.text =  button.text
    def grundwasser(self, button):
        self.angrenzungs_anzeige_gr.text =  button.text
    def on_gf(self, instance, gf):
        self.anfangswert_gf.text = str(round(gf, 1)) + ' m²'
    def __init__(self, *args, **kwargs):
        super(Vorschlagsmodell_alt, self).__init__(*args, **kwargs)
        self.app.eingaben['Vorschlagsmodell_alt'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Vorschlagsmodell_alt'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Vorschlagsmodell_alt']);self.current_layout='Vorschlagsmodell_alt'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Vorschlagsmodell_alt'].add_widget(grid_titel)
        titel = Label(text='Vorschlagsmodell_alt', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.4])
        self.our_layouts['Vorschlagsmodell_alt'].add_widget(grid_add)

        grid_add.add_widget(Label(text = "Einsatz von Erdwärmesonden möglich?", font_size=20))
        buttons_box_erd = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(buttons_box_erd)
        buttons_box_erd.add_widget(Button(text= 'ja', on_release = self.erdsonde))
        buttons_box_erd.add_widget(Button(text= 'nein', on_release = self.erdsonde))
        self.angrenzungs_anzeige_erd = Label(text = 'ja')
        buttons_box_erd.add_widget(self.angrenzungs_anzeige_erd)
        
        grid_add.add_widget(Label(text = "Zugang zu Grundwasserquellen vorhanden?", font_size=20))
        buttons_box_gr = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(buttons_box_gr)
        buttons_box_gr.add_widget(Button(text= 'ja', on_release = self.grundwasser))
        buttons_box_gr.add_widget(Button(text= 'nein', on_release = self.grundwasser))
        self.angrenzungs_anzeige_gr = Label(text = 'ja')
        buttons_box_gr.add_widget(self.angrenzungs_anzeige_gr)       
              
        grid_add2 = GridLayout(spacing=10, cols=3, size_hint=[1.0,0.3])
        self.our_layouts['Vorschlagsmodell_alt'].add_widget(grid_add2)
        gf = Slider(min = 0, max = 400, step = 5, value = 0)    #Benachbarte Temperatur
        grid_add2.add_widget(Label(text = 'Vorhandene Grundstücksfläche', font_size=24))
        grid_add2.add_widget(gf)
        self.anfangswert_gf = Label(text = '0 m²', font_size=24)
        grid_add2.add_widget(self.anfangswert_gf)
        gf.bind(value = self.on_gf)
        
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Vorschlagsmodell_alt'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zur Erfassung der Bestandsanlage", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_vorschlagssystem = Button(text="Neuen Wärmeerzeuger bestimmen", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_vorschlagssystem)

class Vorschlagsmodell_alt2(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Vorschlagsmodell_alt2, self).__init__(*args, **kwargs)
        self.app.eingaben['Vorschlagsmodell_alt2'] = {}
        vorschlagsmodell = self.app.vorschlagsmodell
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Vorschlagsmodell_alt2'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Vorschlagsmodell_alt2']);self.current_layout='Vorschlagsmodell_alt2'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Vorschlagsmodell_alt2'].add_widget(grid_titel)
        titel = Label(text='Vorschlagsmodell für die bestehende Anlage und neuen Wärmeerzeuger', font_size=30)
        grid_titel.add_widget(titel)
        alle_systeme  = ["WP mit Pufferspeicher und Frischwasserstation und FBH", "WP mit Pufferspeicher und Frischwasserstation und Radiatoren", 
                          "WP mit Pufferspeicher und TWW-Speicher und Radiatoren", "WP mit Pufferspeicher und TWW-Speicher und FBH", 
                          "WP mit Kombispeicher und FBH", "WP mit Kombispeicher und Radiatoren",
                          "WP ohne Pufferspeicher mit TWW-Speicher mit FBH", "WP mit FBH", "WP mit Pufferspeicher und FBH", 
                          "WP mit Pufferspeicher und Radiatoren"]
        wp_technologie = ["Luft-Wasser-Wärmepumpe", "Sole-Wasser-Wärmepumpe; Erdkollektor",
                          "Sole-Wasser-Wärmepumpe; Erdsonde", "Wasser-Wasser-Wärmepumpe; Grundwasser"]
        
        label1 = Label(text="Vorgeschlagenes System", font_size=18)
        label2 = Label(text=vorschlagsmodell[0], font_size = 18, color = (0.8,0.1,0,1))
        label3 = Label(text="Vorgeschlagene Technologie", font_size=18)
        label4 = Label(text=vorschlagsmodell[1], font_size = 18, color = (0.8,0.1,0,1))
        label5 = Label(text="Ausgewähltes System", font_size = 18)
        label6 = Label(text= label2.text, font_size = 18, color = (0.1,0.8,0,1))
        label7 = Label(text="Ausgewählte Technologie", font_size = 18)
        label8 = Label(text= label4.text, font_size = 18, color = (0.1,0.8,0,1))
        dropdown1 = DropDown()
        dropdown2 = DropDown()
        for modell in alle_systeme:
            btn1 = Button(text=modell, size_hint_y=None, height=50)
            btn1.bind(on_release=lambda btn: dropdown1.select(btn.text))
            dropdown1.add_widget(btn1)
        mainbutton1 = Button(text='System manuell auswählen')
        mainbutton1.bind(on_release=dropdown1.open)
        dropdown1.bind(on_select=lambda instance, x: setattr(label6, 'text', x))
        
        for system in wp_technologie:
            btn2 = Button(text=system, size_hint_y=None, height=50)
            btn2.bind(on_release=lambda btn: dropdown2.select(btn.text))
            dropdown2.add_widget(btn2)
        mainbutton2 = Button(text='Technologie manuell auswählen')
        mainbutton2.bind(on_release=dropdown2.open)
        dropdown2.bind(on_select=lambda instance, x: setattr(label8, 'text', x))
        
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['Vorschlagsmodell_alt2'].add_widget(grid_add)
        grid_add.add_widget(label1); grid_add.add_widget(label2); grid_add.add_widget(label3);
        grid_add.add_widget(label4); grid_add.add_widget(label5); grid_add.add_widget(label6); 
        grid_add.add_widget(label7); grid_add.add_widget(label8)
        grid_add1 = GridLayout(spacing=10, cols=1, size_hint=[1.0,0.20])
        self.our_layouts['Vorschlagsmodell_alt2'].add_widget(grid_add1)
        grid_add1.add_widget(mainbutton1)
        grid_add1.add_widget(mainbutton2)
        grid_add2 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Vorschlagsmodell_alt2'].add_widget(grid_add2)
        button_zurueck = Button(text= "zurück zu den Eingaben der Anlagenerfassung", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_vorschlagssystem = Button(text="Anlagenerfassung abschließen", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add2.add_widget(button_zurueck); grid_add2.add_widget(button_vorschlagssystem)




#Automatische Anlagenparametriesierung
class Anlagenparametrisierung(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Anlagenparametrisierung, self).__init__(*args, **kwargs)
        self.our_layouts['Anlagenparametrisierung'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Anlagenparametrisierung']);self.current_layout='Anlagenparametrisierung'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Anlagenparametrisierung'].add_widget(grid_titel)
        titel = Label(text="Anlagenparametrisierung", font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(cols=1)
        self.our_layouts['Anlagenparametrisierung'].add_widget(grid_add)
        button_start1  = Button(text="Anlagenparametrisierung starten (Heizlast-, Trinkwarmwasserlastberechnung sowie Anlagenerfassung muss durchgeführt sein)", on_release=self.switch_layout)
        button_zurueck  = Button(text= "zurück zum Menü der Datenerfassung", on_release=self.switch_layout)
        grid_add.add_widget(button_start1); grid_add.add_widget(button_zurueck)

class Anlagenparametrisierung1(Mixed_class):
    def leistungsangabe(self, instance, leistung):
        self.leistungsanzeige.text =  str(round(leistung, 2)) + ' kW'
    def vorlauf_t_angabe(self, instance, vorlauftemperatur):
        self.vorlauf_t_anzeige.text =  str(round(vorlauftemperatur, 0)) + ' °C'
    def ruecklauf_t_angabe(self, instance, ruecklauftemperatur):
        self.ruecklauf_t_anzeige.text =  str(round(ruecklauftemperatur, 0)) + ' °C'
    def puffer_t_angabe(self, instance, pufferspeicher):
        self.puffer_t_anzeige.text =  str(round(pufferspeicher, 1)) + ' liter'
    def warmwasser_t_angabe(self, instance, warmwassertemperatur):
        self.warmwasser_t_anzeige.text =  str(round(warmwassertemperatur, 0)) + ' °C'
    def tww_t_angabe(self, instance, tww_speicher):
        self.tww_t_anzeige.text =  str(round(tww_speicher, 1)) + ' liter'
    def __init__(self, *args, **kwargs):
        super(Anlagenparametrisierung1, self).__init__(*args, **kwargs)
        self.app.eingaben['Anlagenparametrisierung1'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Anlagenparametrisierung1'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Anlagenparametrisierung1']);self.current_layout='Anlagenparametrisierung1'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Anlagenparametrisierung1'].add_widget(grid_titel)
        titel = Label(text='Anlagenparametrisierung - Eingaben', font_size=30)
        grid_titel.add_widget(titel)
        ifc_system = ifcopenshell.open('System.ifc')
        techno = ifc_system.by_type("IfcBuilding")[0]       
        if 'FWS' or 'TWW' in techno.Description:
            tww_last_ifc = ifcopenshell.open('Heizlast_TWW.ifc')
            building_tww = tww_last_ifc.by_type('IfcBuilding')[0]
            for property_set in building_tww.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "TWW_Quantities":
                    warmwasserlast = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue*1000
                elif property_set.RelatingPropertyDefinition.Name == "Pset_Residents_TWW":
                    anzahl_personen = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
        heizlast_ifc  = ifcopenshell.open('Heizlast.ifc')
        building_heiz = heizlast_ifc.by_type('IfcBuilding')[0]
        for property_set in building_heiz.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_Building":
                heizlast = property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue + property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue
        leistung_wp = round((heizlast + warmwasserlast)/1000, 1)
        #waermequellenart = techno.Description.split('WP')[0]
        if techno.Description.split(';')[2] == '0':
            vorlauf_t = 35
            ruecklauf_t = 30
        else:
            vorlauf_t = 45
            ruecklauf_t = 35
        ueberbrueckung = 0.5 #h
        wasser_kapazitaet = 1.163  #Wh/kg*K
        empfehlung_pufferspeicher = round((leistung_wp*ueberbrueckung)/(wasser_kapazitaet*(vorlauf_t-ruecklauf_t))*1000, 1)
        empfehlung_systemtemperaturen = str(vorlauf_t)+'/'+str(ruecklauf_t)+'/'+'20'
        vorlauf_tww = 40
        grid_add = GridLayout(spacing=10, cols=3)
        self.our_layouts['Anlagenparametrisierung1'].add_widget(grid_add)
        grid_add.add_widget(Label(text = 'Heizleistung Wärmeerzeuger', font_size=24))
        grid_add.add_widget(Label(text = 'Empf.: '+ str(leistung_wp)+' kW', font_size=24))
        box_leistung = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_leistung)
        leistung = Slider(min = 2.0, max = 15.0, step = 0.2, value = leistung_wp)
        box_leistung.add_widget(leistung)
        self.leistungsanzeige = Label(text = str(leistung.value) + ' kW', font_size=24)
        box_leistung.add_widget(self.leistungsanzeige)
        leistung.bind(value = self.leistungsangabe)

        grid_add.add_widget(Label(text = 'Vorlauftemperatur', font_size=24))
        grid_add.add_widget(Label(text = 'Empf.: '+ str(vorlauf_t)+' °C', font_size=24))
        box_vorlauf = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_vorlauf)
        vorlauftemperatur = Slider(min = 30, max = 75, step = 1, value = vorlauf_t)
        box_vorlauf.add_widget(vorlauftemperatur)
        self.vorlauf_t_anzeige = Label(text = str(vorlauf_t) + ' °C', font_size=24)
        box_vorlauf.add_widget(self.vorlauf_t_anzeige)
        vorlauftemperatur.bind(value = self.vorlauf_t_angabe)

        grid_add.add_widget(Label(text = 'Rücklauftemperatur', font_size=24))
        grid_add.add_widget(Label(text = 'Empf.: '+ str(ruecklauf_t)+' °C', font_size=24))
        box_ruecklauf = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_ruecklauf)
        ruecklauftemperatur = Slider(min = 20, max = 60, step = 1, value = ruecklauf_t)
        box_ruecklauf.add_widget(ruecklauftemperatur)
        self.ruecklauf_t_anzeige = Label(text = str(ruecklauf_t) + ' °C', font_size=24)
        box_ruecklauf.add_widget(self.ruecklauf_t_anzeige)
        ruecklauftemperatur.bind(value = self.ruecklauf_t_angabe)

        grid_add.add_widget(Label(text = 'Größe Pufferspeicher', font_size=24))
        grid_add.add_widget(Label(text = 'Empf.: '+ str(empfehlung_pufferspeicher)+' liter', font_size=24))
        box_puffer = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_puffer)
        pufferspeicher = Slider(min = 40, max = 600, step = 24, value = empfehlung_pufferspeicher)
        box_puffer.add_widget(pufferspeicher)
        self.puffer_t_anzeige = Label(text = str(empfehlung_pufferspeicher) + ' liter', font_size=24)
        box_puffer.add_widget(self.puffer_t_anzeige)
        pufferspeicher.bind(value = self.puffer_t_angabe)
        
        grid_add.add_widget(Label(text = 'Warmwassertemperatur', font_size=24))
        grid_add.add_widget(Label(text = 'Empf.: '+ str(vorlauf_tww)+' °C', font_size=24))
        box_warmwasser = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_warmwasser)
        warmwassertemperatur = Slider(min = 35, max = 70, step = 1, value = vorlauf_tww)
        box_warmwasser.add_widget(warmwassertemperatur)
        self.warmwasser_t_anzeige = Label(text = str(vorlauf_tww) + ' °C', font_size=24)
        box_warmwasser.add_widget(self.warmwasser_t_anzeige)
        warmwassertemperatur.bind(value = self.warmwasser_t_angabe)
        
        if 'TWW' in techno.Description:
            if anzahl_personen <= 3:
                speicher_v = 100
            else:
                speicher_v = 30* anzahl_personen
            grid_add.add_widget(Label(text = 'Größe TWW-Speicher', font_size=24))
            grid_add.add_widget(Label(text = 'Empf.: '+ str(speicher_v)+' liter', font_size=24))
            box_tww = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_tww)
            tww_speicher = Slider(min = 40, max = 600, step = 20, value = speicher_v)
            box_tww.add_widget(tww_speicher)
            self.tww_t_anzeige = Label(text = str(speicher_v) + ' liter', font_size=24)
            box_tww.add_widget(self.tww_t_anzeige)
            tww_speicher.bind(value = self.tww_t_angabe)

        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Anlagenparametrisierung1'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zum Start", background_color= (0.8,0.1,0,1), 
                                font_size=20, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_waende= Button(text="Empfehlungen und Eingaben bestätigen", background_color= (0.1,0.8,0,1),
                                font_size=20, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_waende)



class Anlagenparametrisierung2(Mixed_class):
    def leistungsangabe(self, instance, leistung):
        self.leistungen[str(instance)].text = str(leistung) + ' Watt'
    def __init__(self, *args, **kwargs):
        super(Anlagenparametrisierung2, self).__init__(*args, **kwargs)
        self.app.eingaben['Anlagenparametrisierung2'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Anlagenparametrisierung2'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Anlagenparametrisierung2']);self.current_layout='Anlagenparametrisierung2'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Anlagenparametrisierung2'].add_widget(grid_titel)
        titel = Label(text='Anlagenparametrisierung - Eingaben', font_size=30)
        grid_titel.add_widget(titel)
        lst = ["Heizfläche", "Raum", "Leistung - Empfehlung", "Leistung - real"]
        grid_add = GridLayout(spacing=10, cols=4)
        self.our_layouts['Anlagenparametrisierung2'].add_widget(grid_add)
        for txt in lst:
            txt = Label(text=txt, font_size=24)
            grid_add.add_widget(txt)
        
        heizlast_ifc = ifcopenshell.open('Heizlast.ifc')
        ifc_system   = ifcopenshell.open('System.ifc')
        lasten = {}
        raeume       = heizlast_ifc.by_type('IfcSpace')
        for raum in raeume:
            for property_set in raum.IsDefinedBy:
                if  property_set.RelatingPropertyDefinition.Name == "Pset_Space":
                    last = round(property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue + property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue, 4)
                    lasten[raum.Name] = last
        heizkoerper  = ifc_system.by_type("IfcSpaceHeater")
        self.heizungen = {}
        self.leistungen = {}
        self.raumnamen = {}
        ### Add labels and input-fields
        for heizung in heizkoerper:
            raumname = heizung.Name.split(' ')[1]
            heizungsname = heizung.Name.split(' ')[0]
            self.raumnamen[heizungsname] = raumname
            txt1 = Label(text=heizung.Name.split(' ')[0], font_size=20)
            txt2 = Label(text=raumname, font_size=20)
            if lasten[raumname] > 1000:
                txt3 = Label(text=str(int(round(lasten[raumname]/2, 0))) + ' Watt', font_size=20)
            else:
                txt3 = Label(text=str(int(round(lasten[raumname], 0))) + ' Watt', font_size=20)
            grid_add.add_widget(txt1); grid_add.add_widget(txt2); grid_add.add_widget(txt3)
            box_eingabe = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_eingabe)
            #self.heizungen[heizungsname] = Slider(min = round(lasten[raumname],-1)/2, max = round(lasten[raumname],-1)*2, step = 5.0, value =round(lasten[raumname],-1) )
            self.heizungen[heizungsname] = Slider(min = 100, max = 1000, step = 20, value =round(lasten[raumname],-1) )
            box_eingabe.add_widget(self.heizungen[heizungsname])
            self.leistungen[str(self.heizungen[heizungsname])] = Label(text = str(1000)+' Watt', font_size=24)
            box_eingabe.add_widget(self.leistungen[str(self.heizungen[heizungsname])])
            self.heizungen[heizungsname].bind(value = self.leistungsangabe)          
            
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Anlagenparametrisierung2'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zur vorherigen Eingabe", background_color= (0.8,0.1,0,1), 
                                font_size=20, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_waende= Button(text="Heizflächen festlegen", background_color= (0.1,0.8,0,1),
                                font_size=20, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_waende)


class Anlagenparametrisierung3(Mixed_class):    #Abfrage Rohrlängen zu Heizkorpern/Heizflächen
    def laenge1angabe(self, instance, laenge1):
        self.laengen1[str(instance)].text = str(round(laenge1,1)) + ' m'  
    def on_push_durchmesser(self, button):
        for daten in self.durchmesser:
            if str(button) in str(daten):
                self.durchmesser[daten].text = button.text
    def on_push_strang(self, button):
        for daten in self.straenge:
            if str(button) in str(daten):
                self.straenge[daten].text = button.text                
    def __init__(self, *args, **kwargs):
        super(Anlagenparametrisierung3, self).__init__(*args, **kwargs)
        self.our_layouts['Anlagenparametrisierung3'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Anlagenparametrisierung3']);self.current_layout='Anlagenparametrisierung3'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        ifc_system = ifcopenshell.open("System.ifc")
        self.our_layouts['Anlagenparametrisierung3'].add_widget(grid_titel)
        titel = Label(text='Anlagenparametrisierung - Eingaben', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(spacing=10, cols=4, size_hint=[1.0, 0.7])
        self.our_layouts['Anlagenparametrisierung3'].add_widget(grid_add)
        txt1 = Label(text='Heizfläche', font_size=16)
        txt2 = Label(text='Rohrlänge', font_size=16)
        txt3 = Label(text='Rohrinnendurchmesser', font_size=16)
        txt4 = Label(text='Heizkreisverteiler', font_size=16)
        grid_add.add_widget(txt1); grid_add.add_widget(txt2)
        grid_add.add_widget(txt3); grid_add.add_widget(txt4)
        
        self.laengen1 = {}
        self.laengen1_s = {}
        self.durchmesser = {}
        self.durchmesser_b = {}
        self.straenge = {}
        self.straenge_b = {}
                
        for element in ifc_system.by_type('IfcSpaceHeater'):
            txt = Label(text=element.Name, font_size=14) 
            grid_add.add_widget(txt)
            heizungsname = element.Name
            box_laenge1 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_laenge1)
            box_durchmesser = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_durchmesser)
            box_strang = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_strang)
            self.laengen1_s[heizungsname] = Slider(min = 20, max = 100, step = 2, value = 0.0)
            box_laenge1.add_widget(self.laengen1_s[heizungsname])
            self.laengen1[str(self.laengen1_s[heizungsname])] = Label(text = '0 m', font_size=12)
            box_laenge1.add_widget(self.laengen1[str(self.laengen1_s[heizungsname])])
            self.laengen1_s[heizungsname].bind(value = self.laenge1angabe)            
            lst = ['8.8 mm (DN8)', '12.5 mm (DN10)', '16.0 mm (DN15)', '21.6 mm (DN20)', '27.2 mm (DN25)',
                       '35.9 mm (DN32)']
            box_rohrdurchmesser = BoxLayout (orientation = 'vertical')
            box_durchmesser.add_widget(box_rohrdurchmesser)
            grid_buttons = GridLayout(cols=2)
            box_rohrdurchmesser.add_widget(grid_buttons)
            liste = []
            for txt in lst:
                button = Button(text= txt, on_release = self.on_push_durchmesser, font_size = 9)
                grid_buttons.add_widget(button)
                liste.append(button)
            self.durchmesser_b[heizungsname] = liste
            self.durchmesser[str(self.durchmesser_b[heizungsname])] = Label(text = '16.0 mm (DN15)', font_size=12)
            box_durchmesser.add_widget(self.durchmesser[str(self.durchmesser_b[heizungsname])])
            lst = ['1', '2', '3', '4']
            box_buttons = BoxLayout (orientation = 'horizontal')
            box_strang.add_widget(box_buttons)
            liste = []
            for txt in lst:
                button = Button(text= txt, on_release = self.on_push_strang, font_size = 9)
                box_buttons.add_widget(button)
                liste.append(button)
            self.straenge_b[heizungsname] = liste
            self.straenge[str(self.straenge_b[heizungsname])] = Label(text = '1', font_size=12)
            box_strang.add_widget(self.straenge[str(self.straenge_b[heizungsname])])                

        grid_add1 = GridLayout(spacing= 10, cols=2, size_hint=[1.0, 0.15])
        self.our_layouts['Anlagenparametrisierung3'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zur Auslegung der Heizflächen", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button= Button(text="Rohrlängen festlegen und Parametrisierung fertigstellen", background_color= (0.1,0.8,0,1), font_size=16, on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button);

class Anlagenparametrisierung4(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Anlagenparametrisierung4, self).__init__(*args, **kwargs)
        self.rooms = ifc_file.by_type("IfcSpace")
        self.our_layouts['Anlagenparametrisierung4'] = BoxLayout(spacing=10, orientation='vertical')
        # gleich aufsetzen:
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Anlagenparametrisierung4']);self.current_layout='Anlagenparametrisierung4'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Anlagenparametrisierung4'].add_widget(grid_titel)
        titel = Label(text='Fertige Anlagenparametrisierung', font_size=30)
        grid_titel.add_widget(titel)
        grid_add1 = GridLayout(cols=1, size_hint=[1.0,0.7])
        self.our_layouts['Anlagenparametrisierung4'].add_widget(grid_add1)
        label= Label(text="Erfolgreiche Anlagenparametrisierung!", font_size = 16)
        label1= Label(text="Nach der Anlagenparametrisierung kann jetzt noch der hydraulische Abgleich gerechnet werden.", font_size = 14)
        grid_add1.add_widget(label); grid_add1.add_widget(label1);
        grid_add = GridLayout(spacing=10, cols=4, size_hint=[1.0, 0.15])
        self.our_layouts['Anlagenparametrisierung4'].add_widget(grid_add)
        button_ende= Button(text="Fertige Anlagenparametrisierung", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add.add_widget(button_ende)


class Anlagenparametrisierung_HK(Mixed_class):
    def on_push_struktur(self, button):
        self.anzeige_auswahl.text =  button.background_normal.split('s')[1].split('.')[0]
    def __init__(self, *args, **kwargs):
        super(Anlagenparametrisierung_HK, self).__init__(*args, **kwargs)
        self.app.eingaben['Anlagenparametrisierung_HK'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Anlagenparametrisierung_HK'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Anlagenparametrisierung_HK']);self.current_layout='Anlagenparametrisierung_HK'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.1])
        self.our_layouts['Anlagenparametrisierung_HK'].add_widget(grid_titel)
        titel = Label(text='Anlagenparametrisierung Heizkörper Rohrnetz', font_size=30)
        grid_titel.add_widget(titel)
        grid_add_b_bilder = GridLayout(spacing=10, cols=2)
        self.our_layouts['Anlagenparametrisierung_HK'].add_widget(grid_add_b_bilder)
        lst2 = ['Kreis1.PNG', 'Kreis2.PNG','Kreis3.PNG','Kreis4.PNG']
        i = 1
        for txt in lst2: 
            buttons_box = BoxLayout (spacing=10, orientation = 'horizontal')
            grid_add_b_bilder.add_widget(buttons_box)
            buttons_box.add_widget(Label(text = str(i), size_hint =[0.1, 1.0]))
            button = Button(text= '', background_normal = txt, size_hint = [0.9, 1.0], on_release = self.on_push_struktur)
            buttons_box.add_widget(button)
            i=i+1
        grid_add = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.1])
        self.our_layouts['Anlagenparametrisierung_HK'].add_widget(grid_add)
        #self.on_push_angrenzung))
        grid_add.add_widget(Label(text = 'Ausgewählte Struktur für den Heizkreis:', font_size=24))
        self.anzeige_auswahl = Label(text = '1', font_size=24)
        grid_add.add_widget(self.anzeige_auswahl)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Anlagenparametrisierung_HK'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zur vorherigen Eingabe", background_color= (0.8,0.1,0,1), 
                                font_size=20, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_waende= Button(text="Längen und Querschnitte festlegen", background_color= (0.1,0.8,0,1),
                                font_size=20, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_waende)

class Rohrnetzstruktur_HK(Mixed_class):
    def rohrlaenge_angabe(self, instance, rohrlaenge):
        self.rohrlaenge_anzeige.text =  str(round(rohrlaenge, 2)) + ' m'
    def on_push_durchmesser(self, button):
        self.anzeige_auswahl.text =  button.text  
    def rohrlaenge_angabe2(self, instance, rohrlaenge):
        self.rohrlaenge_anzeige2.text =  str(round(rohrlaenge, 2)) + ' m'
    def on_push_durchmesser2(self, button):
        self.anzeige_auswahl2.text =  button.text         
    def rohrlaenge_angabe3(self, instance, rohrlaenge):
        self.rohrlaenge_anzeige3.text =  str(round(rohrlaenge, 2)) + ' m'
    def on_push_durchmesser3(self, button):
        self.anzeige_auswahl3.text =  button.text  
    def __init__(self, *args, **kwargs):
        super(Rohrnetzstruktur_HK, self).__init__(*args, **kwargs)
        self.building = ifc_file.by_type("IfcBuilding")
        self.our_layouts['Rohrnetzstruktur'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Rohrnetzstruktur']);self.current_layout='Rohrnetzstruktur'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Rohrnetzstruktur'].add_widget(grid_titel)
        titel = Label(text='Rohrnetzbestimmung - Baumstruktur', font_size=30)
        grid_titel.add_widget(titel)
        
        if int(self.app.heizkreis_hk) == 2:
            bild = 'Kreis2.PNG'
            grid_add_b_bilder = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.6])
            self.our_layouts['Rohrnetzstruktur'].add_widget(grid_add_b_bilder)
            struktur = Image(source=bild)
            grid_add_b_bilder.add_widget(struktur)
            grid_add = GridLayout(spacing=10, cols=2, )
            self.our_layouts['Rohrnetzstruktur'].add_widget(grid_add)
            grid_add.add_widget(Label(text = 'Rohrlänge bis zum Knotenpunkt1', font_size=16))
            box_rohrlaenge = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_rohrlaenge)
            rohrlaenge = Slider(min = 0.0, max = 25.0, step = 0.1, value = 0.0)
            box_rohrlaenge.add_widget(rohrlaenge)
            self.rohrlaenge_anzeige = Label(text = '0.0' + ' m', font_size=16)
            box_rohrlaenge.add_widget(self.rohrlaenge_anzeige)
            rohrlaenge.bind(value = self.rohrlaenge_angabe)
            lst = ['8.8 mm (DN8)', '12.5 mm (DN10)', '16.0 mm (DN15)', '21.6 mm (DN20)', '27.2 mm (DN25)',
                   '35.9 mm (DN32)']
            grid_add.add_widget(Label(text = 'Rohrinnendurchmesser bis zum Knotenpunkt1', font_size=16))
            box1 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box1)
            box_rohrdurchmesser = BoxLayout (orientation = 'vertical')
            box1.add_widget(box_rohrdurchmesser)
            grid_buttons = GridLayout(cols=2)
            box_rohrdurchmesser.add_widget(grid_buttons)
            for txt in lst:
                button = Button(text= txt, on_release = self.on_push_durchmesser, font_size = 12)
                grid_buttons.add_widget(button)
            self.anzeige_auswahl = Label(text = '16.0 mm (DN15)', font_size=16)
            box1.add_widget(self.anzeige_auswahl)
        elif int(self.app.heizkreis_hk) == 3:
            bild = 'Kreis3.PNG'
            grid_add_b_bilder = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.6])
            self.our_layouts['Rohrnetzstruktur'].add_widget(grid_add_b_bilder)
            struktur = Image(source=bild)
            grid_add_b_bilder.add_widget(struktur)
            grid_add = GridLayout(spacing=10, cols=2, )
            self.our_layouts['Rohrnetzstruktur'].add_widget(grid_add)
            grid_add.add_widget(Label(text = 'Rohrlänge bis zum Knotenpunkt1', font_size=16))
            box_rohrlaenge = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_rohrlaenge)
            rohrlaenge = Slider(min = 0.0, max = 25.0, step = 0.1, value = 0.0)
            box_rohrlaenge.add_widget(rohrlaenge)
            self.rohrlaenge_anzeige = Label(text = '0.0' + ' m', font_size=16)
            box_rohrlaenge.add_widget(self.rohrlaenge_anzeige)
            rohrlaenge.bind(value = self.rohrlaenge_angabe)
            lst = ['8.8 mm (DN8)', '12.5 mm (DN10)', '16.0 mm (DN15)', '21.6 mm (DN20)', '27.2 mm (DN25)',
                   '35.9 mm (DN32)']
            grid_add.add_widget(Label(text = 'Rohrinnendurchmesser bis zum Knotenpunkt1', font_size=16))
            box1 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box1)
            box_rohrdurchmesser = BoxLayout (orientation = 'vertical')
            box1.add_widget(box_rohrdurchmesser)
            grid_buttons = GridLayout(cols=2)
            box_rohrdurchmesser.add_widget(grid_buttons)
            for txt in lst:
                button = Button(text= txt, on_release = self.on_push_durchmesser, font_size = 12)
                grid_buttons.add_widget(button)
            self.anzeige_auswahl = Label(text = '16.0 mm (DN15)', font_size=16)
            box1.add_widget(self.anzeige_auswahl)
            
            grid_add.add_widget(Label(text = 'Rohrlänge vom 1ten bis zum Knotenpunkt 1/2', font_size=16))
            box_rohrlaenge2 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_rohrlaenge2)
            rohrlaenge2 = Slider(min = 0.0, max = 25.0, step = 0.1, value = 0.0)
            box_rohrlaenge2.add_widget(rohrlaenge2)
            self.rohrlaenge_anzeige2 = Label(text = '0.0' + ' m', font_size=16)
            box_rohrlaenge2.add_widget(self.rohrlaenge_anzeige2)
            rohrlaenge2.bind(value = self.rohrlaenge_angabe2)
            lst = ['8.8 mm (DN8)', '12.5 mm (DN10)', '16.0 mm (DN15)', '21.6 mm (DN20)', '27.2 mm (DN25)',
                   '35.9 mm (DN32)']
            grid_add.add_widget(Label(text = 'Rohrinnendurchmesser vom 1ten bis zum Knotenpunkt 1/2', font_size=16))
            box2 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box2)
            box_rohrdurchmesser2 = BoxLayout (orientation = 'vertical')
            box2.add_widget(box_rohrdurchmesser2)
            grid_buttons2 = GridLayout(cols=2)
            box_rohrdurchmesser2.add_widget(grid_buttons2)
            for txt in lst:
                button = Button(text= txt, on_release = self.on_push_durchmesser2, font_size = 12)
                grid_buttons2.add_widget(button)
            self.anzeige_auswahl2 = Label(text = '16.0 mm (DN15)', font_size=16)
            box2.add_widget(self.anzeige_auswahl2)
        elif int(self.app.heizkreis_hk) == 4:
            bild = 'Kreis4.PNG'
            grid_add_b_bilder = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.5])
            self.our_layouts['Rohrnetzstruktur'].add_widget(grid_add_b_bilder)
            struktur = Image(source=bild)
            grid_add_b_bilder.add_widget(struktur)
            grid_add = GridLayout(spacing=10, cols=2, )
            self.our_layouts['Rohrnetzstruktur'].add_widget(grid_add)
            grid_add.add_widget(Label(text = 'Rohrlänge bis zum Knotenpunkt1', font_size=16))
            box_rohrlaenge = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_rohrlaenge)
            rohrlaenge = Slider(min = 0.0, max = 25.0, step = 0.1, value = 0.0)
            box_rohrlaenge.add_widget(rohrlaenge)
            self.rohrlaenge_anzeige = Label(text = '0.0' + ' m', font_size=16)
            box_rohrlaenge.add_widget(self.rohrlaenge_anzeige)
            rohrlaenge.bind(value = self.rohrlaenge_angabe)
            lst = ['8.8 mm (DN8)', '12.5 mm (DN10)', '16.0 mm (DN15)', '21.6 mm (DN20)', '27.2 mm (DN25)',
                   '35.9 mm (DN32)']
            grid_add.add_widget(Label(text = 'Rohrinnendurchmesser bis zum Knotenpunkt1', font_size=16))
            box1 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box1)
            box_rohrdurchmesser = BoxLayout (orientation = 'vertical')
            box1.add_widget(box_rohrdurchmesser)
            grid_buttons = GridLayout(cols=2)
            box_rohrdurchmesser.add_widget(grid_buttons)
            for txt in lst:
                button = Button(text= txt, on_release = self.on_push_durchmesser, font_size = 12)
                grid_buttons.add_widget(button)
            self.anzeige_auswahl = Label(text = '16.0 mm (DN15)', font_size=16)
            box1.add_widget(self.anzeige_auswahl)
            
            grid_add.add_widget(Label(text = 'Rohrlänge vom 1ten bis zum Knotenpunkt 1/2', font_size=16))
            box_rohrlaenge2 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_rohrlaenge2)
            rohrlaenge2 = Slider(min = 0.0, max = 25.0, step = 0.1, value = 0.0)
            box_rohrlaenge2.add_widget(rohrlaenge2)
            self.rohrlaenge_anzeige2 = Label(text = '0.0' + ' m', font_size=16)
            box_rohrlaenge2.add_widget(self.rohrlaenge_anzeige2)
            rohrlaenge2.bind(value = self.rohrlaenge_angabe2)
            lst = ['8.8 mm (DN8)', '12.5 mm (DN10)', '16.0 mm (DN15)', '21.6 mm (DN20)', '27.2 mm (DN25)',
                   '35.9 mm (DN32)']
            grid_add.add_widget(Label(text = 'Rohrinnendurchmesser vom 1ten bis zum Knotenpunkt 1/2', font_size=16))
            box2 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box2)
            box_rohrdurchmesser2 = BoxLayout (orientation = 'vertical')
            box2.add_widget(box_rohrdurchmesser2)
            grid_buttons2 = GridLayout(cols=2)
            box_rohrdurchmesser2.add_widget(grid_buttons2)
            for txt in lst:
                button = Button(text= txt, on_release = self.on_push_durchmesser2, font_size = 12)
                grid_buttons2.add_widget(button)
            self.anzeige_auswahl2 = Label(text = '16.0 mm (DN15)', font_size=16)
            box2.add_widget(self.anzeige_auswahl2)

            grid_add.add_widget(Label(text = 'Rohrlänge vom 1ten bis zum Knotenpunkt 3/4', font_size=16))
            box_rohrlaenge3 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_rohrlaenge3)
            rohrlaenge3 = Slider(min = 0.0, max = 25.0, step = 0.1, value = 0.0)
            box_rohrlaenge3.add_widget(rohrlaenge3)
            self.rohrlaenge_anzeige3 = Label(text = '0.0' + ' m', font_size=16)
            box_rohrlaenge3.add_widget(self.rohrlaenge_anzeige3)
            rohrlaenge3.bind(value = self.rohrlaenge_angabe3)
            lst = ['8.8 mm (DN8)', '12.5 mm (DN10)', '16.0 mm (DN15)', '21.6 mm (DN20)', '27.2 mm (DN25)',
                   '35.9 mm (DN32)']
            grid_add.add_widget(Label(text = 'Rohrinnendurchmesser vom 1ten bis zum Knotenpunkt 3/4', font_size=16))
            box3 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box3)
            box_rohrdurchmesser3 = BoxLayout (orientation = 'vertical')
            box3.add_widget(box_rohrdurchmesser3)
            grid_buttons3 = GridLayout(cols=2)
            box_rohrdurchmesser3.add_widget(grid_buttons3)
            for txt in lst:
                button = Button(text= txt, on_release = self.on_push_durchmesser3, font_size = 12)
                grid_buttons3.add_widget(button)
            self.anzeige_auswahl3 = Label(text = '16.0 mm (DN15)', font_size=16)
            box3.add_widget(self.anzeige_auswahl3)
        button_zurueck = Button(text= "zurück zur Struktur des Heizkreises", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button= Button(text="Längen des Heizkreises festlegen und Heizkörper parametrisieren", background_color= (0.1,0.8,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck); grid_add.add_widget(button);

class Anlagenparametrisierung2_HK(Mixed_class):
    def leistungsangabe(self, instance, leistung):
        self.leistungen[str(instance)].text = str(leistung) + ' Watt'
    def __init__(self, *args, **kwargs):
        super(Anlagenparametrisierung2_HK, self).__init__(*args, **kwargs)
        self.app.eingaben['Anlagenparametrisierung2'] = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.our_layouts['Anlagenparametrisierung2'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.L_KOERPER.add_widget(self.our_layouts['Anlagenparametrisierung2']);self.current_layout='Anlagenparametrisierung2'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Anlagenparametrisierung2'].add_widget(grid_titel)
        titel = Label(text='Anlagenparametrisierung - Eingaben', font_size=30)
        grid_titel.add_widget(titel)
        lst = ["Heizkörper/Heizfläche", "Raum", "Normwärmeleistung - Empfehlung", "Normwärmeleistung - real"]
        grid_add = GridLayout(spacing=10, cols=4)
        self.our_layouts['Anlagenparametrisierung2'].add_widget(grid_add)
        for txt in lst:
            txt = Label(text=txt, font_size=20)
            grid_add.add_widget(txt)
        heizlast_ifc = ifcopenshell.open('Heizlast.ifc')
        ifc_system   = ifcopenshell.open('System.ifc')
        lasten = {}
        raeume       = heizlast_ifc.by_type('IfcSpace')
        for raum in raeume:
            for property_set in raum.IsDefinedBy:
                if  property_set.RelatingPropertyDefinition.Name == "Pset_Space":
                    last = round(property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue + property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue, 2)
                    lasten[raum.Name] = last
        heizkoerper  = ifc_system.by_type("IfcSpaceHeater")
        self.heizungen = {}
        self.leistungen = {}
        self.raumnamen = {}
        for heizung in heizkoerper:
            raumname = heizung.Name.split(' ')[1]
            heizungsname = heizung.Name.split(' ')[0]
            self.raumnamen[heizungsname] = raumname
            txt1 = Label(text=heizung.Name.split(' ')[0], font_size=20)
            txt2 = Label(text=raumname, font_size=20)
            txt3 = Label(text= str(lasten[raumname])+' Watt', font_size=20)
            grid_add.add_widget(txt1); grid_add.add_widget(txt2); grid_add.add_widget(txt3)
            box_eingabe = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_eingabe)
            #self.heizungen[heizungsname] = Slider(min = round(lasten[raumname],-1)/2, max = round(lasten[raumname],-1)*2, step = 5.0, value =round(lasten[raumname],-1) )
            self.heizungen[heizungsname] = Slider(min = 140, max = 1000, step = 5, value =round(lasten[raumname],-1) )
            box_eingabe.add_widget(self.heizungen[heizungsname])
            self.leistungen[str(self.heizungen[heizungsname])] = Label(text = str(1000)+' Watt', font_size=24)
            box_eingabe.add_widget(self.leistungen[str(self.heizungen[heizungsname])])
            self.heizungen[heizungsname].bind(value = self.leistungsangabe)

        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Anlagenparametrisierung2'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zur Rohrnetzbestimmung", background_color= (0.8,0.1,0,1), 
                                font_size=18, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_weiter= Button(text="Heizkörper festlegen", background_color= (0.1,0.8,0,1),
                                font_size=18, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_weiter)

class Anlagenparametrisierung3_HK(Mixed_class):    #Abfrage Rohrlängen zu Heizkorpern/Heizflächen 
    def laenge1angabe(self, instance, laenge1):
        self.laengen1[str(instance)].text = str(round(laenge1,1)) + ' m'  
    def laenge2angabe(self, instance, laenge2):
        self.laengen2[str(instance)].text = str(round(laenge2,1)) + ' m'
    def on_push_durchmesser(self, button):
        for daten in self.durchmesser:
            if str(button) in str(daten):
                self.durchmesser[daten].text = button.text
    def on_push_strang(self, button):
        for daten in self.straenge:
            if str(button) in str(daten):
                self.straenge[daten].text = button.text                
    def __init__(self, *args, **kwargs):
        super(Anlagenparametrisierung3_HK, self).__init__(*args, **kwargs)
        self.our_layouts['Anlagenparametrisierung3'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Anlagenparametrisierung3']);self.current_layout='Anlagenparametrisierung3'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        ifc_system = ifcopenshell.open("System.ifc")
        self.our_layouts['Anlagenparametrisierung3'].add_widget(grid_titel)
        titel = Label(text='Anlagenparametrisierung - Eingaben', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(spacing=10, cols=5, size_hint=[1.0, 0.7])
        self.our_layouts['Anlagenparametrisierung3'].add_widget(grid_add)
        txt1 = Label(text='Heizfläche', font_size=16)
        txt2 = Label(text='Rohrlänge Knoten bis T-Abzweigung', font_size=16)
        txt3 = Label(text='Rohrlänge T-Abzweigung bis Heizfläche', font_size=16)
        txt4 = Label(text='Rohrinnendurchmesser', font_size=16)
        txt5 = Label(text='Strangnummer', font_size=16)
        grid_add.add_widget(txt1); grid_add.add_widget(txt2); grid_add.add_widget(txt3)
        grid_add.add_widget(txt4); grid_add.add_widget(txt5)
        
        self.laengen1 = {}
        self.laengen1_s = {}
        self.laengen2 = {}
        self.laengen2_s = {}
        
        self.durchmesser = {}
        self.durchmesser_b = {}
        self.straenge = {}
        self.straenge_b = {}
                
        for element in ifc_system.by_type('IfcSpaceHeater'):
            txt = Label(text=element.Name, font_size=14) 
            grid_add.add_widget(txt)
            heizungsname = element.Name
            box_laenge1 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_laenge1)
            box_laenge2 = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_laenge2)
            box_durchmesser = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_durchmesser)
            box_strang = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_strang)
            self.laengen1_s[heizungsname] = Slider(min = 0.0, max = 10.0, step = 0.1, value = 0.0)
            box_laenge1.add_widget(self.laengen1_s[heizungsname])
            self.laengen1[str(self.laengen1_s[heizungsname])] = Label(text = '0.0 m', font_size=12)
            box_laenge1.add_widget(self.laengen1[str(self.laengen1_s[heizungsname])])
            self.laengen1_s[heizungsname].bind(value = self.laenge1angabe)
            self.laengen2_s[heizungsname] = Slider(min = 0.0, max = 5.0, step = 0.1, value = 0.0)
            box_laenge2.add_widget(self.laengen2_s[heizungsname])
            self.laengen2[str(self.laengen2_s[heizungsname])] = Label(text = '0.0 m', font_size=12)
            box_laenge2.add_widget(self.laengen2[str(self.laengen2_s[heizungsname])])
            self.laengen2_s[heizungsname].bind(value = self.laenge2angabe)                
            lst = ['8.8 mm (DN8)', '12.5 mm (DN10)', '16.0 mm (DN15)', '21.6 mm (DN20)', '27.2 mm (DN25)',
                       '35.9 mm (DN32)']
            box_rohrdurchmesser = BoxLayout (orientation = 'vertical')
            box_durchmesser.add_widget(box_rohrdurchmesser)
            grid_buttons = GridLayout(cols=2)
            box_rohrdurchmesser.add_widget(grid_buttons)
            liste = []
            for txt in lst:
                button = Button(text= txt, on_release = self.on_push_durchmesser, font_size = 9)
                grid_buttons.add_widget(button)
                liste.append(button)
            self.durchmesser_b[heizungsname] = liste
            self.durchmesser[str(self.durchmesser_b[heizungsname])] = Label(text = '16.0 mm (DN15)', font_size=12)
            box_durchmesser.add_widget(self.durchmesser[str(self.durchmesser_b[heizungsname])])
            if int(self.app.heizkreis_hk) == 1:
                self.strang = Label(text = '1', font_size = 12)
                box_strang.add_widget(self.strang)
            elif int(self.app.heizkreis_hk) == 2:
                lst = ['1', '2']
                box_buttons = BoxLayout (orientation = 'horizontal')
                box_strang.add_widget(box_buttons)
                liste = []
                for txt in lst:
                    button = Button(text= txt, on_release = self.on_push_strang, font_size = 9)
                    box_buttons.add_widget(button)
                    liste.append(button)
                self.straenge_b[heizungsname] = liste
                self.straenge[str(self.straenge_b[heizungsname])] = Label(text = '1', font_size=12)
                box_strang.add_widget(self.straenge[str(self.straenge_b[heizungsname])])
            elif int(self.app.heizkreis_hk) == 3:
                lst = ['1', '2', '3']
                box_buttons = BoxLayout (orientation = 'horizontal')
                box_strang.add_widget(box_buttons)
                liste = []
                for txt in lst:
                    button = Button(text= txt, on_release = self.on_push_strang, font_size = 9)
                    box_buttons.add_widget(button)
                    liste.append(button)
                self.straenge_b[heizungsname] = liste
                self.straenge[str(self.straenge_b[heizungsname])] = Label(text = '1', font_size=12)
                box_strang.add_widget(self.straenge[str(self.straenge_b[heizungsname])])  
            elif int(self.app.heizkreis_hk) == 4:
                lst = ['1', '2', '3', '4']
                box_buttons = BoxLayout (orientation = 'horizontal')
                box_strang.add_widget(box_buttons)
                liste = []
                for txt in lst:
                    button = Button(text= txt, on_release = self.on_push_strang, font_size = 9)
                    box_buttons.add_widget(button)
                    liste.append(button)
                self.straenge_b[heizungsname] = liste
                self.straenge[str(self.straenge_b[heizungsname])] = Label(text = '1', font_size=12)
                box_strang.add_widget(self.straenge[str(self.straenge_b[heizungsname])])                
            else:
                pass
        grid_add1 = GridLayout(spacing= 10, cols=2, size_hint=[1.0, 0.15])
        self.our_layouts['Anlagenparametrisierung3'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zur Auslegung der Heizfkörper", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button= Button(text="Rohrlängen und -dimensionen bestimmen und Parametrisierung fertigstellen", background_color= (0.1,0.8,0,1), font_size=16, on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button);



#Automatischer hydraulischer Abgleich
class Auto_Abgleich(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Auto_Abgleich, self).__init__(*args, **kwargs)
        self.our_layouts['Auto_Abgleich'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Auto_Abgleich']);self.current_layout='Auto_Abgleich'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Auto_Abgleich'].add_widget(grid_titel)
        titel = Label(text='Automatischer hydraulischer Abgleich', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(cols=1)
        self.our_layouts['Auto_Abgleich'].add_widget(grid_add)
        button_auto = Button(text="Hydraulischer Abgleich der erfassten Anlage (komplex)", on_release=self.switch_layout)
        button_auto2 = Button(text="Hydraulischer Abgleich der erfassten Anlage (vereinfacht)", on_release=self.switch_layout)
        button_manuell = Button(text="Hydraulischer Abgleich einer nicht in IFC erfassten Anlage durch Eingaben", on_release=self.switch_layout)
        button_zurueck = Button(text= "zurück zum Menü der Datenerfassung", on_release=self.switch_layout)
        grid_add.add_widget(button_auto); grid_add.add_widget(button_auto2); grid_add.add_widget(button_manuell);
        grid_add.add_widget(button_zurueck)

#Erfasste Anlage
class Abgleich_Anlage2(Mixed_class):      #Übersicht Temperaturen und Leistungen > Update
    def __init__(self, *args, **kwargs):
        super(Abgleich_Anlage2, self).__init__(*args, **kwargs)
        self.our_layouts['Abgleich_Anlage2'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Abgleich_Anlage2']);self.current_layout='Abgleich_Anlage2'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Abgleich_Anlage2'].add_widget(grid_titel)
        titel = Label(text='Automatischer hydraulischer Abgleich', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(spacing=10, cols=3)
        self.our_layouts['Abgleich_Anlage2'].add_widget(grid_add)
        ifc_system = ifcopenshell.open('System.ifc')
        system = ifc_system.by_type("IfcBuilding")[0]
        for property_set in system.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                vorlauftemperatur   = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                ruecklauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_System":
                vorlauftemperatur   = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                ruecklauftemperatur = property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
        text0 = Label(text='Beschreibung', font_size=18)
        text1 = Label(text='Aktueller Wert', font_size=18)
        text2 = Label(text='Änderung', font_size=18)
        grid_add.add_widget(text0), grid_add.add_widget(text1), grid_add.add_widget(text2)
        
        self.imps = []
        txt1 = Label(text='Vorlauftemperatur', font_size=16)
        txt2 = Label(text=str(vorlauftemperatur), font_size=16)
        inp1 = TextInput(hint_text= '[°C]')
        grid_add.add_widget(txt1), grid_add.add_widget(txt2) # Titles
        grid_add.add_widget(inp1) # Inputs
        self.imps.append( (txt1, txt2, inp1) )
        
        txt3 = Label(text='Rücklauftemperatur', font_size=16)
        txt4 = Label(text=str(ruecklauftemperatur), font_size=16)
        inp2 = TextInput(hint_text= '[°C]')
        grid_add.add_widget(txt3), grid_add.add_widget(txt4) # Titles
        grid_add.add_widget(inp2) # Inputs
        self.imps.append( (txt3, txt4, inp2) )
        
        grid_add1 = GridLayout(spacing= 10, cols=2, size_hint=(1.0, 0.2))
        self.our_layouts['Abgleich_Anlage2'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zur Auswahl des Abgleichs", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button= Button(text="Temperaturen festlegen und Berechnung durchführen", background_color= (0.1,0.8,0,1), font_size=16, on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button);

class Abgleich_Anlage3(Mixed_class):      #Ergebnisse anzeigen
    def __init__(self, *args, **kwargs):
        super(Abgleich_Anlage3, self).__init__(*args, **kwargs)
        self.our_layouts['Abgleich_Anlage3'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Abgleich_Anlage3']);self.current_layout='Abgleich_Anlage3'
        grid_add = GridLayout(cols=1, size_hint=[1.0, 0.9])
        self.our_layouts['Abgleich_Anlage3'].add_widget(grid_add)
        titel = Label(text='Ergebnisse des hydraulischen Abgleichs', font_size=30,size_hint=[1.0, 0.1])
        grid_add.add_widget(titel)
        abgleich = Image(source='Abgleich.png', keep_ratio= False, size_hint=[1.0, 0.8])
        grid_add.add_widget(abgleich)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.1])
        self.our_layouts['Abgleich_Anlage3'].add_widget(grid_add1)
        pumpe = Image(source='Pumpe.png', keep_ratio= False, size_hint=[1.0, 0.8])
        grid_add1.add_widget(pumpe)
        button_zurueck = Button(text= "zurück zum Hauptmenü", on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck)

class Abgleich_vereinfacht_HK(Mixed_class):
    def druck_angabe(self, instance, druck):
        self.druck_anzeige.text =  str(round(druck, 2)) + ' mbar'
    def druck1_angabe(self, instance, druck1):
        self.druck1_anzeige.text =  str(round(druck1, 2)) + ' mbar'
    def __init__(self, *args, **kwargs):
        super(Abgleich_vereinfacht_HK, self).__init__(*args, **kwargs)
        self.building = ifc_file.by_type("IfcBuilding")
        self.our_layouts['Abgleich_vereinfacht_HK'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Abgleich_vereinfacht_HK']);self.current_layout='Abgleich_vereinfacht_HK'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Abgleich_vereinfacht_HK'].add_widget(grid_titel)
        titel = Label(text='Eingaben hydraulischer Abgleich vereinfacht', font_size=30)
        grid_titel.add_widget(titel)
        
        grid_add = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.7])
        self.our_layouts['Abgleich_vereinfacht_HK'].add_widget(grid_add)
        grid_add.add_widget(Label(text = 'Maximaler Druckverlust Verteilung', font_size=24))
        box_druck = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_druck)
        druck = Slider(min = 0, max = 300, step = 10, value = 30)
        box_druck.add_widget(druck)
        self.druck_anzeige = Label(text = '30' + ' mbar', font_size=24)
        box_druck.add_widget(self.druck_anzeige)
        druck.bind(value = self.druck_angabe)
        
        grid_add.add_widget(Label(text = 'Druckverlust Ventile', font_size=24))
        box_druck1 = BoxLayout (orientation = 'horizontal')
        grid_add.add_widget(box_druck1)
        druck1 = Slider(min = 0, max = 200, step = 10, value = 30)
        box_druck1.add_widget(druck1)
        self.druck1_anzeige = Label(text = '50' + ' mbar', font_size=24)
        box_druck1.add_widget(self.druck1_anzeige)
        druck1.bind(value = self.druck1_angabe)

        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.15])
        self.our_layouts['Abgleich_vereinfacht_HK'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zur Auswahl des hydraulischen Abgleichs", background_color= (0.8,0.1,0,1), 
                                font_size=20, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button= Button(text="Berechnung des vereinfachten hydraulischen Abgleichs", background_color= (0.1,0.8,0,1), font_size=20, on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck); grid_add.add_widget(button);

class Abgleich_vereinfacht_HK2(Mixed_class):      #Ergebnisse anzeigen
    def __init__(self, *args, **kwargs):
        super(Abgleich_vereinfacht_HK2, self).__init__(*args, **kwargs)
        self.our_layouts['Abgleich_vereinfacht_HK2'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Abgleich_vereinfacht_HK2']);self.current_layout='Abgleich_vereinfacht_HK2'
        grid_add = GridLayout(cols=1, size_hint=[1.0, 0.9])
        self.our_layouts['Abgleich_vereinfacht_HK2'].add_widget(grid_add)
        titel = Label(text='Ergebnisse des hydraulischen Abgleichs', font_size=30,size_hint=[1.0, 0.1])
        grid_add.add_widget(titel)
        abgleich = Image(source='Abgleich_vereinfacht.png', keep_ratio= False, size_hint=[1.0, 0.8])
        grid_add.add_widget(abgleich)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.1])
        self.our_layouts['Abgleich_vereinfacht_HK2'].add_widget(grid_add1)
        pumpe = Image(source='Pumpe_vereinfacht.png', keep_ratio= False, size_hint=[1.0, 0.8])
        grid_add1.add_widget(pumpe)
        button_zurueck = Button(text= "zurück zum Hauptmenü", on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck)



#Manuelle Eingabe nicht erfasste Anlage
class Nicht_erfasst(Mixed_class):    
    def __init__(self, *args, **kwargs):
        super(Nicht_erfasst, self).__init__(*args, **kwargs)
        self.our_layouts['Nicht_erfasst'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Nicht_erfasst']);self.current_layout='Nicht_erfasst'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Nicht_erfasst'].add_widget(grid_titel)
        titel = Label(text='Hydraulischer Abgleich nicht einer nicht erfassten Anlage', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(cols=1)
        self.our_layouts['Nicht_erfasst'].add_widget(grid_add)
        button_fb = Button(text="Hydraulischer Abgleich Fußbodenheizungssystem", on_release=self.switch_layout)
        button_hk = Button(text="Hydraulischer Abgleich Heizkörpersystem", on_release=self.switch_layout)
        button_zurueck = Button(text= "zurück zur Auswahl des Abgleichs", on_release=self.switch_layout)
        grid_add.add_widget(button_fb); grid_add.add_widget(button_hk);
        grid_add.add_widget(button_zurueck)


class Heizkoerper_eingeben_fb(Mixed_class):
    def heizkoerper_append(self, button): self.__heizkoerper_append()# add a room to the stack
    def __heizkoerper_append(self, update=False):   # update or add a room to the stack
        heizkoerper_data = {}
        for txt, txt2, imp, imp2 in self.imps:
            if update: imp = imp2 # use the updating stuff ...
            if txt.text == 'Heizkörpername':
                heizkoerper_name=imp.text
            heizkoerper_data[txt.text] = imp.text
            imp.text=''
        self.app.eingaben['Heizkoerper'][heizkoerper_name] = heizkoerper_data
        if update: return
        self.app.eingaben['Heizkoerper'][heizkoerper_name]["TabButton"] = Button(text=heizkoerper_name, 
            on_release=self.switch_layout, size_hint_x=None, font_size=12)                       
        self.L_REITER.add_widget(self.app.eingaben['Heizkoerper'][heizkoerper_name]["TabButton"])
    def heizkoerper_cancel(self, button=None):
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Heizkoerper hinzufügen'])
        self.current_layout = 'Heizkoerper hinzufügen'
    def heizkoerper_delete(self, button):  ### remove a room from the stack
        self.L_REITER.remove_widget(#   remove the TabButton
            self.app.eingaben['Heizkoerper'][self.current_layout]["TabButton"])
        del self.app.eingaben['Heizkoerper'][self.current_layout]# remove the data set
        self.heizkoerper_cancel()# get us to the startscreen
    def heizkoerper_update(self, button):  ### update heizkörper
        tab_button = self.app.eingaben['Heizkoerper'][self.current_layout]["TabButton"]
        for txt, txt2, imp, imp2 in self.imps:
            if txt.text == 'Heizkörpername':
                heizkoerper_name=imp2.text; break
        #self.room_delete(None)# room_delete doesn't need a button
        del self.app.eingaben['Heizkoerper'][self.current_layout]
        self.heizkoerper_cancel()# get us to the startscreen
        self.__heizkoerper_append(True)
        self.app.eingaben['Heizkoerper'][heizkoerper_name]["TabButton"] = tab_button
        tab_button.text = heizkoerper_name
    def __init__(self, *args, **kwargs):
        super(Heizkoerper_eingeben_fb, self).__init__(*args, **kwargs)
        self.app.eingaben['Heizkoerper'] = {} # eingaben des raums
        self.nmin = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_REITER = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_BASIS.add_widget(self.L_REITER); self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_REITER.add_widget(Button(text='Heizkörper hinzufügen', size_hint_x=None, font_size=10,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.our_layouts[   'Heizkoerper hinzufügen'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.our_layouts['Modify Heizkoerper'] = BoxLayout(spacing=10, orientation='vertical')# Layout 2
        self.L_KOERPER.add_widget(self.our_layouts['Heizkoerper hinzufügen']);self.current_layout='Heizkoerper hinzufügen'
        head_mod = BoxLayout(orientation='horizontal', height=15, size_hint_y=None)
        self.our_layouts['Modify Heizkoerper'].add_widget( head_mod)
        head_mod.add_widget(Label(text="Angepasst wird"))
        head_mod.add_widget(Label(text="Dummy-Raum"))
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts[   'Heizkoerper hinzufügen'].add_widget(grid_titel)
        titel = Label(text='Heizkörper und Heizflächen hinzufügen', font_size=30)
        grid_titel.add_widget(titel)
        lst = ["Heizkörpername", "Vorlauftemperatur", "Rücklauftemperatur", 
               "Notwendige Leistung","Rohrlänge bis zum Heizkörper", "Rohrinnendurchmesser", "Thermostatventil vorhanden?", 'Auslegungsproportionalbereich']
        lst2 = ["Text", "°C", "°C", "Watt", "m", "mm", "ja: 1, nein: 2", 'aktuell 1 K; bei Änderungswunsch Angabe in [K]']
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts[   'Heizkoerper hinzufügen'].add_widget(grid_add)
        grid_mod = GridLayout(spacing=10, cols=2)#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Heizkoerper'].add_widget(grid_mod)
        self.imps = []
        i = 0
        for txt in lst:
            txt, txt2 = Label(text=txt, font_size=24), Label(text=txt, font_size=24)
            inp, inp2 = TextInput(hint_text= lst2[i]), TextInput(hint_text=lst2[i])
            self.imps.append( (txt, txt2, inp, inp2) )
            grid_add.add_widget(txt); grid_mod.add_widget(txt2) # Titles
            grid_add.add_widget(inp); grid_mod.add_widget(inp2) # Inputs
            i = i +1
        btn_add = Button(text='Heizkörper hinzufügen', size_hint=(0.5,0.2),
            on_press=self.heizkoerper_append)
        self.our_layouts['Heizkoerper hinzufügen'].add_widget(btn_add)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts[   'Heizkoerper hinzufügen'].add_widget(grid_add1)
        button_zurueck = Button(text= "Zurück zur Auswahl des Systems", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_waende= Button(text="Hydraulischen Abgleich berechnen - FBH", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_waende)
        grid_mod.add_widget( Button(text="Delete", on_release=self.heizkoerper_delete))
        grid_mod.add_widget( Button(text="Update", on_release=self.heizkoerper_update))
        grid_mod.add_widget( Button(text="Cancel", on_release=self.heizkoerper_cancel))



class Heizkreise_eingeben(Mixed_class):
    def heizkreise_append(self, button): self.__heizkreise_append()# add a room to the stack
    def __heizkreise_append(self, update=False):   # update or add a room to the stack
        heizkreis_data = {}
        for txt, txt2, imp, imp2 in self.imps:
            if update: imp = imp2 # use the updating stuff ...
            if txt.text == 'Heizkreisname':
                heizkreis_name=imp.text
            heizkreis_data[txt.text] = imp.text
            imp.text=''
        self.app.eingaben['Heizkreis'][heizkreis_name] = heizkreis_data
        if update: return
        self.app.eingaben['Heizkreis'][heizkreis_name]["TabButton"] = Button(text=heizkreis_name, 
            on_release=self.switch_layout, size_hint_x=None, font_size=12)                       
        self.L_REITER.add_widget(self.app.eingaben['Heizkreis'][heizkreis_name]["TabButton"])
    def heizkreise_cancel(self, button=None):
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Heizkreis hinzufügen'])
        self.current_layout = 'Heizkreis hinzufügen'
    def heizkreise_delete(self, button):  ### remove a room from the stack
        self.L_REITER.remove_widget(#   remove the TabButton
            self.app.eingaben['Heizkreis'][self.current_layout]["TabButton"])
        del self.app.eingaben['Heizkreis'][self.current_layout]# remove the data set
        self.heizkreise_cancel()# get us to the startscreen
    def heizkreise_update(self, button):  ### update heizkörper
        tab_button = self.app.eingaben['Heizkreis'][self.current_layout]["TabButton"]
        for txt, txt2, imp, imp2 in self.imps:
            if txt.text == 'Heizkreisname':
                heizkreis_name=imp2.text; break
        #self.room_delete(None)# room_delete doesn't need a button
        del self.app.eingaben['Heizkreis'][self.current_layout]
        self.heizkreise_cancel()# get us to the startscreen
        self.__heizkreise_append(True)
        self.app.eingaben['Heizkreis'][heizkreis_name]["TabButton"] = tab_button
        tab_button.text = heizkreis_name
    def __init__(self, *args, **kwargs):
        super(Heizkreise_eingeben, self).__init__(*args, **kwargs)
        self.app.eingaben['Heizkreis'] = {} # eingaben des raums
        self.nmin = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_REITER = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_BASIS.add_widget(self.L_REITER); self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_REITER.add_widget(Button(text='Heizkreis hinzufügen', size_hint_x=None, font_size=10,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.our_layouts[   'Heizkreis hinzufügen'] = BoxLayout(spacing=10, orientation='vertical')# Layout 1
        self.our_layouts['Modify Heizkreis'] = BoxLayout(spacing=10, orientation='vertical')# Layout 2
        self.L_KOERPER.add_widget(self.our_layouts['Heizkreis hinzufügen']);self.current_layout='Heizkreis hinzufügen'
        head_mod = BoxLayout(orientation='horizontal', height=15, size_hint_y=None)
        self.our_layouts['Modify Heizkreis'].add_widget( head_mod)
        head_mod.add_widget(Label(text="Angepasst wird"))
        head_mod.add_widget(Label(text="Dummy-Raum"))
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts[   'Heizkreis hinzufügen'].add_widget(grid_titel)
        titel = Label(text='Heizkreise hinzufügen', font_size=30)
        grid_titel.add_widget(titel)
        grid_add_b = GridLayout(spacing=10, cols=4, size_hint=[1.0, 0.15])
        self.our_layouts[   'Heizkreis hinzufügen'].add_widget(grid_add_b)
        grid_add_b2 = GridLayout(spacing=10, cols=4, size_hint=[1.0, 0.15])
        self.our_layouts['Modify Heizkreis'].add_widget(grid_add_b2)
        
        lst = ['1', '2', '3', '4']
        for text in lst:
            txt, txt2 = Label(text=text, font_size=24), Label(text=text, font_size=24)
            grid_add_b.add_widget(txt); grid_add_b2.add_widget(txt2);
        
        grid_add_b_bilder = GridLayout(spacing=10, cols=4)
        self.our_layouts[   'Heizkreis hinzufügen'].add_widget(grid_add_b_bilder)
        grid_add_b_bilder2 = GridLayout(spacing=10, cols=4)
        self.our_layouts['Modify Heizkreis'].add_widget(grid_add_b_bilder2)
        
        lst2 = ['Struktur1.PNG', 'Struktur2.PNG','Struktur3.PNG','Struktur5.PNG']
        for txt in lst2: 
            struktur, struktur2 = Image(source=txt), Image(source=txt)
            grid_add_b_bilder.add_widget(struktur); grid_add_b_bilder2.add_widget(struktur2)
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts[   'Heizkreis hinzufügen'].add_widget(grid_add)
        grid_mod = GridLayout(spacing=10, cols=2)#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Heizkreis'].add_widget(grid_mod)
        liste = ['Heizkreisname', 'Wie ist der Heizkreis aufgebaut?']
        liste_a = ['Text', 'Zahl der passenden Struktur eingeben']
        self.imps = []
        i = 0
        for txt in liste:
            txt, txt2 = Label(text=txt, font_size=24), Label(text=txt, font_size=24)
            inp, inp2 = TextInput(hint_text= liste_a[i]), TextInput(hint_text=liste_a[i])
            self.imps.append( (txt, txt2, inp, inp2) )
            grid_add.add_widget(txt); grid_mod.add_widget(txt2) # Titles
            grid_add.add_widget(inp); grid_mod.add_widget(inp2) # Inputs
            i = i +1
        btn_add = Button(text='Heizkreis hinzufügen', size_hint=(0.5,0.2),
            on_press=self.heizkreise_append)
        self.our_layouts['Heizkreis hinzufügen'].add_widget(btn_add)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts[   'Heizkreis hinzufügen'].add_widget(grid_add1) 
        button_zurueck = Button(text= "Zurück zur Auswahl des Systems", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_heizung= Button(text="Längen der Stränge festlegen und Heizkörper hinzufügen", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_heizung)
        grid_mod.add_widget( Button(text="Delete", on_release=self.heizkreise_delete))
        grid_mod.add_widget( Button(text="Update", on_release=self.heizkreise_update))
        grid_mod.add_widget( Button(text="Cancel", on_release=self.heizkreise_cancel))


class Rohrnetzstruktur(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Rohrnetzstruktur, self).__init__(*args, **kwargs)
        self.building = ifc_file.by_type("IfcBuilding")
        self.our_layouts['Rohrnetzstruktur'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Rohrnetzstruktur']);self.current_layout='Rohrnetzstruktur'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Rohrnetzstruktur'].add_widget(grid_titel)
        titel = Label(text='Rohrnetzbestimmung - Baumstruktur', font_size=30)
        grid_titel.add_widget(titel)
        for heizkreis in self.app.eingaben['Heizkreis']:
            if int(self.app.eingaben['Heizkreis'][heizkreis]['Wie ist der Heizkreis aufgebaut?']) == 2:
                bild = 'Struktur2.PNG'
                lst = ["Rohrlänge bis zum Knotenpunkt", "Rohrinnendurchmesser bis zum Knotenpunkt"]
                lst2 = ["m", "mm"]
            elif int(self.app.eingaben['Heizkreis'][heizkreis]['Wie ist der Heizkreis aufgebaut?']) == 3:
                bild = 'Struktur3.PNG'
                lst = ["Rohrlänge bis zum ersten Knotenpunkt", "Rohrinnendurchmesser bis zum ersten Knotenpunkt",
                       "Rohrlänge vom 1ten bis zum 2ten Knotenpunkt", "Rohrinnendurchmesser vom 1ten bis zum 2ten Knotenpunkt"]
                lst2 = ["m", "mm", 'm', 'mm']
            elif int(self.app.eingaben['Heizkreis'][heizkreis]['Wie ist der Heizkreis aufgebaut?']) == 4:
                bild = 'Struktur5.PNG'
                lst = ["Rohrlänge bis zum ersten Knotenpunkt", "Rohrinnendurchmesser bis zum ersten Knotenpunkt",
                       "Rohrlänge vom 1ten bis zum Knotenpunkt (Strang1/2)", "Rohrinnendurchmesser vom 1ten bis zum Knotenpunkt (Strang1/2)",
                       "Rohrlänge vom 1ten bis zum Knotenpunkt (Strang3/4)", "Rohrinnendurchmesser vom 1ten bis zum Knotenpunkt (Strang3/4)"]
                lst2 = ["m", "mm", 'm', 'mm', 'm', 'mm']
        grid_add_b_bilder = GridLayout(spacing=10, cols=1)
        self.our_layouts['Rohrnetzstruktur'].add_widget(grid_add_b_bilder)
        struktur = Image(source=bild)
        grid_add_b_bilder.add_widget(struktur)
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['Rohrnetzstruktur'].add_widget(grid_add)
        self.imps = []
        i = 0
        for txt in lst:
            txt = Label(text=txt, font_size=16) 
            inp = TextInput(hint_text= lst2[i])
            self.imps.append( (txt, inp) )
            grid_add.add_widget(txt) # Titles
            grid_add.add_widget(inp) # Inputs
            i = i +1
        button_zurueck = Button(text= "zurück zum Heizkreis", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button= Button(text="Längen des Rohrnetzes festlegen und Heizkörper hinzufügen", background_color= (0.1,0.8,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck); grid_add.add_widget(button);


class Heizkoerper_eingeben(Mixed_class):
    def heizkoerper_append(self, button): self.__heizkoerper_append()
    def __heizkoerper_append(self, update=False):
        heizkoerper_data = {}
        for txt, txt2, imp, imp2 in self.imps:
            if update: imp = imp2 # use the updating stuff ...
            if txt.text == 'Heizkörpername':
                heizkoerper_name=imp.text
            heizkoerper_data[txt.text] = imp.text
            imp.text=''
        heizkoerper_data['Name'] = self.current_heizkreis + '-' + heizkoerper_name
        heizkoerper_data['Heizkreisname'] = self.current_heizkreis
        self.heizkoerperliste.append(heizkoerper_data)
        if "Heizkoerper" not in self.app.eingaben['Heizkreis'][self.current_heizkreis]:
            self.app.eingaben['Heizkreis'][self.current_heizkreis]["Heizkoerper"] = {}
        self.app.eingaben['Heizkreis'][self.current_heizkreis]["Heizkoerper"][heizkoerper_name] = heizkoerper_data
        for name in self.app.eingaben['Heizkreis'][self.current_heizkreis]['Heizkoerper']:
            self.app.heizkoerper_eingegeben[name] = self.current_heizkreis
        self.app.eingaben['Heizkreis'][self.current_heizkreis]['Heizkoerper'][heizkoerper_name]["TabButton"] = Button(text=heizkoerper_name,
            on_release=self.heizkoerper_setting, size_hint_x=None, font_size=12, height=75, size_hint_y=None)
        self.L_Leiste.add_widget(self.app.eingaben['Heizkreis'][self.current_heizkreis]['Heizkoerper'][heizkoerper_name]["TabButton"]) 
    def heizkoerper_cancel(self, button=None):
        self.L_KOERPER.clear_widgets()
        self.L_KOERPER.add_widget(self.our_layouts['Heizkoerper hinzufügen'])
        self.current_layout = 'Heizkoerper hinzufügen'
    def heizkoerper_delete(self, button):  ### remove a room from the stack   
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Heizkreis'][self.current_heizkreis]["Heizkoerper"][self.current_heizkoerper]["TabButton"])
        del self.app.eingaben['Heizkreis'][self.current_heizkreis]["Heizkorper"][self.current_heizkoerper]["TabButton"]# remove the data set
        self.heizkoerper_cancel()# get us to the startscreen
    def heizkoerper_update(self, button):  ### update heizkörper
        self.L_Leiste.remove_widget(#   remove the TabButton
            self.app.eingaben['Heizkreis'][self.current_heizkreis]["Heizkoerper"][self.current_heizkoerper]["TabButton"])
        tab_button = self.app.eingaben['Heizkreis'][self.current_heizkreis]["Heizkoerper"][self.current_heizkoerper]["TabButton"]
        for txt, txt2, imp, imp2 in self.imps:
            if txt.text == 'Heizkörpername':
                heizkoerper_name=imp2.text; break
        del self.app.eingaben['Heizkreis'][self.current_heizkreis]["Heizkoerper"][self.current_heizkoerper]
        self.heizkoerper_cancel()# get us to the startscreen
        self.__heizkoerper_append(True)
        self.app.eingaben['Heizkreis'][self.current_heizkreis]["Heizkoerper"][self.current_heizkoerper]["TabButton"] = tab_button
        tab_button.text = heizkoerper_name
    def set_heizkreis(self, button):
        self.L_Leiste.clear_widgets()
        self.L_Leiste.add_widget(Button(text='Heizkoerper hinzufügen', size_hint_x=None, font_size=12,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.current_heizkreis = button.text
        heizkoerper = self.app.eingaben['Heizkreis'][button.text].get('Heizkoerper', {})
        for heizung in heizkoerper:
            heizung_data = heizkoerper[heizung]
            self.L_Leiste.add_widget(heizung_data["TabButton"])
            for txt, txt2, imp, imp2 in self.imps:
                imp.text = ''
        self.L_KOERPER.clear_widgets()
    def __init__(self, *args, **kwargs):
        super(Heizkoerper_eingeben, self).__init__(*args, **kwargs)
        self.eingaben   = {} # hier heben wir die eingaben auf.
        self.app.eingaben['Heizkoerper'] = {}
        self.heizkoerperliste = [] #kommen die Wände rein
        self.current_heizkreis = self.app.defined_heizkreise[0]
        self.nmin = {}
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_BOX= BoxLayout(spacing=2, orientation='horizontal')
        self.L_Leiste= BoxLayout(spacing=2, orientation='vertical', width = 150, size_hint_x=None)
        #
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BOX.add_widget(self.L_KOERPER)
        self.L_BOX.add_widget(self.L_Leiste)
        self.L_REITER = BoxLayout(spacing=2, orientation='horizontal', height=30,
            size_hint_y=None)
        self.L_BASIS.add_widget(self.L_REITER); self.L_BASIS.add_widget(self.L_BOX)
        for heizkreis_name in self.app.defined_heizkreise:
            self.L_REITER.add_widget(Button(text=heizkreis_name, on_release=self.set_heizkreis))
        self.L_Leiste.add_widget(Button(text='Heizkoerper hinzufügen', size_hint_x=None, font_size=12, height=75, size_hint_y=None,
            on_press=self.switch_layout))# versuch layout zu laden (anhand des namens)
        self.our_layouts['Heizkoerper hinzufügen'] = BoxLayout(spacing=10, orientation='vertical')
        self.our_layouts['Modify Heizkoerper'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_KOERPER.add_widget(self.our_layouts['Heizkoerper hinzufügen']);self.current_layout='Heizkoerper hinzufügen'
        head_mod = BoxLayout(orientation='horizontal', height=15, size_hint_y=None)
        self.our_layouts['Modify Heizkoerper'].add_widget( head_mod)
        head_mod.add_widget(Label(text="Angepasst wird"))
        head_mod.add_widget(Label(text="Dummy-Raum"))
        grid_titel = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.15])
        self.our_layouts[   'Heizkoerper hinzufügen'].add_widget(grid_titel)
        titel = Label(text='Heizkörper und Heizflächen hinzufügen', font_size=30)
        grid_titel.add_widget(titel)
        lst = ["Heizkörpername", "Vorlauftemperatur", "Rücklauftemperatur", 
               "Notwendige Leistung","Strangnummer", "Rohrlänge vom Strangbeginn bis zum Heizkörper", "Rohrinnendurchmesser Strang", "Thermostatventil vorhanden?", 'Auslegungsproportionalbereich']
        lst2 = ["Text", "°C", "°C", "Watt","Nummer", "m", "mm", "ja: 1, nein: 2", 'K']
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts[   'Heizkoerper hinzufügen'].add_widget(grid_add)
        grid_mod = GridLayout(spacing=10, cols=2)#rows=len(lst))#, cols=len(self.imps))
        self.our_layouts['Modify Heizkoerper'].add_widget(grid_mod)
        self.imps = []
        i = 0
        for txt in lst:
            txt, txt2 = Label(text=txt, font_size=16), Label(text=txt, font_size=16)
            inp, inp2 = TextInput(hint_text= lst2[i]), TextInput(hint_text=lst2[i])
            self.imps.append( (txt, txt2, inp, inp2) )
            grid_add.add_widget(txt); grid_mod.add_widget(txt2) # Titles
            grid_add.add_widget(inp); grid_mod.add_widget(inp2) # Inputs
            i = i +1
        grid_add_struktur = GridLayout(spacing=10, cols=2, size_hint=(1.0,0.15))
        self.our_layouts[   'Heizkoerper hinzufügen'].add_widget(grid_add_struktur)
        btn_add = Button(text='Heizkoerper hinzufügen',
            on_press=self.heizkoerper_append)
        grid_add_struktur.add_widget(btn_add)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts[   'Heizkoerper hinzufügen'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zur Dimensionierung des Heizkreises", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_heizkoerper= Button(text="Hydraulischen Abgleich berechnen", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_heizkoerper)
        grid_mod.add_widget( Button(text="Delete", on_release=self.heizkoerper_delete))
        grid_mod.add_widget( Button(text="Update", on_release=self.heizkoerper_update))
        grid_mod.add_widget( Button(text="Cancel", on_release=self.heizkoerper_cancel))




class Ergebnisse_Manu(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Ergebnisse_Manu, self).__init__(*args, **kwargs)
        self.our_layouts['Ergebnisse_Manu'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Ergebnisse_Manu']);self.current_layout='Ergebnisse_Manu'
        grid_add = GridLayout(cols=1, size_hint=[1.0, 0.9])
        self.our_layouts['Ergebnisse_Manu'].add_widget(grid_add)
        titel = Label(text='Ergebnisse des hydraulischen Abgleichs', font_size=30,size_hint=[1.0, 0.1])
        grid_add.add_widget(titel)
        abgleich = Image(source='Abgleich.png', keep_ratio= False, size_hint=[1.0, 0.8])
        grid_add.add_widget(abgleich)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.1])
        self.our_layouts['Ergebnisse_Manu'].add_widget(grid_add1)
        pumpe = Image(source='Pumpe.png', keep_ratio= False, size_hint=[1.0, 0.8])
        grid_add1.add_widget(pumpe)
        button_zurueck = Button(text= "zurück zum Hauptmenü", on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck)



#Datenabruf
class Datenabruf(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Datenabruf, self).__init__(*args, **kwargs)
        self.our_layouts['Datenabruf'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Datenabruf']);self.current_layout='Struktur_Heizung'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Datenabruf'].add_widget(grid_add)
        button_schema = Button(text="Gebäude- und Raumdaten", on_release=self.switch_layout)
        button_heizkreis = Button(text="Daten der Heizungsanlage", on_release=self.switch_layout)
        button_zurueck = Button(text= "zurück zur Analyseübersicht", on_release=self.switch_layout)
        grid_add.add_widget(button_schema); grid_add.add_widget(button_heizkreis);
        grid_add.add_widget(button_zurueck)

#Datenabruf Gebäude und Räume
class Datenabruf_Gebaeude(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Datenabruf_Gebaeude, self).__init__(*args, **kwargs)
        self.our_layouts['Daten_Ergebnisse'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Daten_Ergebnisse']);self.current_layout='Daten_Ergebnisse'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Daten_Ergebnisse'].add_widget(grid_add)
        button_gebaeude = Button(text="Gebäudedaten", on_release=self.switch_layout)
        button_raeume = Button(text="Raumdaten", on_release=self.switch_layout)
        button_zurueck = Button(text= "zurück zur Übersicht", on_release=self.switch_layout)
        grid_add.add_widget(button_gebaeude); grid_add.add_widget(button_raeume); grid_add.add_widget(button_zurueck)

class Gebaeudedaten(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Gebaeudedaten, self).__init__(*args, **kwargs)
        
        self.building = ifc_file.by_type("IfcBuilding")
        self.our_layouts['Gebaeude_Ergebnisse'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Gebaeude_Ergebnisse']);self.current_layout='Gebaeude_Ergebnisse'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Gebaeude_Ergebnisse'].add_widget(grid_titel)
        titel = Label(text='Gebäudedaten', font_size=30)
        grid_titel.add_widget(titel)
        #outline_width=2, outline_color=[0.2]*4, # Glow/Schatten # Label
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['Gebaeude_Ergebnisse'].add_widget(grid_add)
        ifc_last = ifcopenshell.open('Heizlast.ifc')
        gebaeude = ifc_last.by_type("IfcBuilding")[0]
        t = gebaeude.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue
        l = gebaeude.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue
        gebaeude_infos = OrderedDict({'Name': gebaeude.Name, 'Raumanzahl': len(gebaeude.ContainsElements[0].RelatedElements),
                      'Ort' : gebaeude.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue,
                     'Norm-Außentemperatur': gebaeude.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                     'Jahresmittel-Temperatur': gebaeude.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                     'Wärmeverluste': round(t+l,1)})
        liste =['', '', '', '°C','°C','Watt']
        i = 0
        for k in gebaeude_infos:
            text = Label(text=k, font_size = 24)
            grid_add.add_widget(text)
            text1 = Label(text=str(gebaeude_infos[k])+' '+liste[i], font_size = 24)
            grid_add.add_widget(text1)
            i=i+1
        button_zurueck = Button(text= "zurück zur Datenauswahl", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button= Button(text="zurück zum Hauptmenü", background_color= (0.1,0.8,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck); grid_add.add_widget(button);

class Raumdaten(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Raumdaten, self).__init__(*args, **kwargs)
        self.our_layouts['Raum_Ergebnisse'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Raum_Ergebnisse']);self.current_layout='Raum_Ergebnisse'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Raum_Ergebnisse'].add_widget(grid_add)
        ifc_last = ifcopenshell.open('Heizlast.ifc')
        raeume = ifc_last.by_type('IfcSpace')
        self.button_names = []
        for raum in raeume:
            button = Button(text=raum.Name, on_release=self.buttons)
            grid_add.add_widget(button)
            self.button_names.append
        button_zurueck = Button(text= "zurück zur Übersicht", on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck)
    def buttons(self, button):
        self.app.aktueller_raum = button.text
        self.app.root.add_widget(Raumdaten1(name=button.text))
        self.app.root.current = button.text
        self.app.root.transition.direction = "left"
        
class Raumdaten1(Mixed_class):    
    def __init__(self, *args, **kwargs):
        super(Raumdaten1, self).__init__(*args, **kwargs)
        self.building = ifc_file.by_type("IfcBuilding")
        self.our_layouts['Raum1_Ergebnisse'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Raum1_Ergebnisse']);self.current_layout='Raum1_Ergebnisse'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Raum1_Ergebnisse'].add_widget(grid_titel)
        aktueller_raum = self.app.aktueller_raum
        titel = Label(text='Raumdaten-'+aktueller_raum, font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(spacing=10, cols=2)
        self.our_layouts['Raum1_Ergebnisse'].add_widget(grid_add)
        ifc_last = ifcopenshell.open('Heizlast.ifc')
        raeume   = ifc_last.by_type("IfcSpace")
        for raum in raeume:
            if raum.Name == aktueller_raum:
                t = raum.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                l = raum.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
                raum_infos = OrderedDict({'Name':raum.Name, 'Raumfläche': raum.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[1].AreaValue, 
                                         'Raumhöhe': raum.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[0].LengthValue/1000,
                                         'Solltemperatur': raum.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue,
                                         'Transmissionswärmeverluste': round(raum.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue, 1),
                                         'Lüftungswärmeverluste': round(raum.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue, 1),
                                         'Wärmeverluste-Gesamt': round(t+l, 1)})
        liste =['', 'm²', 'm','°C','Watt','Watt','Watt']
        i = 0
        for k in raum_infos:
            text = Label(text=k, font_size = 24)
            grid_add.add_widget(text)
            text1 = Label (text=str(raum_infos[k])+' '+liste[i], font_size = 24)
            grid_add.add_widget(text1)
            i=i+1
        button_elemente = Button(text="zu den Raumelementen", font_size=16, size_hint=(0.5,0.1), 
                                 on_release=self.buttons_elemente)
        button_zurueck = Button(text= "zurück zur Raumwahl", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button= Button(text="zurück zum Hauptmenü", background_color= (0.1,0.8,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck); grid_add.add_widget(button);
        grid_add1 = GridLayout(spacing=10, size_hint=(1.0, 0.2), cols=1)
        self.our_layouts['Raum1_Ergebnisse'].add_widget(grid_add1)
        grid_add1.add_widget(button_elemente);
    def buttons_elemente(self, button):
        self.app.root.add_widget(Raumelemente(name=button.text + self.app.aktueller_raum))
        self.app.root.current = button.text + self.app.aktueller_raum
        self.app.root.transition.direction = "left"
#Datenabruf_Raumelemente
class Raumelemente(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Raumelemente, self).__init__(*args, **kwargs)
        self.our_layouts['Raumelemente'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Raumelemente']);self.current_layout='Raumelemente'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Raumelemente'].add_widget(grid_add)
        button_waende = Button(text="Wände", on_release=self.switch_element)
        button_fenster = Button(text="Fenster", on_release=self.switch_element)
        button_tueren  = Button(text="Türen", on_release=self.switch_element)
        button_boden_decke   = Button(text= "Boden und Decke", on_release=self.switch_element)
        grid_add.add_widget(button_waende); grid_add.add_widget(button_fenster); 
        grid_add.add_widget(button_tueren); grid_add.add_widget(button_boden_decke)
        button_zurueck = Button(text= "zurück zum Raum", background_color= (0.8,0.1,0,1), on_release=self.switch_element)
        grid_add.add_widget(button_zurueck)
    def switch_element(self, button):
        if button.text =="Wände":
            self.app.root.add_widget(Wandelemente(name=button.text + self.app.aktueller_raum))
            self.app.root.current = button.text + self.app.aktueller_raum
            self.app.root.transition.direction = "left"
        elif button.text =="Fenster":
            self.app.root.add_widget(Fensterelemente(name=button.text + self.app.aktueller_raum))
            self.app.root.current = button.text + self.app.aktueller_raum
            self.app.root.transition.direction = "left"    
        elif button.text =="Türen":
            self.app.root.add_widget(Tuerelemente(name=button.text + self.app.aktueller_raum))
            self.app.root.current = button.text + self.app.aktueller_raum
            self.app.root.transition.direction = "left"   
        elif button.text =="Boden und Decke":
            self.app.root.add_widget(Boden_Deckenelemente(name=button.text + self.app.aktueller_raum))
            self.app.root.current = button.text + self.app.aktueller_raum
            self.app.root.transition.direction = "left" 
        elif button.text =="zurück zum Raum":
            self.app.root.current = self.app.aktueller_raum
            self.app.root.transition.direction = "right" 
#Datenabruf_Raumelemente
class Wandelemente(Mixed_class):   
    def __init__(self, *args, **kwargs):
        super(Wandelemente, self).__init__(*args, **kwargs)
        self.our_layouts['Wandelemente'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Wandelemente']);self.current_layout='Wandelemente'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.2])
        self.our_layouts['Wandelemente'].add_widget(grid_titel)
        aktueller_raum = self.app.aktueller_raum
        titel = Label(text='Wanddaten-'+aktueller_raum, font_size=20, size_hint=[1.0, 0.2])
        grid_titel.add_widget(titel)
        ifc_last = ifcopenshell.open('Heizlast.ifc')
        for raum in ifc_last.by_type('IfcSpace'):
            if raum.Name == self.app.aktueller_raum:
                for element in raum.ContainsElements[0].RelatedElements:
                    if 'IfcWall' in str(element):
                        grid_add1 = GridLayout(cols=1)
                        self.our_layouts['Wandelemente'].add_widget(grid_add1)
                        titel = Label(text=element.Name, font_size=16)
                        grid_add1.add_widget(titel)
                        grid_add2 = GridLayout(cols=4)
                        self.our_layouts['Wandelemente'].add_widget(grid_add2)
                        wand_infos = OrderedDict({'Name':element.Name, 'Länge': element.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[0].LengthValue/1000,
                                                 'Höhe': element.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[1].LengthValue/1000,
                                                 'Transmissionswärmeverluste': round(element.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue, 1),
                                                 'U-Wert': element.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                                                 })
                        liste =['', 'm', 'm','Watt', 'W/m²K']
                        i = 0
                        for k in wand_infos:
                            text = Label(text=k, font_size = 16)
                            grid_add2.add_widget(text)
                            text1 = Label (text=str(wand_infos[k])+' '+liste[i], color= (0.2,0.6,0,2), font_size = 16)
                            grid_add2.add_widget(text1)
                            i=i+1
        grid_add = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.2])
        self.our_layouts['Wandelemente'].add_widget(grid_add)
        button_zurueck      = Button(text= "zurück zu den Raumelementen", font_size = 14, size_hint=[1.0, 0.2], on_release=self.switch_raumelement)
        grid_add.add_widget(button_zurueck)

        
class Fensterelemente(Mixed_class):   
    def __init__(self, *args, **kwargs):
        super(Fensterelemente, self).__init__(*args, **kwargs)
        self.our_layouts['Fensterelemente'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Fensterelemente']);self.current_layout='Fensterelemente'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.2])
        self.our_layouts['Fensterelemente'].add_widget(grid_titel)
        aktueller_raum = self.app.aktueller_raum
        titel = Label(text='Fensterdaten-'+aktueller_raum, font_size=20, size_hint=[1.0, 0.2])
        grid_titel.add_widget(titel)
        ifc_last = ifcopenshell.open('Heizlast.ifc')
        for raum in ifc_last.by_type('IfcSpace'):
            if raum.Name == self.app.aktueller_raum:
                for element in raum.ContainsElements[0].RelatedElements:
                    if 'IfcWindow' in str(element):
                        grid_add1 = GridLayout(cols=1)
                        self.our_layouts['Fensterelemente'].add_widget(grid_add1)
                        titel = Label(text=element.Name, font_size=16)
                        grid_add1.add_widget(titel)
                        grid_add2 = GridLayout(cols=4)
                        self.our_layouts['Fensterelemente'].add_widget(grid_add2)
                        fenster_infos = OrderedDict({'Name':element.Name, 'Fensterbreite': element.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[0].LengthValue/1000,
                                                 'Fensterhöhe': element.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[1].LengthValue/1000,
                                                 'Fensterfläche': element.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[2].AreaValue,
                                                 'Transmissionswärmeverluste': round(element.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue, 1),
                                                 'U-Wert': element.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                                                 })
                        liste =['', 'm', 'm','m²','Watt', 'W/m²K']
                        i = 0
                        for k in fenster_infos:
                            text = Label(text=k, font_size = 16)
                            grid_add2.add_widget(text)
                            text1 = Label (text=str(fenster_infos[k])+' '+liste[i], color= (0.2,0.6,0,2), font_size = 16)
                            grid_add2.add_widget(text1)
                            i=i+1
        grid_add = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.2])
        self.our_layouts['Fensterelemente'].add_widget(grid_add)
        button_zurueck      = Button(text= "zurück zu den Raumelementen", font_size = 14, size_hint=[1.0, 0.2], on_release=self.switch_raumelement)
        grid_add.add_widget(button_zurueck)

        
class Tuerelemente(Mixed_class):   
    def __init__(self, *args, **kwargs):
        super(Tuerelemente, self).__init__(*args, **kwargs)
        self.our_layouts['Tuerelemente'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Tuerelemente']);self.current_layout='Tuerelemente'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.2])
        self.our_layouts['Tuerelemente'].add_widget(grid_titel)
        aktueller_raum = self.app.aktueller_raum
        titel = Label(text='Türdaten-'+aktueller_raum, font_size=20, size_hint=[1.0, 0.2])
        grid_titel.add_widget(titel)
        ifc_last = ifcopenshell.open('Heizlast.ifc')
        for raum in ifc_last.by_type('IfcSpace'):
            if raum.Name == self.app.aktueller_raum:
                for element in raum.ContainsElements[0].RelatedElements:
                    if 'IfcDoor' in str(element):
                        grid_add1 = GridLayout(cols=1)
                        self.our_layouts['Tuerelemente'].add_widget(grid_add1)
                        titel = Label(text=element.Name, font_size=16)
                        grid_add1.add_widget(titel)
                        grid_add2 = GridLayout(cols=4)
                        self.our_layouts['Tuerelemente'].add_widget(grid_add2)
                        tuer_infos = OrderedDict({'Name':element.Name, 'Türbreite': element.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[0].LengthValue/1000,
                                                 'Türhöhe': element.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[1].LengthValue/1000,
                                                 'Türfläche': element.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[2].AreaValue,
                                                 'Transmissionswärmeverluste': round(element.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue,1),
                                                 'U-Wert': element.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                                                 })
                        liste =['', 'm', 'm','m²','Watt', 'W/m²K']
                        i = 0
                        for k in tuer_infos:
                            text = Label(text=k, font_size = 16)
                            grid_add2.add_widget(text)
                            text1 = Label (text=str(tuer_infos[k])+' '+liste[i], color= (0.2,0.6,0,2), font_size = 16)
                            grid_add2.add_widget(text1)
                            i=i+1
        grid_add = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.2])
        self.our_layouts['Tuerelemente'].add_widget(grid_add)
        button_zurueck      = Button(text= "zurück zu den Raumelementen", font_size = 14, size_hint=[1.0, 0.2], on_release=self.switch_raumelement)
        grid_add.add_widget(button_zurueck)
        
    
class Boden_Deckenelemente(Mixed_class):   
    def __init__(self, *args, **kwargs):
        super(Boden_Deckenelemente, self).__init__(*args, **kwargs)
        self.our_layouts['Boden_Deckenelemente'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Boden_Deckenelemente']);self.current_layout='Boden_Deckenelemente'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.2])
        self.our_layouts['Boden_Deckenelemente'].add_widget(grid_titel)
        aktueller_raum = self.app.aktueller_raum
        titel = Label(text='Boden- und Deckendaten-'+aktueller_raum, font_size=20, size_hint=[1.0, 0.2])
        grid_titel.add_widget(titel)
        ifc_last = ifcopenshell.open('Heizlast.ifc')
        for raum in ifc_last.by_type('IfcSpace'):
            if raum.Name == self.app.aktueller_raum:
                for element in raum.ContainsElements[0].RelatedElements:
                    if 'IfcSlab' in str(element):
                        grid_add1 = GridLayout(cols=1)
                        self.our_layouts['Boden_Deckenelemente'].add_widget(grid_add1)
                        titel = Label(text=element.Name, font_size=18)
                        grid_add1.add_widget(titel)
                        grid_add2 = GridLayout(cols=4)
                        self.our_layouts['Boden_Deckenelemente'].add_widget(grid_add2)
                        boden_decke_infos = OrderedDict({'Name':element.Name,
                                                 'Fläche': element.IsDefinedBy[1].RelatingPropertyDefinition.Quantities[0].AreaValue,
                                                 'Transmissionswärmeverluste': round(element.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue,1),
                                                 'U-Wert': element.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                                                 })
                        liste =['', 'm²','Watt', 'W/m²K']
                        i = 0
                        for k in boden_decke_infos:
                            text = Label(text=k, font_size = 18)
                            grid_add2.add_widget(text)
                            text1 = Label (text=str(boden_decke_infos[k])+' '+liste[i], color= (0.2,0.6,0,2), font_size = 18)
                            grid_add2.add_widget(text1)
                            i=i+1
        grid_add = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.2])
        self.our_layouts['Boden_Deckenelemente'].add_widget(grid_add)
        button_zurueck      = Button(text= "zurück zu den Raumelementen", font_size = 14, size_hint=[1.0, 0.2], on_release=self.switch_raumelement)
        grid_add.add_widget(button_zurueck)


#Datenabruf Heizungsanlage
class Heizungsanlage_Struktur(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Heizungsanlage_Struktur, self).__init__(*args, **kwargs)
        self.our_layouts['Struktur_Heizung'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Struktur_Heizung']);self.current_layout='Struktur_Heizung'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Struktur_Heizung'].add_widget(grid_add)
        button_schema = Button(text="Schema", on_release=self.switch_layout)
        button_heizkreis = Button(text="Heizkreis", on_release=self.switch_layout)
        button_system = Button(text="Systeminformationen", on_release=self.switch_layout)
        button_bauteile = Button(text="Informationen der Bauteile", on_release=self.switch_layout)
        button_zurueck = Button(text= "zurück zur Übersicht", on_release=self.switch_layout)
        grid_add.add_widget(button_schema); grid_add.add_widget(button_heizkreis);
        grid_add.add_widget(button_system) 
        grid_add.add_widget(button_bauteile); grid_add.add_widget(button_zurueck)

class Schema(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Schema, self).__init__(*args, **kwargs)
        self.our_layouts['Schema'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Schema']);self.current_layout='Schema'
        grid_add = GridLayout(cols=1, size_hint=[1.0, 0.9])
        self.our_layouts['Schema'].add_widget(grid_add)
        titel = Label(text='Schema', font_size=30,size_hint=[1.0, 0.1])
        grid_add.add_widget(titel)
        schema = Image(source='heizung2.png',allow_stretch = True, keep_ratio= False, size_hint=[1.0, 0.8])
        grid_add.add_widget(schema)
        button_zurueck = Button(text= "zurück zur Auswahl", on_release=self.switch_layout, size_hint=[1.0, 0.1])
        grid_add.add_widget(button_zurueck)
  
class Heizkreis(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Heizkreis, self).__init__(*args, **kwargs)
        self.our_layouts['Heizkreis'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Heizkreis']);self.current_layout='Heizkreis'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Heizkreis'].add_widget(grid_add)
        titel = Label(text='Heizkreis', font_size=30, size_hint=[1.0, 0.15])
        grid_add.add_widget(titel)
        schema = Image(source='heizung3.png',allow_stretch = True, keep_ratio= False, size_hint=[1.0, 0.75])
        grid_add.add_widget(schema)
        button_zurueck = Button(text= "zurück zur Auswahl", on_release=self.switch_layout, size_hint=[1.0, 0.1])
        grid_add.add_widget(button_zurueck)


class Systeminformationen(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Systeminformationen, self).__init__(*args, **kwargs)
        ifc_system_abruf = ifcopenshell.open('System_verbunden.ifc')
        system = ifc_system_abruf.by_type("IfcBuilding")[0]
        self.our_layouts['Systeminformationen'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Systeminformationen']);self.current_layout='Systeminformationen'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Systeminformationen'].add_widget(grid_titel)
        titel = Label(text='Systeminformationen', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(cols=2)
        self.our_layouts['Systeminformationen'].add_widget(grid_add)
        for property_set in system.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                system_infos = OrderedDict({'System':property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue, 
                                    'Anzahl Heizflaechen': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue, 
                                 'Leistung Erzeuger': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                 'Speichervolumen': property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue,
                                 'Vorlauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                 'Ruecklauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
                                 })
                liste =['', '', 'kW','l','°C','°C']
            elif property_set.RelatingPropertyDefinition.Name == "Pset_System":
                system_infos = OrderedDict({'System':property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue, 
                                    'Anzahl Heizflaechen': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue, 
                                 'Leistung Erzeuger': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                 'Vorlauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                 'Ruecklauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
                                 })
                liste =['', '', 'kW','°C','°C']
            else:
                pass
        i = 0
        for k in system_infos:
            text = Label(text=k, font_size = 18)
            grid_add.add_widget(text)
            text1 = Label (text=str(system_infos[k])+' '+liste[i], font_size = 18)
            grid_add.add_widget(text1)
            i=i+1
        button_zurueck = Button(text= "zurück zur Auswahl", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        button_anpassung = Button(text= "Daten ändern", on_release=self.switch_layout)
        grid_add.add_widget(button_anpassung), grid_add.add_widget(button_zurueck) 
     
        
class Systeminformationen_anpassen(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Systeminformationen_anpassen, self).__init__(*args, **kwargs)
        ifc_system_abruf = ifcopenshell.open('System_verbunden.ifc')
        system = ifc_system_abruf.by_type("IfcBuilding")[0]
        self.our_layouts['Systeminformationen_anpassen'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Systeminformationen_anpassen']);self.current_layout='Systeminformationen_anpassen'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Systeminformationen_anpassen'].add_widget(grid_titel)
        titel = Label(text='Systeminformationen ändern', font_size=30)
        grid_titel.add_widget(titel)
        grid_add = GridLayout(cols=3)
        self.our_layouts['Systeminformationen_anpassen'].add_widget(grid_add)
        for property_set in system.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_System_p":
                system_infos = OrderedDict({'System':property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue, 
                                    'Anzahl Heizflaechen': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue, 
                                 'Leistung Erzeuger': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                 'Speichervolumen': property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue,
                                 'Vorlauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                 'Ruecklauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
                                 })
                liste =['', '', 'kW','l','°C','°C']
            elif property_set.RelatingPropertyDefinition.Name == "Pset_System":
                system_infos = OrderedDict({'System':property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue, 
                                    'Anzahl Heizflaechen': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue, 
                                 'Leistung Erzeuger': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                 'Vorlauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                 'Ruecklauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
                                 })
                liste =['', '', 'kW','°C','°C']
            else:
                pass
        self.imps = []
        i = 0
        for k in system_infos:
            text = Label(text=k, font_size = 18)
            grid_add.add_widget(text)
            text1 = Label (text=str(system_infos[k])+' '+liste[i], font_size = 18)
            grid_add.add_widget(text1)
            inp = TextInput(hint_text= '')
            grid_add.add_widget(inp)
            self.imps.append( (text, text1, inp) )
            i=i+1
        button_zurueck = Button(text= "Systeminformationen ändern", on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck) 
     
class Bauteile(Mixed_class):    
    def __init__(self, *args, **kwargs):
        super(Bauteile, self).__init__(*args, **kwargs)
        ifc_system_abruf = ifcopenshell.open('System_verbunden.ifc')
        alle_speicher = ifc_system_abruf.by_type("IfcFlowStorageDevice")
        for speicher in alle_speicher:
            if "Trinkwarm" in speicher.Name:
                tww = speicher
            else: pass
        self.our_layouts['Bauteile'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Bauteile']);self.current_layout='Bauteile'
        grid_add = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.85])
        self.our_layouts['Bauteile'].add_widget(grid_add)
        button_erzeuger     = Button(text="Wärmeerzeuger", on_release=self.switch_layout)
        button_pumpen       = Button(text="Umwälzpumpe", on_release=self.switch_layout)
        button_rohre        = Button(text="Rohre Heizkreis", on_release=self.switch_layout)
        button_heizflaechen = Button(text="Heizflächen", on_release=self.switch_layout)
        button_puffer       = Button(text="Pufferspeicher", on_release=self.switch_layout)
        button_tww          = Button(text="TWW-Speicher oder Frischwasserstation", on_release=self.switch_layout)
        grid_add1 = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Bauteile'].add_widget(grid_add1)
        button_zurueck      = Button(text= "zurück zur Auswahl", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_erzeuger); grid_add.add_widget(button_pumpen); grid_add.add_widget(button_rohre) 
        grid_add.add_widget(button_heizflaechen) 
        grid_add.add_widget(button_puffer); grid_add.add_widget(button_tww)
        if 'tww' in locals():
            grid_add.add_widget(button_tww);
        else: pass
        grid_add1.add_widget(button_zurueck)

class Erzeuger(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Erzeuger, self).__init__(*args, **kwargs)
        ifc_system = ifcopenshell.open('System_verbunden.ifc')
        for objekt in ifc_system.by_type('IfcUnitaryEquipment'):
            if 'Wärmepumpe' in objekt.Name:
                wp = objekt
        self.our_layouts['Erzeuger'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Erzeuger']);self.current_layout='Erzeuger'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.08])
        self.our_layouts['Erzeuger'].add_widget(grid_titel)
        titel = Label(text='Erzeuger', font_size=30)
        grid_titel.add_widget(titel)
        for property_set in wp.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_EnvironmentalImpactIndicators":
                beschreibung = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_ManufacturerTypeInformation":
                hersteller = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_UnitaryEquipmentTypeCommon":   
                auslegung_infos = OrderedDict({'Beschreibung':property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue, 
                                 'Nenn-Heizlseitung': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                 'Vorlauftemperatur-Heizkreis': property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue,
                                 'Rücklauftemperatur-Heizkreis': property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue
                                 })
                waermequellenart = property_set.RelatingPropertyDefinition.HasProperties[7].NominalValue.wrappedValue
                geschoss = property_set.RelatingPropertyDefinition.HasProperties[8].NominalValue.wrappedValue
                liste_aus =['', '[kW]','[°C]','[°C]']
            elif property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                basismengen_infos = OrderedDict({'Höhe':property_set.RelatingPropertyDefinition.Quantities[0].LengthValue,
                                    'Breite': property_set.RelatingPropertyDefinition.Quantities[1].LengthValue, 
                                 'Tiefe': property_set.RelatingPropertyDefinition.Quantities[2].LengthValue,
                                 'Fläche': property_set.RelatingPropertyDefinition.Quantities[3].AreaValue,
                                 'Volumen': property_set.RelatingPropertyDefinition.Quantities[4].VolumeValue
                                 })
                liste_basis =['[mm]', '[mm]', '[mm]','[m²]','[m³]']              
            else:
                pass 
        allgemein_infos = OrderedDict({'Beschreibung':beschreibung, 'Hersteller': hersteller, 'Geschoss': geschoss,
                                'Wärmequellenart': waermequellenart
                                 })
        liste_a =['', '', '','']
        grid_b1 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Erzeuger'].add_widget(grid_b1)
        button1 = Button(text= "Allgemein"); grid_b1.add_widget(button1) 
        grid_add1 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Erzeuger'].add_widget(grid_add1)
        i = 0
        for k in allgemein_infos:
            text = Label(text=k, font_size = 16)
            grid_add1.add_widget(text)
            text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2), font_size = 16)
            grid_add1.add_widget(text1)
            i=i+1
        grid_b2 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Erzeuger'].add_widget(grid_b2)
        button2 = Button(text= "Auslegung"); grid_b2.add_widget(button2) 
        grid_add2 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Erzeuger'].add_widget(grid_add2) 
        i = 0
        for k in auslegung_infos:
            text = Label(text=k, font_size = 16)
            grid_add2.add_widget(text)
            text1 = Label (text=str(auslegung_infos[k])+' '+liste_aus[i], color= (0.2,0.6,0,2), font_size = 16)
            grid_add2.add_widget(text1)
            i=i+1
        grid_b3 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Erzeuger'].add_widget(grid_b3)
        button3 = Button(text= "Maße"); grid_b3.add_widget(button3)         
        grid_add3 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Erzeuger'].add_widget(grid_add3)         
        i = 0
        for k in basismengen_infos:
            text = Label(text=k, font_size = 16)
            grid_add3.add_widget(text)
            text1 = Label (text=str(basismengen_infos[k])+' '+liste_basis[i], color= (0.2,0.6,0,2), font_size = 16)
            grid_add3.add_widget(text1)
            i=i+1
        grid_add4 = GridLayout(cols=1, size_hint=[1.0, 0.05])
        self.our_layouts['Erzeuger'].add_widget(grid_add4)   
        button_zurueck = Button(text= "zurück zu den Bauteilen", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add4.add_widget(button_zurueck)

class Pumpen(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Pumpen, self).__init__(*args, **kwargs)
        ifc_system_abruf = ifcopenshell.open('System_verbunden.ifc')
        pumpen = ifc_system_abruf.by_type('IfcPump')
        for pump in pumpen:
            if 'Pumpe - Puffer zum Verteiler' in pump.Name:
                pumpe = pump
        self.our_layouts['Pumpen'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Pumpen']);self.current_layout='Pumpen'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.08])
        self.our_layouts['Pumpen'].add_widget(grid_titel)
        titel = Label(text='Umwälzpumpe', font_size=30)
        grid_titel.add_widget(titel)
        for property_set in pumpe.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_EnvironmentalImpactIndicators":
                beschreibung = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_ManufacturerTypeInformation":
                hersteller = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue 
            elif property_set.RelatingPropertyDefinition.Name == "Pset_PumpTypeCommon":
                auslegung_infos = OrderedDict({'Min. Leistung': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue, 
                                 'Max. Leistung': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                 'Spannung': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                 'Max. Betriebsdruck': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue,
                                 'Max. Betriebstemperatur': property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue,
                                 'Gewicht': property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue
                                 })
                geschoss = property_set.RelatingPropertyDefinition.HasProperties[7].NominalValue.wrappedValue
                liste_aus =['[W]', '[W]', '[V]', '[bar]','[°C]','[kg]']      
            elif property_set.RelatingPropertyDefinition.Name == "Pset_FlowMovingDevicePump":
                hydraulik_infos = OrderedDict({'Förderhöhe':round(property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue, 3), 
                                    'Förderstrom': round(property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue, 3)
                                 })
                liste_hy =['[mWs]', '[m³/h]']
            else:
                pass
        allgemein_infos = OrderedDict({'Beschreibung':beschreibung, 'Hersteller': hersteller, 'Geschoss': geschoss
                                 })
        liste_a =['', '', '']
                
        grid_b1 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Pumpen'].add_widget(grid_b1)
        button1 = Button(text= "Allgemein"); grid_b1.add_widget(button1) 
        grid_add1 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Pumpen'].add_widget(grid_add1)
        i = 0
        for k in allgemein_infos:
            text = Label(text=k)
            grid_add1.add_widget(text)
            text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2))
            grid_add1.add_widget(text1)
            i=i+1
        grid_b2 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Pumpen'].add_widget(grid_b2)
        button2 = Button(text= "Auslegung"); grid_b2.add_widget(button2) 
        grid_add2 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Pumpen'].add_widget(grid_add2) 
        i = 0
        for k in auslegung_infos:
            text = Label(text=k)
            grid_add2.add_widget(text)
            text1 = Label (text=str(auslegung_infos[k])+' '+liste_aus[i], color= (0.2,0.6,0,2))
            grid_add2.add_widget(text1)
            i=i+1
        grid_b3 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Pumpen'].add_widget(grid_b3)
        button3 = Button(text= "Hydraulik"); grid_b3.add_widget(button3) 
        grid_add3 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Pumpen'].add_widget(grid_add3) 
        i = 0
        for k in hydraulik_infos:
            text = Label(text=k)
            grid_add3.add_widget(text)
            text1 = Label (text=str(hydraulik_infos[k])+' '+liste_hy[i], color= (0.2,0.6,0,2))
            grid_add3.add_widget(text1)
            i=i+1       
        grid_add5 = GridLayout(cols=1, size_hint=[1.0, 0.05])
        self.our_layouts['Pumpen'].add_widget(grid_add5)   
        button_zurueck = Button(text= "zurück zu den Bauteilen", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add5.add_widget(button_zurueck)
        

class Rohre(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Rohre, self).__init__(*args, **kwargs)
        ifc_system = ifcopenshell.open('System_verbunden.ifc')
        self.our_layouts['Rohre'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Rohre']);self.current_layout='Rohre'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.08])
        self.our_layouts['Rohre'].add_widget(grid_titel)
        titel = Label(text='Rohre Heizkreis', font_size=30)
        grid_titel.add_widget(titel)
        grid_b1 = GridLayout(cols=3); self.our_layouts['Rohre'].add_widget(grid_b1)
        text = Label(text='Beschreibung'); text1 = Label(text='Länge'); text2 = Label(text='Durchmesser')
        grid_b1.add_widget(text); grid_b1.add_widget(text1); grid_b1.add_widget(text2)
        hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
        for hvac in hvac_components:
            if 'Rohr - Vorlauf Strang1 - 1' == hvac.Name:
                rohr_strang1_vl1 = hvac
            elif 'Rohr - Ruecklauf Strang1 - 1' == hvac.Name:
                rohr_strang1_rl1 = hvac
            elif 'Rohr - Vorlauf Strang1 - 2' == hvac.Name:
                rohr_strang1_vl2 = hvac
            elif 'Rohr - Ruecklauf Strang1 - 2' == hvac.Name:
                rohr_strang1_rl2 = hvac
            elif 'Rohr - Vorlauf Strang1 - 3' == hvac.Name:
                rohr_strang1_vl3 = hvac
            elif 'Rohr - Ruecklauf Strang1 - 3' == hvac.Name:
                rohr_strang1_rl3 = hvac             
            elif 'Rohr - Vorlauf Strang1 - 4' == hvac.Name:
                rohr_strang1_vl4 = hvac
            elif 'Rohr - Ruecklauf Strang1 - 4' == hvac.Name:
                rohr_strang1_rl4 = hvac
            elif 'Rohr - Vorlauf Strang2 - 1' == hvac.Name:
                rohr_strang2_vl1 = hvac
            elif 'Rohr - Ruecklauf Strang2 - 1' == hvac.Name:
                rohr_strang2_rl1 = hvac
            elif 'Rohr - Vorlauf Strang2 - 2' == hvac.Name:
                rohr_strang2_vl2 = hvac
            elif 'Rohr - Ruecklauf Strang2 - 2' == hvac.Name:
                rohr_strang2_rl2 = hvac             
            elif 'Rohr - Vorlauf Strang2 - 3' == hvac.Name:
                rohr_strang2_vl3 = hvac
            elif 'Rohr - Ruecklauf Strang2 - 3' == hvac.Name:
                rohr_strang2_rl3 = hvac
            elif 'Rohr - Vorlauf Strang2 - 4' == hvac.Name:
                rohr_strang2_vl4 = hvac
            elif 'Rohr - Ruecklauf Strang2 - 4' == hvac.Name:
                rohr_strang2_rl4 = hvac
            elif 'Rohr - Vorlauf Strang3 - 1' == hvac.Name:
                rohr_strang3_vl1 = hvac
            elif 'Rohr - Ruecklauf Strang3 - 1' == hvac.Name:
                rohr_strang3_rl1 = hvac
            elif 'Rohr - Vorlauf Strang3 - 2' == hvac.Name:
                rohr_strang3_vl2 = hvac
            elif 'Rohr - Ruecklauf Strang3 - 2' == hvac.Name:
                rohr_strang3_rl2 = hvac             
            elif 'Rohr - Vorlauf Strang3 - 3' == hvac.Name:
                rohr_strang3_vl3 = hvac
            elif 'Rohr - Ruecklauf Strang3 - 3' == hvac.Name:
                rohr_strang3_rl3 = hvac
            elif 'Rohr - Vorlauf Strang3 - 4' == hvac.Name:
                rohr_strang3_vl4 = hvac
            elif 'Rohr - Ruecklauf Strang3 - 4' == hvac.Name:
                rohr_strang3_rl4 = hvac            
            elif 'Rohr - Vorlauf Strang4 - 1' == hvac.Name:
                rohr_strang4_vl1 = hvac
            elif 'Rohr - Ruecklauf Strang4 - 1' == hvac.Name:
                rohr_strang4_rl1 = hvac
            elif 'Rohr - Vorlauf Strang4 - 2' == hvac.Name:
                rohr_strang4_vl2 = hvac
            elif 'Rohr - Ruecklauf Strang4 - 2' == hvac.Name:
                rohr_strang4_rl2 = hvac             
            elif 'Rohr - Vorlauf Strang4 - 3' == hvac.Name:
                rohr_strang4_vl3 = hvac
            elif 'Rohr - Ruecklauf Strang4 - 3' == hvac.Name:
                rohr_strang4_rl3 = hvac
            elif 'Rohr - Vorlauf Strang4 - 4' == hvac.Name:
                rohr_strang4_vl4 = hvac
            elif 'Rohr - Ruecklauf Strang4 - 4' == hvac.Name:
                rohr_strang4_rl4 = hvac
        building = ifc_system.by_type('IfcBuilding')[0]
        beschreibung = building.Description.split('_').pop().split(';')
        stranganzahl = int(beschreibung.pop())
        rohre = ifc_system.by_type('IfcPipeSegment')
        rohre_hk = []
        hk1 = []
        hk2 = []
        hk3 = []
        hk4 = []
        for hk in ifc_system.by_type('IfcSpaceHeater'):
            strang = int(hk.Description.split('_').pop())
            if strang == 1:
                hk1.append(hk)
            elif strang == 2:
                hk2.append(hk)
            elif strang == 3:
                hk3.append(hk)
            elif strang == 4:
                hk4.append(hk)
        if stranganzahl == 1:
            laenge = len(ifc_system.by_type('IfcSpaceHeater')) 
            if laenge == 1:
                pass
            elif laenge == 2:
                rohre_hk.append(rohr_strang1_vl1)
            elif laenge == 3:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)
            elif laenge == 4:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)
                rohre_hk.append(rohr_strang1_vl3) 
            elif laenge == 5:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)               
                rohre_hk.append(rohr_strang1_vl3) 
                rohre_hk.append(rohr_strang1_vl4) 
        elif stranganzahl == 2:     
            for rohr in rohre:
                if 'zu Knoten1' in rohr.Name:
                    rohre_hk.append(rohr)
            if len(hk1) == 1:
                pass
            elif len(hk1) == 2:
                rohre_hk.append(rohr_strang1_vl1)
            elif len(hk1) == 3:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)
            elif len(hk1) == 4:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)
                rohre_hk.append(rohr_strang1_vl3) 
            elif len(hk1) == 5:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)               
                rohre_hk.append(rohr_strang1_vl3) 
                rohre_hk.append(rohr_strang1_vl4) 
            if len(hk2) == 1:
                pass
            elif len(hk2) == 2:
                rohre_hk.append(rohr_strang2_vl1)
            elif len(hk2) == 3:
                rohre_hk.append(rohr_strang2_vl1)
                rohre_hk.append(rohr_strang2_vl2)
            elif len(hk2) == 4:
                rohre_hk.append(rohr_strang2_vl1)
                rohre_hk.append(rohr_strang2_vl2)
                rohre_hk.append(rohr_strang2_vl3) 
            elif len(hk2) == 5:
                rohre_hk.append(rohr_strang2_vl1)
                rohre_hk.append(rohr_strang2_vl2)               
                rohre_hk.append(rohr_strang2_vl3) 
                rohre_hk.append(rohr_strang2_vl4)             
        elif stranganzahl == 3:     
            for rohr in rohre:
                if 'zu Knoten1' in rohr.Name:
                    rohre_hk.append(rohr)
                elif 'zu Knoten2' in rohr.Name:
                    rohre_hk.append(rohr)
            if len(hk1) == 1:
                pass
            elif len(hk1) == 2:
                rohre_hk.append(rohr_strang1_vl1)
            elif len(hk1) == 3:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)
            elif len(hk1) == 4:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)
                rohre_hk.append(rohr_strang1_vl3) 
            elif len(hk1) == 5:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)               
                rohre_hk.append(rohr_strang1_vl3) 
                rohre_hk.append(rohr_strang1_vl4) 
            if len(hk2) == 1:
                pass
            elif len(hk2) == 2:
                rohre_hk.append(rohr_strang2_vl1)
            elif len(hk2) == 3:
                rohre_hk.append(rohr_strang2_vl1)
                rohre_hk.append(rohr_strang2_vl2)
            elif len(hk2) == 4:
                rohre_hk.append(rohr_strang2_vl1)
                rohre_hk.append(rohr_strang2_vl2)
                rohre_hk.append(rohr_strang2_vl3) 
            elif len(hk2) == 5:
                rohre_hk.append(rohr_strang2_vl1)
                rohre_hk.append(rohr_strang2_vl2)               
                rohre_hk.append(rohr_strang2_vl3) 
                rohre_hk.append(rohr_strang2_vl4)  
            if len(hk3) == 1:
                pass
            elif len(hk3) == 2:
                rohre_hk.append(rohr_strang3_vl1)
            elif len(hk3) == 3:
                rohre_hk.append(rohr_strang3_vl1)
                rohre_hk.append(rohr_strang3_vl2)
            elif len(hk3) == 4:
                rohre_hk.append(rohr_strang3_vl1)
                rohre_hk.append(rohr_strang3_vl2)
                rohre_hk.append(rohr_strang3_vl3) 
            elif len(hk3) == 5:
                rohre_hk.append(rohr_strang3_vl1)
                rohre_hk.append(rohr_strang3_vl2)               
                rohre_hk.append(rohr_strang3_vl3) 
                rohre_hk.append(rohr_strang3_vl4)  
        elif stranganzahl == 4:     
            for rohr in rohre:
                if 'zu Knoten1' in rohr.Name:
                    rohre_hk.append(rohr)
                elif 'zu Knoten2' in rohr.Name:
                    rohre_hk.append(rohr)
                elif 'zu Knoten3' in rohr.Name:
                    rohre_hk.append(rohr)
            if len(hk1) == 1:
                pass
            elif len(hk1) == 2:
                rohre_hk.append(rohr_strang1_vl1)
            elif len(hk1) == 3:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)
            elif len(hk1) == 4:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)
                rohre_hk.append(rohr_strang1_vl3) 
            elif len(hk1) == 5:
                rohre_hk.append(rohr_strang1_vl1)
                rohre_hk.append(rohr_strang1_vl2)               
                rohre_hk.append(rohr_strang1_vl3) 
                rohre_hk.append(rohr_strang1_vl4) 
            if len(hk2) == 1:
                pass
            elif len(hk2) == 2:
                rohre_hk.append(rohr_strang2_vl1)
            elif len(hk2) == 3:
                rohre_hk.append(rohr_strang2_vl1)
                rohre_hk.append(rohr_strang2_vl2)
            elif len(hk2) == 4:
                rohre_hk.append(rohr_strang2_vl1)
                rohre_hk.append(rohr_strang2_vl2)
                rohre_hk.append(rohr_strang2_vl3) 
            elif len(hk2) == 5:
                rohre_hk.append(rohr_strang2_vl1)
                rohre_hk.append(rohr_strang2_vl2)               
                rohre_hk.append(rohr_strang2_vl3) 
                rohre_hk.append(rohr_strang2_vl4)  
            if len(hk3) == 1:
                pass
            elif len(hk3) == 2:
                rohre_hk.append(rohr_strang3_vl1)
            elif len(hk3) == 3:
                rohre_hk.append(rohr_strang3_vl1)
                rohre_hk.append(rohr_strang3_vl2)
            elif len(hk3) == 4:
                rohre_hk.append(rohr_strang3_vl1)
                rohre_hk.append(rohr_strang3_vl2)
                rohre_hk.append(rohr_strang3_vl3) 
            elif len(hk3) == 5:
                rohre_hk.append(rohr_strang3_vl1)
                rohre_hk.append(rohr_strang3_vl2)               
                rohre_hk.append(rohr_strang3_vl3) 
                rohre_hk.append(rohr_strang3_vl4)                 
            if len(hk4) == 1:
                pass
            elif len(hk4) == 2:
                rohre_hk.append(rohr_strang4_vl1)
            elif len(hk4) == 3:
                rohre_hk.append(rohr_strang4_vl1)
                rohre_hk.append(rohr_strang4_vl2)
            elif len(hk4) == 4:
                rohre_hk.append(rohr_strang4_vl1)
                rohre_hk.append(rohr_strang4_vl2)
                rohre_hk.append(rohr_strang4_vl3) 
            elif len(hk4) == 5:
                rohre_hk.append(rohr_strang4_vl1)
                rohre_hk.append(rohr_strang4_vl2)               
                rohre_hk.append(rohr_strang4_vl3) 
                rohre_hk.append(rohr_strang4_vl4)               

        for rohr in rohre_hk:
            allgemein_infos = OrderedDict({'Beschreibung': rohr.Name})
            liste_a =['']
            for property_set in rohr.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                    basismengen_infos = OrderedDict({'Länge':property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000,
                                         "Durchmesser": property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                                         })
                    liste_basis =[' m', ' mm']
            i = 0
            for k in allgemein_infos:
                text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2))
                grid_b1.add_widget(text1)
                i=i+1 
            i = 0       
            for k in basismengen_infos:
                text1 = Label (text=str(basismengen_infos[k])+' '+liste_basis[i], color= (0.2,0.6,0,2))
                grid_b1.add_widget(text1)
                i=i+1    
            
        for element in ifc_system.by_type('IfcSpaceHeater'):
            rohr = element.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
            allgemein_infos = OrderedDict({'Beschreibung': rohr.Name})
            liste_a =['']
            for property_set in rohr.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                    basismengen_infos = OrderedDict({'Länge':property_set.RelatingPropertyDefinition.Quantities[0].LengthValue/1000,
                                         "Durchmesser": property_set.RelatingPropertyDefinition.Quantities[3].LengthValue
                                         })
                    liste_basis =[' m', ' mm']
            i = 0
            for k in allgemein_infos:
                text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2))
                grid_b1.add_widget(text1)
                i=i+1 
            i = 0       
            for k in basismengen_infos:
                text1 = Label (text=str(basismengen_infos[k])+' '+liste_basis[i], color= (0.2,0.6,0,2))
                grid_b1.add_widget(text1)
                i=i+1
        grid_add4 = GridLayout(cols=1, size_hint=[1.0, 0.05])
        self.our_layouts['Rohre'].add_widget(grid_add4)   
        button_zurueck = Button(text= "zurück zu den Bauteilen", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add4.add_widget(button_zurueck)


class Heizkoerper(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Heizkoerper, self).__init__(*args, **kwargs)
        ifc_system = ifcopenshell.open('System_verbunden.ifc')
        heizkoerper = []
        for heizung in ifc_system.by_type('IfcSpaceHeater'):
            if heizung.Name == "Heizkoerper":
                heizkoerper.append(heizung)
        heizungskoerper = heizkoerper[0]
        self.our_layouts['Heizkoerper'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Heizkoerper']);self.current_layout='Heizkoerper'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.08])
        self.our_layouts['Heizkoerper'].add_widget(grid_titel)
        titel = Label(text='Heizkoerper', font_size=30)
        grid_titel.add_widget(titel)
        for property_set in heizungskoerper.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_EnvironmentalImpactIndicators":
                beschreibung = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_ManufacturerTypeInformation":
                hersteller = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                auslegung_infos = OrderedDict({'Gewicht':property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue, 
                                    'Anschlüsse': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue, 
                                    'Normwärmeleistung': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                    'Betriebswärmeleistung': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                    'Vorlauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue,
                                    'Rücklauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue,
                                    'Volumenstrom': property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue
                                 })
                geschoss = property_set.RelatingPropertyDefinition.HasProperties[7].NominalValue.wrappedValue
                raum = property_set.RelatingPropertyDefinition.HasProperties[8].NominalValue.wrappedValue
                liste_aus =['kg', 'DN', 'Watt', 'Watt', '°C', '°C', 'm³/h']
            elif property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                basismengen_infos = OrderedDict({'Höhe':property_set.RelatingPropertyDefinition.Quantities[0].LengthValue,
                                 "Breite": property_set.RelatingPropertyDefinition.Quantities[1].LengthValue, 
                                 'Tiefe': property_set.RelatingPropertyDefinition.Quantities[2].LengthValue,
                                 'Volumen': property_set.RelatingPropertyDefinition.Quantities[3].VolumeValue,
                                 })
                liste_basis =['[mm]', '[mm]', '[mm]', '[m³]']
            elif property_set.RelatingPropertyDefinition.Name == "Pset_ValveTypeCommon":
                thermos_infos = OrderedDict({'Druckverlust': property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue,
                                             'Gesamtdruckverlust Strang': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue,
                                             'Ventilautorität': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                             'Kvs-Wert': round(property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,5)
                                 })
                liste_thermos =['[mbar]', '[mbar]', '', '[m³/]']
            else:
                pass
            baujahr = str(heizungskoerper.Description).split(',')[1]
            allgemein_infos = OrderedDict({'Beschreibung': beschreibung, 'Hersteller': hersteller, 'Baujahr': baujahr,
                                'Geschoss': geschoss, 'Raum': raum
                                 })
            liste_a =['', '', '','', '']
            
            
        grid_b1 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Heizkoerper'].add_widget(grid_b1)
        button1 = Button(text= "Allgemein"); grid_b1.add_widget(button1) 
        grid_add1 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Heizkoerper'].add_widget(grid_add1)
        i = 0
        for k in allgemein_infos:
            text = Label(text=k)
            grid_add1.add_widget(text)
            text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2))
            grid_add1.add_widget(text1)
            i=i+1
        grid_b2 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Heizkoerper'].add_widget(grid_b2)
        button2 = Button(text= "Heizkoerper"); grid_b2.add_widget(button2) 
        grid_add2 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Heizkoerper'].add_widget(grid_add2) 
        i = 0
        for k in auslegung_infos:
            text = Label(text=k)
            grid_add2.add_widget(text)
            text1 = Label (text=str(auslegung_infos[k])+' '+liste_aus[i], color= (0.2,0.6,0,2))
            grid_add2.add_widget(text1)
            i=i+1
        grid_b3 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Heizkoerper'].add_widget(grid_b3)
        button3 = Button(text= "Maße"); grid_b3.add_widget(button3)         
        grid_add3 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Heizkoerper'].add_widget(grid_add3)         
        i = 0
        for k in basismengen_infos:
            text = Label(text=k)
            grid_add3.add_widget(text)
            text1 = Label (text=str(basismengen_infos[k])+' '+liste_basis[i], color= (0.2,0.6,0,2))
            grid_add3.add_widget(text1)
            i=i+1
        grid_b4 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Heizkoerper'].add_widget(grid_b4)
        button4 = Button(text= "Thermostatventil"); grid_b4.add_widget(button4)         
        grid_add4 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Heizkoerper'].add_widget(grid_add4)         
        i = 0
        for k in thermos_infos:
            text = Label(text=k)
            grid_add4.add_widget(text)
            text1 = Label (text=str(thermos_infos[k])+' '+liste_thermos[i], color= (0.2,0.6,0,2))
            grid_add4.add_widget(text1)
            i=i+1
        grid_add5 = GridLayout(cols=1, size_hint=[1.0, 0.05])
        self.our_layouts['Heizkoerper'].add_widget(grid_add5)   
        button_zurueck = Button(text= "zurück zu den Bauteilen", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add5.add_widget(button_zurueck)

class Heizflaechen(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Heizflaechen, self).__init__(*args, **kwargs)
        ifc_system = ifcopenshell.open('System_verbunden.ifc')
        self.our_layouts['Heizflaechen'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Heizflaechen']);self.current_layout='Heizflaechen'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.08])
        self.our_layouts['Heizflaechen'].add_widget(grid_titel)
        titel = Label(text='Heizflächen', font_size=30)
        grid_titel.add_widget(titel)
        grid_b1 = GridLayout(cols=5); self.our_layouts['Heizflaechen'].add_widget(grid_b1)
        text = Label(text='Beschreibung'); text1 = Label(text='Wärmeleistung'); text2 = Label(text='Vorlauftemperatur')
        text3 = Label(text='Rücklauftemperatur'); text4 = Label(text='Volumenstrom')
        grid_b1.add_widget(text); grid_b1.add_widget(text1); grid_b1.add_widget(text2)
        grid_b1.add_widget(text3); grid_b1.add_widget(text4)
        for element in ifc_system.by_type('IfcSpaceHeater'):
            if 'Fussbodenheizung' in element.Name:
                allgemein_infos = OrderedDict({'Beschreibung': element.Name.split(' ')[0]+ ' '+ element.Name.split(' ')[1]})
                liste_a =['']
                for property_set in element.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                        auslegung_infos = OrderedDict({'Wärmeleistung': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue,
                                    'Vorlauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                    'Rücklauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                    'Volumenstrom': round(property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue,3)
                                 })
                        liste_aus =['Watt', '°C', '°C', 'm³/h']
            elif 'Heizkoerper' or 'Heizkörper' in element.Name:
                allgemein_infos = OrderedDict({'Beschreibung': element.Name.split(' ')[0]+ ' '+ element.Name.split(' ')[1]})
                liste_a =['']
                for property_set in element.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                        auslegung_infos = OrderedDict({'Wärmeleistung': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                    'Vorlauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue,
                                    'Rücklauftemperatur': property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue,
                                    'Volumenstrom': round(property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue, 3)
                                 })
                        liste_aus =['Watt', '°C', '°C', 'm³/h']
            i = 0
            for k in allgemein_infos:
                text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2))
                grid_b1.add_widget(text1)
                i=i+1 
                i = 0       
            for k in auslegung_infos:
                text1 = Label (text=str(auslegung_infos[k])+' '+liste_aus[i], color= (0.2,0.6,0,2))
                grid_b1.add_widget(text1)
                i=i+1
        grid_add4 = GridLayout(cols=1, size_hint=[1.0, 0.05])
        self.our_layouts['Heizflaechen'].add_widget(grid_add4)   
        button_zurueck = Button(text= "zurück zu den Bauteilen", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add4.add_widget(button_zurueck)


class Verteiler(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Verteiler, self).__init__(*args, **kwargs)
        ifc_system = ifcopenshell.open('System.ifc')
        for objekt in ifc_system.by_type('IfcFlowSegment'):
            if objekt.Name == 'Verteiler-Heizkreis':
                verteiler = objekt
        self.our_layouts['Verteiler'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Verteiler']);self.current_layout='Verteiler'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.08])
        self.our_layouts['Verteiler'].add_widget(grid_titel)
        titel = Label(text='Verteiler', font_size=30)
        grid_titel.add_widget(titel)
        for property_set in verteiler.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_EnvironmentalImpactIndicators":
                beschreibung = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_ManufacturerTypeInformation":
                hersteller = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_PipeFittingTypeCommon":
                geschoss = property_set.RelatingPropertyDefinition.HasProperties[7].NominalValue.wrappedValue
                auslegung_infos = OrderedDict({'Anzahl Heizkreise': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                 'Max. Betriebsdruck': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                 'Max. Betriebstemperatur': property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue
                                 })
                liste_aus =['', '[bar]', '[°C]']   
            elif property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                basismengen_infos = OrderedDict({'Höhe':property_set.RelatingPropertyDefinition.Quantities[0].LengthValue,
                                 'Länge': property_set.RelatingPropertyDefinition.Quantities[1].LengthValue, 
                                 'Tiefe': property_set.RelatingPropertyDefinition.Quantities[2].LengthValue,
                                 'Fläche': round(property_set.RelatingPropertyDefinition.Quantities[3].AreaValue,3),
                                 'Volumen': round(property_set.RelatingPropertyDefinition.Quantities[4].VolumeValue,3)
                                 })
                liste_basis =['[mm]', '[mm]', '[mm]', '[m²]','[m³]']
            else:
                pass
            baujahr = str(verteiler.Description).split(',')[1]      
            allgemein_infos = OrderedDict({'Beschreibung': beschreibung, 'Hersteller': hersteller, 'Baujahr': baujahr, 'Geschoss': geschoss
                                 })
            liste_a =['', '', '','']   
        grid_b1 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Verteiler'].add_widget(grid_b1)
        button1 = Button(text= "Allgemein"); grid_b1.add_widget(button1) 
        grid_add1 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Verteiler'].add_widget(grid_add1)
        i = 0
        for k in allgemein_infos:
            text = Label(text=k)
            grid_add1.add_widget(text)
            text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2))
            grid_add1.add_widget(text1)
            i=i+1
        grid_b2 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Verteiler'].add_widget(grid_b2)
        button2 = Button(text= "Auslegung"); grid_b2.add_widget(button2) 
        grid_add2 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Verteiler'].add_widget(grid_add2) 
        i = 0
        for k in auslegung_infos:
            text = Label(text=k)
            grid_add2.add_widget(text)
            text1 = Label (text=str(auslegung_infos[k])+' '+liste_aus[i], color= (0.2,0.6,0,2))
            grid_add2.add_widget(text1)
            i=i+1
        grid_b3 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Verteiler'].add_widget(grid_b3)
        button3 = Button(text= "Maße"); grid_b3.add_widget(button3)         
        grid_add3 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Verteiler'].add_widget(grid_add3)         
        i = 0
        for k in basismengen_infos:
            text = Label(text=k)
            grid_add3.add_widget(text)
            text1 = Label (text=str(basismengen_infos[k])+' '+liste_basis[i], color= (0.2,0.6,0,2))
            grid_add3.add_widget(text1)
            i=i+1
        grid_add4 = GridLayout(cols=1, size_hint=[1.0, 0.05])
        self.our_layouts['Verteiler'].add_widget(grid_add4)   
        button_zurueck = Button(text= "zurück zu den Bauteilen", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add4.add_widget(button_zurueck)

class Pufferspeicher(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Pufferspeicher, self).__init__(*args, **kwargs)
        ifc_system = ifcopenshell.open('System_verbunden.ifc')
        for objekt in ifc_system.by_type('IfcFlowStorageDevice'):
            puffer = objekt
        self.our_layouts['Pufferspeicher'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Pufferspeicher']);self.current_layout='Pufferspeicher'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.08])
        self.our_layouts['Pufferspeicher'].add_widget(grid_titel)
        titel = Label(text='Pufferspeicher', font_size=30)
        grid_titel.add_widget(titel)
        for property_set in puffer.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_EnvironmentalImpactIndicators":
                beschreibung = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_TankTypeCommon":
                speichervolumen = property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                geschoss = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_ManufacturerTypeInformation":
                hersteller = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue 
            elif property_set.RelatingPropertyDefinition.Name == "Pset_DistributionFlowElementCommon":
                for objekt in ifc_system.by_type("IfcDistributionFlowElement"):
                    if objekt.Name == 'Frischwasserstation':
                        auslegung_infos = OrderedDict({'Zieltemperatur': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue,
                                         'Vorlauftemperatur-Heizkreis': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                         'Rücklauftemperatur-Heizkreis': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                         'Vorlauftemperatur-FWS': property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue,
                                         'Leistung-Heizstab': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
                                         })
                        liste_aus =['kWh/tag', '°C', '°C', '°C','°C','kW']      
                    else:
                        auslegung_infos = OrderedDict({'Zieltemperatur': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue,
                                         'Vorlauftemperatur-Heizkreis': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                         'Rücklauftemperatur-Heizkreis': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                         'Leistung-Heizstab': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue
                                         })
                        liste_aus =['kWh/tag', '[kg]', '°C', '°C', '°C','kW']  
            elif property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                hoehe = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue,
                breite = property_set.RelatingPropertyDefinition.Quantities[1].LengthValue, 
                tiefe = property_set.RelatingPropertyDefinition.Quantities[2].LengthValue,
                flaeche = round(property_set.RelatingPropertyDefinition.Quantities[3].AreaValue,3),
                volumen = round(property_set.RelatingPropertyDefinition.Quantities[4].VolumeValue,3)
            else:
                pass
        allgemein_infos = OrderedDict({'Beschreibung': beschreibung, 'Hersteller': hersteller, 'Geschoss': geschoss
                                 })
        liste_a =['', '','']  
        basismengen_infos = OrderedDict({'Speichervolumen': speichervolumen, 'Höhe':hoehe, 'Breite': breite, 'Tiefe': tiefe, 'Fläche': flaeche, 'Volumen': volumen
                                 })
        liste_basis =['liter', 'mm', 'mm', 'mm','m²','m³']
        grid_b1 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Pufferspeicher'].add_widget(grid_b1)
        button1 = Button(text= "Allgemein"); grid_b1.add_widget(button1) 
        grid_add1 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Pufferspeicher'].add_widget(grid_add1)
        i = 0
        for k in allgemein_infos:
            text = Label(text=k)
            grid_add1.add_widget(text)
            text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2))
            grid_add1.add_widget(text1)
            i=i+1
        grid_b2 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Pufferspeicher'].add_widget(grid_b2)
        button2 = Button(text= "Auslegung"); grid_b2.add_widget(button2) 
        grid_add2 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Pufferspeicher'].add_widget(grid_add2) 
        i = 0
        for k in auslegung_infos:
            text = Label(text=k)
            grid_add2.add_widget(text)
            text1 = Label (text=str(auslegung_infos[k])+' '+liste_aus[i], color= (0.2,0.6,0,2))
            grid_add2.add_widget(text1)
            i=i+1
        grid_b3 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Pufferspeicher'].add_widget(grid_b3)
        button3 = Button(text= "Maße"); grid_b3.add_widget(button3)         
        grid_add3 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Pufferspeicher'].add_widget(grid_add3)         
        i = 0
        for k in basismengen_infos:
            text = Label(text=k)
            grid_add3.add_widget(text)
            text1 = Label (text=str(basismengen_infos[k])+' '+liste_basis[i], color= (0.2,0.6,0,2))
            grid_add3.add_widget(text1)
            i=i+1
        grid_add4 = GridLayout(cols=1, size_hint=[1.0, 0.05])
        self.our_layouts['Pufferspeicher'].add_widget(grid_add4)   
        button_zurueck = Button(text= "zurück zu den Bauteilen", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add4.add_widget(button_zurueck)
        
class TWW_Speicher(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(TWW_Speicher, self).__init__(*args, **kwargs)
        ifc_system = ifcopenshell.open('System.ifc')
        for objekt in ifc_system.by_type('IfcFlowStorageDevice'):
            if objekt.Name == 'TWW_Speicher':
                tww_speicher = objekt
        self.our_layouts['TWW_Speicher'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['TWW_Speicher']);self.current_layout='TWW_Speicher'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.08])
        self.our_layouts['TWW_Speicher'].add_widget(grid_titel)
        titel = Label(text='TWW_Speicher', font_size=30)
        grid_titel.add_widget(titel)
        for property_set in tww_speicher.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_EnvironmentalImpactIndicators":
                beschreibung = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_TankTypeCommon":
                speichervolumen = property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue
                geschoss = property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_ManufacturerTypeInformation":
                hersteller = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue 
            elif property_set.RelatingPropertyDefinition.Name == "Pset_DistributionFlowElementCommon":
                auslegung_infos = OrderedDict({'Zieltemperatur': property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue,
                                 'Vorlauftemperatur-WP': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                 'Rücklauftemperatur-WP': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                 'Vorlauftemperatur-TWW': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue,
                                 'Leistung-Heizstab': property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue
                                 }) 
            elif property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                hoehe = property_set.RelatingPropertyDefinition.Quantities[0].LengthValue,
                breite = property_set.RelatingPropertyDefinition.Quantities[1].LengthValue, 
                tiefe = property_set.RelatingPropertyDefinition.Quantities[2].LengthValue,
                flaeche = round(property_set.RelatingPropertyDefinition.Quantities[3].AreaValue,3),
                volumen = round(property_set.RelatingPropertyDefinition.Quantities[4].VolumeValue,3)
            else:
                pass
            baujahr = str(tww_speicher.Description).split(',')[1] 
            allgemein_infos = OrderedDict({'Beschreibung': beschreibung, 'Hersteller': hersteller, 'Baujahr': baujahr, 'Geschoss': geschoss
                                 })
            liste_a =['', '', '','']  
            basismengen_infos = OrderedDict({'Speichervolumen': speichervolumen, 'Höhe':hoehe, 'Breite': breite, 'Tiefe': tiefe, 'Fläche': flaeche, 'Volumen': volumen
                                 })
            liste_basis =['liter', 'mm', 'mm', 'mm','m²','m³']
        grid_b1 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['TWW_Speicher'].add_widget(grid_b1)
        button1 = Button(text= "Allgemein"); grid_b1.add_widget(button1) 
        grid_add1 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['TWW_Speicher'].add_widget(grid_add1)
        i = 0
        for k in allgemein_infos:
            text = Label(text=k)
            grid_add1.add_widget(text)
            text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2))
            grid_add1.add_widget(text1)
            i=i+1
        grid_b2 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['TWW_Speicher'].add_widget(grid_b2)
        button2 = Button(text= "Auslegung"); grid_b2.add_widget(button2) 
        grid_add2 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['TWW_Speicher'].add_widget(grid_add2) 
        i = 0
        for k in auslegung_infos:
            text = Label(text=k)
            grid_add2.add_widget(text)
            text1 = Label (text=str(auslegung_infos[k])+' '+liste_aus[i], color= (0.2,0.6,0,2))
            grid_add2.add_widget(text1)
            i=i+1
        grid_b3 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['TWW_Speicher'].add_widget(grid_b3)
        button3 = Button(text= "Maße"); grid_b3.add_widget(button3)         
        grid_add3 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['TWW_Speicher'].add_widget(grid_add3)         
        i = 0
        for k in basismengen_infos:
            text = Label(text=k)
            grid_add3.add_widget(text)
            text1 = Label (text=str(basismengen_infos[k])+' '+liste_basis[i], color= (0.2,0.6,0,2))
            grid_add3.add_widget(text1)
            i=i+1
        grid_add4 = GridLayout(cols=1, size_hint=[1.0, 0.05])
        self.our_layouts['TWW_Speicher'].add_widget(grid_add4)   
        button_zurueck = Button(text= "zurück zu den Bauteilen", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add4.add_widget(button_zurueck)
        
class Frischwasserstation(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Frischwasserstation, self).__init__(*args, **kwargs)
        ifc_system = ifcopenshell.open('System.ifc')
        for objekt in ifc_system.by_type('IfcUnitaryEquipment'):
            if objekt.Name == 'Frischwasserstation':
                fws = objekt
        self.our_layouts['Frischwasserstation'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Frischwasserstation']);self.current_layout='Frischwasserstation'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.08])
        self.our_layouts['Frischwasserstation'].add_widget(grid_titel)
        titel = Label(text='Frischwasserstation', font_size=30)
        grid_titel.add_widget(titel)
        for property_set in fws.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_EnvironmentalImpactIndicators":
                beschreibung = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_ManufacturerTypeInformation":
                hersteller = property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue
            elif property_set.RelatingPropertyDefinition.Name == "Pset_UnitaryEquipmentTypeCommon":
                geschoss = property_set.RelatingPropertyDefinition.HasProperties[12].NominalValue.wrappedValue
                auslegung_infos = OrderedDict({'Übertragungsleistung (Auslegungspunkt)':property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue,
                                    'Maximaler Volumenstrom (sekundär)': property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,
                                    'Primär Volumenstrom': property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue,
                                    'Sekundär Volumenstrom': property_set.RelatingPropertyDefinition.HasProperties[4].NominalValue.wrappedValue,
                                    'Zulässiger Betriebsdruck': property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue,
                                    'Vorlauftemperatur Warmwasser': property_set.RelatingPropertyDefinition.HasProperties[8].NominalValue.wrappedValue,
                                    'Kaltwassertemperatur': property_set.RelatingPropertyDefinition.HasProperties[9].NominalValue.wrappedValue,
                                    'Vorlauftemperatur vom Speicher': property_set.RelatingPropertyDefinition.HasProperties[10].NominalValue.wrappedValue,
                                    'Rücklauftemperatur zum Speicher': property_set.RelatingPropertyDefinition.HasProperties[11].NominalValue.wrappedValue
                                 })
                liste_aus =['kW', 'l/min', 'l/min', 'l/min', 'bar', '°C', '°C', '°C','°C']
            elif property_set.RelatingPropertyDefinition.Name == "Base_Quantities":
                basismengen_infos = OrderedDict({'Höhe':property_set.RelatingPropertyDefinition.Quantities[0].LengthValue,
                                 'Breite': property_set.RelatingPropertyDefinition.Quantities[1].LengthValue, 
                                 'Tiefe': property_set.RelatingPropertyDefinition.Quantities[2].LengthValue,
                                 'Fläche': round(property_set.RelatingPropertyDefinition.Quantities[3].AreaValue,3),
                                 'Volumen': round(property_set.RelatingPropertyDefinition.Quantities[4].VolumeValue,3)
                                 })
                liste_basis =['mm', 'mm', 'mm', 'm²','m³']
            else:
                pass
        allgemein_infos = OrderedDict({'Beschreibung': beschreibung, 'Hersteller': hersteller,  'Geschoss': geschoss
                                 })
        liste_a =['', '', '']
        grid_b1 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Frischwasserstation'].add_widget(grid_b1)
        button1 = Button(text= "Allgemein"); grid_b1.add_widget(button1) 
        grid_add1 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Frischwasserstation'].add_widget(grid_add1)
        i = 0
        for k in allgemein_infos:
            text = Label(text=k)
            grid_add1.add_widget(text)
            text1 = Label (text=str(allgemein_infos[k])+' '+liste_a[i], color= (0.2,0.6,0,2))
            grid_add1.add_widget(text1)
            i=i+1
        grid_b2 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Frischwasserstation'].add_widget(grid_b2)
        button2 = Button(text= "Auslegung"); grid_b2.add_widget(button2) 
        grid_add2 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Frischwasserstation'].add_widget(grid_add2) 
        i = 0
        for k in auslegung_infos:
            text = Label(text=k)
            grid_add2.add_widget(text)
            text1 = Label (text=str(auslegung_infos[k])+' '+liste_aus[i], color= (0.2,0.6,0,2))
            grid_add2.add_widget(text1)
            i=i+1
        grid_b3 = GridLayout(cols=1, size_hint=[1.0, 0.04]); self.our_layouts['Frischwasserstation'].add_widget(grid_b3)
        button3 = Button(text= "Maße"); grid_b3.add_widget(button3)         
        grid_add3 = GridLayout(cols=4, size_hint=[1.0, 0.25]); self.our_layouts['Frischwasserstation'].add_widget(grid_add3)         
        i = 0
        for k in basismengen_infos:
            text = Label(text=k)
            grid_add3.add_widget(text)
            text1 = Label (text=str(basismengen_infos[k])+' '+liste_basis[i], color= (0.2,0.6,0,2))
            grid_add3.add_widget(text1)
            i=i+1
        grid_add4 = GridLayout(cols=1, size_hint=[1.0, 0.05])
        self.our_layouts['Frischwasserstation'].add_widget(grid_add4)   
        button_zurueck = Button(text= "zurück zu den Bauteilen", background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add4.add_widget(button_zurueck)

#Ergebnisse
class Ergebnisse(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Ergebnisse, self).__init__(*args, **kwargs)
        self.our_layouts['Ergebnisse'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Ergebnisse']);self.current_layout='Ergebnisse'
        grid_add = GridLayout(cols=1)
        self.our_layouts['Ergebnisse'].add_widget(grid_add)
        button_gebaeude = Button(text="Ergebnisse hydraulischer Abgleich", on_release=self.switch_layout)
        button_raeume = Button(text="Ergebnisse der Lastberechnungen", on_release=self.switch_layout)
        button_zurueck = Button(text= "zurück zur Analyseübersicht", on_release=self.switch_layout)
        grid_add.add_widget(button_gebaeude); grid_add.add_widget(button_raeume); grid_add.add_widget(button_zurueck)

class Ergeb_Abgleich(Mixed_class):      #Ergebnisse anzeigen
    def __init__(self, *args, **kwargs):
        super(Ergeb_Abgleich, self).__init__(*args, **kwargs)
        self.our_layouts['Ergeb_Abgleich'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Ergeb_Abgleich']);self.current_layout='Ergeb_Abgleich'
        grid_add = GridLayout(cols=1, size_hint=[1.0, 0.9])
        self.our_layouts['Ergeb_Abgleich'].add_widget(grid_add)
        titel = Label(text='Ergebnisse des hydraulischen Abgleichs', font_size=30,size_hint=[1.0, 0.1])
        grid_add.add_widget(titel)
        abgleich = Image(source='Abgleich.png', keep_ratio= False, size_hint=[1.0, 0.8])
        grid_add.add_widget(abgleich)
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0, 0.1])
        self.our_layouts['Ergeb_Abgleich'].add_widget(grid_add1)
        pumpe = Image(source='Pumpe.png', keep_ratio= False, size_hint=[1.0, 0.8])
        grid_add1.add_widget(pumpe)
        button_zurueck = Button(text= "zurück zum Hauptmenü", on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck)   


class Ergeb_Last(Mixed_class):
    def __init__(self, *args, **kwargs):
        super(Ergeb_Last, self).__init__(*args, **kwargs)
        self.rooms = ifc_file.by_type("IfcSpace")
        self.our_layouts['Ergeb_Last'] = BoxLayout(spacing=10, orientation='vertical')
        # gleich aufsetzen:
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Ergeb_Last']);self.current_layout='Ergeb_Last'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.2])
        self.our_layouts['Ergeb_Last'].add_widget(grid_titel)
        titel = Label(text='Ergebnisse Lastberechnungen', font_size=28,size_hint=[1.0, 0.25])
        grid_titel.add_widget(titel)
        #outline_width=2, outline_color=[0.2]*4, # Glow/Schatten # Label
        ifc_system = ifcopenshell.open('System.ifc')
        techno = ifc_system.by_type("IfcBuilding")[0]       
        if 'FWS' or 'TWW' in techno.description:
            tww_last_ifc = ifcopenshell.open('Heizlast_TWW.ifc')
            building_tww = tww_last_ifc.by_type('IfcBuilding')[0]
            for property_set in building_tww.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "TWW_Quantities":
                    warmwasserlast = round(property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue*1000, 0)
                    grid_b1 = GridLayout(cols=2); self.our_layouts['Ergeb_Last'].add_widget(grid_b1)
                    text = Label(text='Trinkwarmwasser', font_size = 24)
                    text1 = Label(text=str(warmwasserlast)+ ' [Watt]', font_size = 24, color= (0.2,0.6,0,2))
                    grid_b1.add_widget(text); grid_b1.add_widget(text1);
        heizlast_ifc  = ifcopenshell.open('Heizlast.ifc')
        building_heiz = heizlast_ifc.by_type('IfcBuilding')[0]
        for property_set in building_heiz.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_Building":
                heizlast = round(property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue + property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue, 0)
                grid_c1 = GridLayout(cols=2); self.our_layouts['Ergeb_Last'].add_widget(grid_c1)
                text = Label(text='Gebäudeheizlast', font_size = 24)
                text1 = Label(text=str(heizlast)+ ' [Watt]', font_size = 24, color= (0.2,0.6,0,2))
                grid_c1.add_widget(text); grid_c1.add_widget(text1)
        grid_d1 = GridLayout(cols=4); self.our_layouts['Ergeb_Last'].add_widget(grid_d1)
        ### Add labels and input-fields
        text0 = Label(text="")
        text1 = Label(text="Lftwärme [Watt]", font_size=20)
        text2 = Label(text="Transwärme [Watt]", font_size=20)
        text3 = Label(text="Gesamt [Watt]", font_size=20)
        grid_d1.add_widget(text0); grid_d1.add_widget(text1); grid_d1.add_widget(text2); grid_d1.add_widget(text3);# Titles
        for raum in heizlast_ifc.by_type('IfcSpace'):
            for property_set in raum.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "Pset_Space":
                    last = round(property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue + property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue, 0)
                    beschreibung = Label (text=str(raum.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue))
                    lft    = Label (text=str(round(raum.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue, 2)), color= (0.8,0.1,0,1))
                    trans  = Label (text=str(round(raum.IsDefinedBy[0].RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue, 2)), color= (0.8,0.1,0,1))
                    ges_ergebnis = round(float(lft.text)+float(trans.text),1)
                    ges    = Label (text=str(ges_ergebnis), color= (0.8,0.1,0,1))
                    grid_d1.add_widget(beschreibung); grid_d1.add_widget(lft); grid_d1.add_widget(trans); grid_d1.add_widget(ges);
        grid_add = GridLayout(cols=1);
        self.our_layouts['Ergeb_Last'].add_widget(grid_add)
        button_waende= Button(text="zurück zum Hauptmenü", font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add.add_widget(button_waende)

#Qualitätssicherung
class Dimensionierung(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Dimensionierung, self).__init__(*args, **kwargs)
        self.our_layouts['Dimensionierung'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Dimensionierung']);self.current_layout='Dimensionierung'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Dimensionierung'].add_widget(grid_titel)
        titel = Label(text='QS - Dimensionierung', font_size=30)
        grid_titel.add_widget(titel)       
        
        grid_dimen = GridLayout(cols=4, size_hint=[1.0, 0.7]); self.our_layouts['Dimensionierung'].add_widget(grid_dimen)
        text = Label(text='Beschreibung'); text1 = Label(text='Leistung'); text2 = Label(text='Leistung - Ideal')
        text3 = Label(text='Differenz')
        grid_dimen.add_widget(text); grid_dimen.add_widget(text1)
        grid_dimen.add_widget(text2); grid_dimen.add_widget(text3)
        ifc_last   = ifcopenshell.open('Heizlast.ifc')
        ifc_tww    = ifcopenshell.open('Heizlast_TWW.ifc')
        ifc_system = ifcopenshell.open('System_verbunden.ifc')
        for objekt in ifc_system.by_type('IfcUnitaryEquipment'):
            if 'Wärmepumpe' in objekt.Name:
                wp = objekt
        for property_set in wp.IsDefinedBy:
            if  property_set.RelatingPropertyDefinition.Name == "Pset_UnitaryEquipmentTypeCommon":
                wp_leistung = round(property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue,1)
        techno = ifc_system.by_type("IfcBuilding")[0]       
        building_heiz = ifc_last.by_type('IfcBuilding')[0]
        for property_set in building_heiz.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_Building":
                heizlast = round(property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue + property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue,1)
        if 'FWS' or 'TWW' in techno.Description:
            tww_last_ifc = ifcopenshell.open('Heizlast_TWW.ifc')
            building_tww = tww_last_ifc.by_type('IfcBuilding')[0]
            for property_set in building_tww.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "TWW_Quantities":
                    warmwasserlast = round(property_set.RelatingPropertyDefinition.HasProperties[0].NominalValue.wrappedValue*1000, 1)
                    heizlast = round(heizlast + warmwasserlast,1)
        txt1 = Label(text=wp.Name, font_size=14)
        txt2 = Label(text=str(wp_leistung) +' Watt', font_size=14)
        txt3 = Label(text= str(heizlast)+' Watt', font_size=14)
        differenz = round(wp_leistung - heizlast,1)
        if differenz > 100.0 or differenz < -100.0:
            txt4 = Label(text= str(differenz)+' Watt', font_size=14, color= (0.8,0.1,0,1))
        else:
            txt4 = Label(text= str(differenz)+' Watt', font_size=14, color= (0.1,0.8,0,1))
        grid_dimen.add_widget(txt1); grid_dimen.add_widget(txt2)
        grid_dimen.add_widget(txt3); grid_dimen.add_widget(txt4)
        leistungen = {}
        heizflaechen = ifc_system.by_type('IfcSpaceHeater')
        for heizung in heizflaechen:
            if "Fussbodenheizung" in heizung.Name:
                for property_set in heizung.IsDefinedBy:
                    if  property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                        leistung = round(property_set.RelatingPropertyDefinition.HasProperties[1].NominalValue.wrappedValue, 1)
                        leistungen[heizung.Name] = leistung                
            elif "Heizkoerper" in heizung.Name:
                for property_set in heizung.IsDefinedBy:
                    if  property_set.RelatingPropertyDefinition.Name == "Pset_SpaceHeaterTypeCommon":
                        leistung = round(property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue, 1)
                        leistungen[heizung.Name] = leistung
        lasten = {}
        raeume = ifc_last.by_type('IfcSpace')
        for raum in raeume:
            for property_set in raum.IsDefinedBy:
                if  property_set.RelatingPropertyDefinition.Name == "Pset_Space":
                    last = round(property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue + property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue, 1)
                    lasten[raum.Name] = last
        for heizung in heizflaechen:
            raumname = heizung.Name.split(' ')[1]
            txt1 = Label(text=heizung.Name, font_size=14)
            txt2 = Label(text=str(leistungen[heizung.Name]) +' Watt', font_size=14)
            txt3 = Label(text= str(lasten[raumname])+' Watt', font_size=14)
            differenz = round(leistungen[heizung.Name] - lasten[raumname],1)
            if differenz > 5.0 or differenz <-5.0:
                txt4 = Label(text= str(differenz)+' Watt', font_size=14, color= (0.8,0.1,0,1))
            else:
                txt4 = Label(text= str(differenz)+' Watt', font_size=14, color= (0.1,0.8,0,1))
            grid_dimen.add_widget(txt1); grid_dimen.add_widget(txt2)
            grid_dimen.add_widget(txt3); grid_dimen.add_widget(txt4)
        grid_add = GridLayout(cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Dimensionierung'].add_widget(grid_add)
        button_zurueck      = Button(text= "zurück zum Qualitätssicherungsmenü", on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck)

class Eignung_WP(Mixed_class):    
    def __init__(self, *args, **kwargs):
        super(Eignung_WP, self).__init__(*args, **kwargs)
        self.our_layouts['Eignung_WP'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Eignung_WP']);self.current_layout='Eignung_WP'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Eignung_WP'].add_widget(grid_titel)
        titel = Label(text='Eignung für Wärmepumpensystem', font_size=30)
        grid_titel.add_widget(titel)

        ifc_last   = ifcopenshell.open('Heizlast.ifc')
        ifc_tww    = ifcopenshell.open('Heizlast_TWW.ifc')
        building_heiz = ifc_last.by_type('IfcBuilding')[0]
        for property_set in building_heiz.IsDefinedBy:
            if property_set.RelatingPropertyDefinition.Name == "Pset_Building":
                heizlast = round(property_set.RelatingPropertyDefinition.HasProperties[5].NominalValue.wrappedValue + property_set.RelatingPropertyDefinition.HasProperties[6].NominalValue.wrappedValue,1)
        flaeche = 0
        for objekt in ifc_last.by_type('IfcSpace'):
            for property_set in objekt.IsDefinedBy:
                if property_set.RelatingPropertyDefinition.Name == "BaseQuantities":
                    flaeche = flaeche + property_set.RelatingPropertyDefinition.Quantities[1].AreaValue
        last_spez = round(heizlast/flaeche,2)
        grid_eignung = GridLayout(cols=4, size_hint=[1.0, 0.55]); self.our_layouts['Eignung_WP'].add_widget(grid_eignung)
        text = Label(text='Gebäudeheizlast', font_size=22); text1 = Label(text='Zu beheizende Fläche', font_size=22)
        text2 = Label(text='Spezifische Heizlast', font_size=22); text3 = Label(text='Grenzwert für Eignung', font_size=22)
        grid_eignung.add_widget(text); grid_eignung.add_widget(text1)
        grid_eignung.add_widget(text2); grid_eignung.add_widget(text3)
        
        txt1 = Label(text= str(heizlast)+' Watt', font_size=20)
        txt2 = Label(text= str(flaeche)+' m²', font_size=20)
        txt3 = Label(text= str(last_spez)+' W/m²', font_size=20)
        txt4 = Label(text= '100 W/m²', font_size=20)
        grid_eignung.add_widget(txt1); grid_eignung.add_widget(txt2)
        grid_eignung.add_widget(txt3); grid_eignung.add_widget(txt4)
        
        grid_add1 = GridLayout(cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Eignung_WP'].add_widget(grid_add1)
        if last_spez <= 100.0:
            text_eignung = Label(text= 'Das Gebäude eignet sich für den effizenten Einsatz einer Wärmepumpe.', font_size=18, color= (0.1,0.8,0,1))
        else:
            text_eignung = Label(text= 'Das Gebäude eignet sich derzeit nicht für den effizenten Einsatz einer Wärmepumpe und sollte renoviert werden.', font_size=18, color= (0.8,0.1,0,1))
        grid_add1.add_widget(text_eignung)
        
        grid_add = GridLayout(cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Eignung_WP'].add_widget(grid_add)
        button_zurueck      = Button(text= "zurück zum Qualitätssicherungsmenü", on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck)
        
class Eignung_Heizflaechen(Mixed_class): 
    def leistungsangabe(self, instance, leistung):
        self.leistungen[str(instance)].text = str(leistung) + ' Watt'
    def __init__(self, *args, **kwargs):
        super(Eignung_Heizflaechen, self).__init__(*args, **kwargs)
        self.our_layouts['Eignung_Heizflaechen'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Eignung_Heizflaechen']);self.current_layout='Eignung_Heizflaechen'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Eignung_Heizflaechen'].add_widget(grid_titel)
        titel = Label(text='Eignung vorhandener Heizflächen', font_size=30)
        grid_titel.add_widget(titel)
        
        lst = ["Heizkörper/Heizfläche", "Raum", "Normwärmeleistung - Empfehlung", "Normwärmeleistung - real (60/45/20)"]
        grid_add = GridLayout(spacing=10, cols=4)
        self.our_layouts['Eignung_Heizflaechen'].add_widget(grid_add)
        for txt in lst:
            txt = Label(text=txt, font_size=22)
            grid_add.add_widget(txt)
        heizlast_ifc = ifcopenshell.open('Heizlast.ifc')
        ifc_system   = ifcopenshell.open('System_verbunden.ifc')
        self.lasten = {}
        raeume       = heizlast_ifc.by_type('IfcSpace')
        for raum in raeume:
            for property_set in raum.IsDefinedBy:
                if  property_set.RelatingPropertyDefinition.Name == "Pset_Space":
                    last = round(property_set.RelatingPropertyDefinition.HasProperties[2].NominalValue.wrappedValue + property_set.RelatingPropertyDefinition.HasProperties[3].NominalValue.wrappedValue, 2)
                    self.lasten[raum.Name] = last
        heizkoerper  = ifc_system.by_type("IfcSpaceHeater")
        self.heizungen = {}
        self.leistungen = {}
        self.raumnamen = {}
        for heizung in heizkoerper:
            raumname = heizung.Name.split(' ')[1]
            heizungsname = heizung.Name.split(' ')[0]
            self.raumnamen[heizungsname] = raumname
            txt1 = Label(text=heizung.Name.split(' ')[0], font_size=22)
            txt2 = Label(text=raumname, font_size=22)
            txt3 = Label(text= str(int(self.lasten[raumname]))+' Watt', font_size=22)
            grid_add.add_widget(txt1); grid_add.add_widget(txt2); grid_add.add_widget(txt3)
            box_eingabe = BoxLayout (orientation = 'horizontal')
            grid_add.add_widget(box_eingabe)
            self.heizungen[heizungsname] = Slider(min = 400, max = 3000, step = 20, value =int(round(self.lasten[raumname],-1)) )
            #self.heizungen[heizungsname] = Slider(min = round(self.lasten[raumname],-1) -100, max = round(self.lasten[raumname],-1)+2500, step = 10.0, value =round(self.lasten[raumname],-1) )
            box_eingabe.add_widget(self.heizungen[heizungsname])
            self.leistungen[str(self.heizungen[heizungsname])] = Label(text = str(int(round(self.lasten[raumname], -1)))+' Watt', font_size=24)
            box_eingabe.add_widget(self.leistungen[str(self.heizungen[heizungsname])])
            self.heizungen[heizungsname].bind(value = self.leistungsangabe)
            
        
        grid_add1 = GridLayout(spacing=10, cols=2, size_hint=[1.0,0.15])
        self.our_layouts['Eignung_Heizflaechen'].add_widget(grid_add1)
        button_zurueck = Button(text= "zurück zum Qualitätssicherungsmenü", background_color= (0.8,0.1,0,1), 
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        button_weiter= Button(text="Eignung der Heizflächen überprüfen", background_color= (0.1,0.8,0,1),
                                font_size=16, size_hint=(0.5,0.1), on_release=self.switch_layout)
        grid_add1.add_widget(button_zurueck); grid_add1.add_widget(button_weiter)
        
class Eignung_Heizflaechen2(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Eignung_Heizflaechen2, self).__init__(*args, **kwargs)
        self.our_layouts['Eignung_Heizflaechen2'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Eignung_Heizflaechen2']);self.current_layout= 'Eignung_Heizflaechen2'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Eignung_Heizflaechen2'].add_widget(grid_titel)
        titel = Label(text='Eignung vorhandener Heizflächen', font_size=30)
        grid_titel.add_widget(titel)       
        
        lst = ["Heizkörper/Heizfläche", "Raum", "Normwärmeleistung - Empfehlung", "Normwärmeleistung - real (60/45/20)"]
        
        grid_hk = GridLayout(cols=8, size_hint=[1.0, 0.7]); self.our_layouts['Eignung_Heizflaechen2'].add_widget(grid_hk)
        text = Label(text='Heizfläche', font_size=22); text1 = Label(text='Raum', font_size=22); text2 = Label(text="Zielleistung", font_size=22)
        text8 = Label(text="Normleistung (60/45/20)", font_size=22)
        text3 = Label(text="(50/40/20)", font_size=22); text4 = Label(text="(45/35/20)", font_size=22) 
        text5 = Label(text="(40/30/20)", font_size=22); text6 = Label(text="(35/30/20)", font_size=22)
        grid_hk.add_widget(text); grid_hk.add_widget(text1); grid_hk.add_widget(text2); grid_hk.add_widget(text8)
        grid_hk.add_widget(text3); grid_hk.add_widget(text4)
        grid_hk.add_widget(text5); grid_hk.add_widget(text6)
        ifc_last   = ifcopenshell.open('Heizlast.ifc')
        ifc_tww    = ifcopenshell.open('Heizlast_TWW.ifc')
        ifc_system = ifcopenshell.open('System_verbunden.ifc')
        
        for heizkoerper in self.app.qs_heizkoerper:
            txt1 = Label(text= heizkoerper, font_size=22)
            txt2 = Label(text= self.app.qs_heizkoerper[heizkoerper][1], font_size=22)
            if self.app.qs_heizkoerper[heizkoerper][2] > 1500:
                txt3 = Label(text= str(int(self.app.qs_heizkoerper[heizkoerper][2]/2)), font_size=22)
            else:
                txt3 = Label(text= str(int(self.app.qs_heizkoerper[heizkoerper][2])), font_size=22)
            heizlast_soll = float(self.app.qs_heizkoerper[heizkoerper][2])
            heizlast = float(self.app.qs_heizkoerper[heizkoerper][0])
            heizlast1 = round(heizlast*(((10/math.log(30/20))/(15/math.log(40/25))))**1.2,2)
            heizlast2 = round(heizlast*(((10/math.log(25/15))/(15/math.log(40/25))))**1.2,2)
            heizlast3 = round(heizlast*(((10/math.log(20/10))/(15/math.log(40/25))))**1.2,2)
            heizlast4 = round(heizlast*(((5/math.log(15/10))/(15/math.log(40/25))))**1.2,2)
            notwendig = round(float(txt3.text)/(((10/math.log(30/20))/(15/math.log(40/25))))**1.2, 2)
            grid_hk.add_widget(txt1); grid_hk.add_widget(txt2); grid_hk.add_widget(txt3)
            txt8 = Label(text= str(int(heizlast)), font_size=22)
            grid_hk.add_widget(txt8)
            

            if float(txt3.text) <= float(heizlast1):
                heizlast50_20 = Label(text = str(int(heizlast1)), font_size=22, color=(0.1,0.8,0,1))
                grid_hk.add_widget(heizlast50_20)
            else:
                heizlast50_20 = Label(text = str(int(heizlast1)), font_size=22, color=(0.8,0.1,0,1))
                grid_hk.add_widget(heizlast50_20)
            if float(txt3.text) <= heizlast2:
                heizlast45_20 = Label(text = str(int(heizlast2)), font_size=22, color=(0.1,0.8,0,1))
                grid_hk.add_widget(heizlast45_20)
            else:
                heizlast45_20 = Label(text = str(int(heizlast2)), font_size=22, color=(0.8,0.1,0,1))
                grid_hk.add_widget(heizlast45_20)
            if float(txt3.text) <= heizlast3:
                heizlast40_20 = Label(text = str(int(heizlast3)), font_size=22, color=(0.1,0.8,0,1))
                grid_hk.add_widget(heizlast40_20)
            else:
                heizlast40_20 = Label(text = str(int(heizlast3)), font_size=22, color=(0.8,0.1,0,1))
                grid_hk.add_widget(heizlast40_20)
            if float(txt3.text) <= heizlast4:
                heizlast35_20 = Label(text = str(int(heizlast4)), font_size=22, color=(0.1,0.8,0,1))
                grid_hk.add_widget(heizlast35_20)
            else:
                heizlast35_20 = Label(text = str(int(heizlast4)), font_size=22, color=(0.8,0.1,0,1))
                grid_hk.add_widget(heizlast35_20)


        grid_add = GridLayout(cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Eignung_Heizflaechen2'].add_widget(grid_add)
        button_zurueck      = Button(text= "zurück zum Qualitätssicherungsmenü", font_size=16, background_color=(0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck)


class Hydraulischer_Abgleich(Mixed_class):
    #def _store(self, btn): pass    
    def __init__(self, *args, **kwargs):
        super(Hydraulischer_Abgleich, self).__init__(*args, **kwargs)
        self.our_layouts['Hydraulischer_Abgleich'] = BoxLayout(spacing=10, orientation='vertical')
        self.L_BASIS    = BoxLayout(spacing=10, orientation='vertical')# layout_box
        self.add_widget(self.L_BASIS)
        self.L_KOERPER= BoxLayout(spacing=2, orientation='vertical')
        self.L_BASIS.add_widget(self.L_KOERPER)
        self.L_KOERPER.add_widget(self.our_layouts['Hydraulischer_Abgleich']);self.current_layout='Hydraulischer_Abgleich'
        grid_titel = GridLayout(spacing=10, cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Hydraulischer_Abgleich'].add_widget(grid_titel)
        titel = Label(text='QS - Hydraulischer Abgleich', font_size=30)
        grid_titel.add_widget(titel)
        grid_abgleich = GridLayout(cols=5); self.our_layouts['Hydraulischer_Abgleich'].add_widget(grid_abgleich)
        text = Label(text='Heizfläche', font_size = 14); text1 = Label(text='Druckverlust Ventil', font_size = 14); text2 = Label(text='Max. Druckverlust', font_size = 14)
        text3 = Label(text='Ventilautorität', font_size = 14); text4 = Label(text='Ideale Ventilautorität', font_size = 14)
        grid_abgleich.add_widget(text); grid_abgleich.add_widget(text1);
        grid_abgleich.add_widget(text2); grid_abgleich.add_widget(text3);
        grid_abgleich.add_widget(text4)
        ifc_system = ifcopenshell.open('System_verbunden.ifc')
        heizungen = []
        with open("Abgleich.csv") as csvdatei:
            csv_reader_object = csv.DictReader(csvdatei)
            for row in csv_reader_object:
                heizungen.append(row)
        for heizung in heizungen:
            if 'Fussbodenheizung' in heizung['Name']:
                text = Label(text=heizung['Name'].split(' ')[0], font_size = 14)
                verlust = int(round(float(heizung['Druckv. Ventil am Heizregister [Pa]']), 0))
                av = round(float((heizung['VentilautoritÃ¤t [-]'])), 2)
                if verlust > 20000:
                    text1 = Label(text=str(verlust)+ ' [Pa]', color= (0.8,0.1,0,1), font_size = 14)
                else:
                    text1 = Label(text=str(verlust)+ ' [Pa]', color= (0.1,0.8,0,1), font_size = 14)
                text2 = Label(text='20000 [Pa]')
                if av < 0.3 or av > 0.7:
                    text3 = Label(text=str(av) + ' [-]', color= (0.8,0.1,0,1), font_size = 14)
                else:
                    text3 = Label(text=str(av)+ ' [-]', color= (0.1,0.8,0,1), font_size = 14)
                text4 = Label(text='0.3 - 0.7')
                grid_abgleich.add_widget(text); grid_abgleich.add_widget(text1);
                grid_abgleich.add_widget(text2); grid_abgleich.add_widget(text3);
                grid_abgleich.add_widget(text4)
            else:
                text = Label(text=heizung['Name'].split(' ')[0], font_size = 14)
                verlust = int(round(float(heizung['Druckv. Ventil [Pa]']), 0))
                av = round(float((heizung['VentilautoritÃ¤t [-]'])), 2)
                if verlust > 20000:
                    text1 = Label(text=str(verlust)+ ' [Pa]', color= (0.8,0.1,0,1), font_size = 14)
                else:
                    text1 = Label(text=str(verlust)+ ' [Pa]', color= (0.1,0.8,0,1), font_size = 14)
                text2 = Label(text='20000 [Pa]')
                if av < 0.3 or av > 0.7:
                    text3 = Label(text=str(av) + ' [-]', color= (0.8,0.1,0,1), font_size = 14)
                else:
                    text3 = Label(text=str(av)+ ' [-]', color= (0.1,0.8,0,1), font_size = 14)
                text4 = Label(text='0.3 - 0.7')
                grid_abgleich.add_widget(text); grid_abgleich.add_widget(text1);
                grid_abgleich.add_widget(text2); grid_abgleich.add_widget(text3);
                grid_abgleich.add_widget(text4)
        #geschwindigkeiten
        if 'Fussbodenheizung' in heizung['Name']:
            pass
        else:
            grid_b1 = GridLayout(cols=3); self.our_layouts['Hydraulischer_Abgleich'].add_widget(grid_b1)
            text = Label(text='Beschreibung'); text1 = Label(text='Geschwindigkeit'); text2 = Label(text='Grenzwert')
            grid_b1.add_widget(text); grid_b1.add_widget(text1); grid_b1.add_widget(text2)
            hvac_components = ifc_system.by_type("IfcDistributionFlowElement")
            for hvac in hvac_components:
                if 'Rohr - Vorlauf Strang1 - 1' == hvac.Name:
                    rohr_strang1_vl1 = hvac
                elif 'Rohr - Ruecklauf Strang1 - 1' == hvac.Name:
                    rohr_strang1_rl1 = hvac
                elif 'Rohr - Vorlauf Strang1 - 2' == hvac.Name:
                    rohr_strang1_vl2 = hvac
                elif 'Rohr - Ruecklauf Strang1 - 2' == hvac.Name:
                    rohr_strang1_rl2 = hvac
                elif 'Rohr - Vorlauf Strang1 - 3' == hvac.Name:
                    rohr_strang1_vl3 = hvac
                elif 'Rohr - Ruecklauf Strang1 - 3' == hvac.Name:
                    rohr_strang1_rl3 = hvac             
                elif 'Rohr - Vorlauf Strang1 - 4' == hvac.Name:
                    rohr_strang1_vl4 = hvac
                elif 'Rohr - Ruecklauf Strang1 - 4' == hvac.Name:
                    rohr_strang1_rl4 = hvac
                elif 'Rohr - Vorlauf Strang2 - 1' == hvac.Name:
                    rohr_strang2_vl1 = hvac
                elif 'Rohr - Ruecklauf Strang2 - 1' == hvac.Name:
                    rohr_strang2_rl1 = hvac
                elif 'Rohr - Vorlauf Strang2 - 2' == hvac.Name:
                    rohr_strang2_vl2 = hvac
                elif 'Rohr - Ruecklauf Strang2 - 2' == hvac.Name:
                    rohr_strang2_rl2 = hvac             
                elif 'Rohr - Vorlauf Strang2 - 3' == hvac.Name:
                    rohr_strang2_vl3 = hvac
                elif 'Rohr - Ruecklauf Strang2 - 3' == hvac.Name:
                    rohr_strang2_rl3 = hvac
                elif 'Rohr - Vorlauf Strang2 - 4' == hvac.Name:
                    rohr_strang2_vl4 = hvac
                elif 'Rohr - Ruecklauf Strang2 - 4' == hvac.Name:
                    rohr_strang2_rl4 = hvac
                elif 'Rohr - Vorlauf Strang3 - 1' == hvac.Name:
                    rohr_strang3_vl1 = hvac
                elif 'Rohr - Ruecklauf Strang3 - 1' == hvac.Name:
                    rohr_strang3_rl1 = hvac
                elif 'Rohr - Vorlauf Strang3 - 2' == hvac.Name:
                    rohr_strang3_vl2 = hvac
                elif 'Rohr - Ruecklauf Strang3 - 2' == hvac.Name:
                    rohr_strang3_rl2 = hvac             
                elif 'Rohr - Vorlauf Strang3 - 3' == hvac.Name:
                    rohr_strang3_vl3 = hvac
                elif 'Rohr - Ruecklauf Strang3 - 3' == hvac.Name:
                    rohr_strang3_rl3 = hvac
                elif 'Rohr - Vorlauf Strang3 - 4' == hvac.Name:
                    rohr_strang3_vl4 = hvac
                elif 'Rohr - Ruecklauf Strang3 - 4' == hvac.Name:
                    rohr_strang3_rl4 = hvac            
                elif 'Rohr - Vorlauf Strang4 - 1' == hvac.Name:
                    rohr_strang4_vl1 = hvac
                elif 'Rohr - Ruecklauf Strang4 - 1' == hvac.Name:
                    rohr_strang4_rl1 = hvac
                elif 'Rohr - Vorlauf Strang4 - 2' == hvac.Name:
                    rohr_strang4_vl2 = hvac
                elif 'Rohr - Ruecklauf Strang4 - 2' == hvac.Name:
                    rohr_strang4_rl2 = hvac             
                elif 'Rohr - Vorlauf Strang4 - 3' == hvac.Name:
                    rohr_strang4_vl3 = hvac
                elif 'Rohr - Ruecklauf Strang4 - 3' == hvac.Name:
                    rohr_strang4_rl3 = hvac
                elif 'Rohr - Vorlauf Strang4 - 4' == hvac.Name:
                    rohr_strang4_vl4 = hvac
                elif 'Rohr - Ruecklauf Strang4 - 4' == hvac.Name:
                    rohr_strang4_rl4 = hvac
            building = ifc_system.by_type('IfcBuilding')[0]
            beschreibung = building.Description.split('_')
            stranganzahl = int(beschreibung.pop())
            rohre = ifc_system.by_type('IfcPipeSegment')
            rohre_hk = []
            hk1 = []
            hk2 = []
            hk3 = []
            hk4 = []
            for hk in ifc_system.by_type('IfcSpaceHeater'):
                strang = int(hk.Description.split('_').pop())
                if strang == 1:
                    hk1.append(hk)
                elif strang == 2:
                    hk2.append(hk)
                elif strang == 3:
                    hk3.append(hk)
                elif strang == 4:
                    hk4.append(hk)
            if stranganzahl == 1:
                laenge = len(ifc_system.by_type('IfcSpaceHeater')) 
                if laenge == 1:
                    pass
                elif laenge == 2:
                    rohre_hk.append(rohr_strang1_vl1)
                elif laenge == 3:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)
                elif laenge == 4:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)
                    rohre_hk.append(rohr_strang1_vl3) 
                elif laenge == 5:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)               
                    rohre_hk.append(rohr_strang1_vl3) 
                    rohre_hk.append(rohr_strang1_vl4) 
            elif stranganzahl == 2:     
                for rohr in rohre:
                    if 'zu Knoten1' in rohr.Name:
                        rohre_hk.append(rohr)
                if len(hk1) == 1:
                    pass
                elif len(hk1) == 2:
                    rohre_hk.append(rohr_strang1_vl1)
                elif len(hk1) == 3:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)
                elif len(hk1) == 4:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)
                    rohre_hk.append(rohr_strang1_vl3) 
                elif len(hk1) == 5:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)               
                    rohre_hk.append(rohr_strang1_vl3) 
                    rohre_hk.append(rohr_strang1_vl4) 
                if len(hk2) == 1:
                    pass
                elif len(hk2) == 2:
                    rohre_hk.append(rohr_strang2_vl1)
                elif len(hk2) == 3:
                    rohre_hk.append(rohr_strang2_vl1)
                    rohre_hk.append(rohr_strang2_vl2)
                elif len(hk2) == 4:
                    rohre_hk.append(rohr_strang2_vl1)
                    rohre_hk.append(rohr_strang2_vl2)
                    rohre_hk.append(rohr_strang2_vl3) 
                elif len(hk2) == 5:
                    rohre_hk.append(rohr_strang2_vl1)
                    rohre_hk.append(rohr_strang2_vl2)               
                    rohre_hk.append(rohr_strang2_vl3) 
                    rohre_hk.append(rohr_strang2_vl4)             
            elif stranganzahl == 3:     
                for rohr in rohre:
                    if 'zu Knoten1' in rohr.Name:
                        rohre_hk.append(rohr)
                    elif 'zu Knoten2' in rohr.Name:
                        rohre_hk.append(rohr)
                if len(hk1) == 1:
                    pass
                elif len(hk1) == 2:
                    rohre_hk.append(rohr_strang1_vl1)
                elif len(hk1) == 3:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)
                elif len(hk1) == 4:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)
                    rohre_hk.append(rohr_strang1_vl3) 
                elif len(hk1) == 5:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)               
                    rohre_hk.append(rohr_strang1_vl3) 
                    rohre_hk.append(rohr_strang1_vl4) 
                if len(hk2) == 1:
                    pass
                elif len(hk2) == 2:
                    rohre_hk.append(rohr_strang2_vl1)
                elif len(hk2) == 3:
                    rohre_hk.append(rohr_strang2_vl1)
                    rohre_hk.append(rohr_strang2_vl2)
                elif len(hk2) == 4:
                    rohre_hk.append(rohr_strang2_vl1)
                    rohre_hk.append(rohr_strang2_vl2)
                    rohre_hk.append(rohr_strang2_vl3) 
                elif len(hk2) == 5:
                    rohre_hk.append(rohr_strang2_vl1)
                    rohre_hk.append(rohr_strang2_vl2)               
                    rohre_hk.append(rohr_strang2_vl3) 
                    rohre_hk.append(rohr_strang2_vl4)  
                if len(hk3) == 1:
                    pass
                elif len(hk3) == 2:
                    rohre_hk.append(rohr_strang3_vl1)
                elif len(hk3) == 3:
                    rohre_hk.append(rohr_strang3_vl1)
                    rohre_hk.append(rohr_strang3_vl2)
                elif len(hk3) == 4:
                    rohre_hk.append(rohr_strang3_vl1)
                    rohre_hk.append(rohr_strang3_vl2)
                    rohre_hk.append(rohr_strang3_vl3) 
                elif len(hk3) == 5:
                    rohre_hk.append(rohr_strang3_vl1)
                    rohre_hk.append(rohr_strang3_vl2)               
                    rohre_hk.append(rohr_strang3_vl3) 
                    rohre_hk.append(rohr_strang3_vl4)  
            elif stranganzahl == 4:     
                for rohr in rohre:
                    if 'zu Knoten1' in rohr.Name:
                        rohre_hk.append(rohr)
                    elif 'zu Knoten2' in rohr.Name:
                        rohre_hk.append(rohr)
                    elif 'zu Knoten3' in rohr.Name:
                        rohre_hk.append(rohr)
                if len(hk1) == 1:
                    pass
                elif len(hk1) == 2:
                    rohre_hk.append(rohr_strang1_vl1)
                elif len(hk1) == 3:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)
                elif len(hk1) == 4:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)
                    rohre_hk.append(rohr_strang1_vl3) 
                elif len(hk1) == 5:
                    rohre_hk.append(rohr_strang1_vl1)
                    rohre_hk.append(rohr_strang1_vl2)               
                    rohre_hk.append(rohr_strang1_vl3) 
                    rohre_hk.append(rohr_strang1_vl4) 
                if len(hk2) == 1:
                    pass
                elif len(hk2) == 2:
                    rohre_hk.append(rohr_strang2_vl1)
                elif len(hk2) == 3:
                    rohre_hk.append(rohr_strang2_vl1)
                    rohre_hk.append(rohr_strang2_vl2)
                elif len(hk2) == 4:
                    rohre_hk.append(rohr_strang2_vl1)
                    rohre_hk.append(rohr_strang2_vl2)
                    rohre_hk.append(rohr_strang2_vl3) 
                elif len(hk2) == 5:
                    rohre_hk.append(rohr_strang2_vl1)
                    rohre_hk.append(rohr_strang2_vl2)               
                    rohre_hk.append(rohr_strang2_vl3) 
                    rohre_hk.append(rohr_strang2_vl4)  
                if len(hk3) == 1:
                    pass
                elif len(hk3) == 2:
                    rohre_hk.append(rohr_strang3_vl1)
                elif len(hk3) == 3:
                    rohre_hk.append(rohr_strang3_vl1)
                    rohre_hk.append(rohr_strang3_vl2)
                elif len(hk3) == 4:
                    rohre_hk.append(rohr_strang3_vl1)
                    rohre_hk.append(rohr_strang3_vl2)
                    rohre_hk.append(rohr_strang3_vl3) 
                elif len(hk3) == 5:
                    rohre_hk.append(rohr_strang3_vl1)
                    rohre_hk.append(rohr_strang3_vl2)               
                    rohre_hk.append(rohr_strang3_vl3) 
                    rohre_hk.append(rohr_strang3_vl4)                 
                if len(hk4) == 1:
                    pass
                elif len(hk4) == 2:
                    rohre_hk.append(rohr_strang4_vl1)
                elif len(hk4) == 3:
                    rohre_hk.append(rohr_strang4_vl1)
                    rohre_hk.append(rohr_strang4_vl2)
                elif len(hk4) == 4:
                    rohre_hk.append(rohr_strang4_vl1)
                    rohre_hk.append(rohr_strang4_vl2)
                    rohre_hk.append(rohr_strang4_vl3) 
                elif len(hk4) == 5:
                    rohre_hk.append(rohr_strang4_vl1)
                    rohre_hk.append(rohr_strang4_vl2)               
                    rohre_hk.append(rohr_strang4_vl3) 
                    rohre_hk.append(rohr_strang4_vl4)               
            for rohr in rohre_hk:
                for property_set in rohr.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                        ges = round(property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue, 2)
                txt1 = Label(text=rohr.Name, font_size=16)
                txt2 = Label(text=str(ges) +' m/s', font_size=16)
                txt3 = Label(text='1.0 m/s', font_size=16)
                grid_b1.add_widget(txt1); grid_b1.add_widget(txt2);
                grid_b1.add_widget(txt3);   
            for element in ifc_system.by_type('IfcSpaceHeater'):
                rohr = element.IsNestedBy[0].RelatedObjects[1].ConnectedFrom[0].RelatingPort.Nests[0].RelatingObject
                for property_set in rohr.IsDefinedBy:
                    if property_set.RelatingPropertyDefinition.Name == "Pset_PipeSegmentTypeCommon":
                        ges = round(property_set.RelatingPropertyDefinition.HasProperties[13].NominalValue.wrappedValue, 2)
                txt1 = Label(text=rohr.Name, font_size=16)
                txt2 = Label(text=str(ges) +' m/s', font_size=16)
                txt3 = Label(text='0.8 m/s', font_size=16)
                grid_b1.add_widget(txt1); grid_b1.add_widget(txt2);
                grid_b1.add_widget(txt3); 

        grid_add = GridLayout(cols=1, size_hint=[1.0, 0.15])
        self.our_layouts['Hydraulischer_Abgleich'].add_widget(grid_add)
        button_zurueck      = Button(text= "zurück zum Qualitätssicherungsmenü", font_size=16, background_color= (0.8,0.1,0,1), on_release=self.switch_layout)
        grid_add.add_widget(button_zurueck)

### Subclass App. NOTE: we also use the app for Namespacing
class StartApp(App):
    def __init__(self,*args,**kwargs):
        super(StartApp, self).__init__(*args,**kwargs)
        self.ifc_file = ifc_file
        self.building = building
        self.qs_heizkoerper = {}
        self.current_room = None
        self.current_heizkreis = None
        self.defined_rooms = []
        self.heizkreis_hk = {}
        self.defined_heizkreise = []
        self.current_room1 = None
        self.current_wall = None
        self.current_decke = None
        self.defined_walls = []
        self.defined_windows = []
        self.eingaben = {}
        self.heizkreis_dimension = {}
        self.heizkoerper_eingegeben = {'Heizkoerper':{}}
        self.waende_eingegeben = {'Wände':{}}
        self.fenster_eingegeben = {'Fenster':{}}
        self.tueren_eingegeben = {'Türen': {}}
        self.decke_eingegeben = {'Decke':{}}
        self.boden_eingegeben = {'Boden':{}}
        self.raumname = None
        self.anlage = None
        self.aktueller_raum = ''
        self.rohrk1_l = None
        self.rohrk1_d = None
        self.raumhoehen = {}
        self.raumflaechen = {}
        # Namespacing: We pull the functions from Heizlast_functional_update
        #   to become our methods.
        for f in [building_settings, add_room, add_wall, add_door, add_floor,
                  add_window, add_ceiling, trinkwarm_building_neu, trinkwarm_building, 
                  trinkwarm_building2, schema2, schema3_fb, schema3, schema4, schema5, vorschlagsmodell, abgleich_zweirohr,
                  abgleich_fbh, abgleich_fbh_ustrang, colebrook_prandtl, darcy_weisbach]:
            self.__dict__[f.__name__] = f
    def build(self):
        ### screen-basiert
        ms.add_widget(Main(name="Main"))
        ms.current = "Main"
        return ms
        
if __name__ == "__main__":
    if hasattr(sys, '_MEIPASS'):
        resource_add_path(os.path.join(sys._MEIPASS))
    StartApp().run()